{"version":3,"sources":["hooks/useLastUpdated.ts","views/Nft/market/ActivityHistory/ClearAllButton.tsx","views/Nft/market/ActivityHistory/ActivityFilter.tsx","views/Nft/market/components/Filters/ListCollectionFilter/styles.tsx","views/Nft/market/components/Filters/ListCollectionFilter/index.tsx","views/Nft/market/ActivityHistory/ActivityFilters.tsx","views/Nft/market/ActivityHistory/ActivityHistory.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/styles.tsx","views/Nft/market/components/NFTMedia.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/components/Filters/ListFilter/styles.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/ActivityHistory/utils/fetchActivityNftMetadata.tsx","views/Nft/market/ActivityHistory/utils/sortActivity.tsx"],"names":["useLastUpdated","useState","Date","now","lastUpdated","setStateLastUpdated","previousLastUpdated","usePreviousValue","setLastUpdated","useCallback","ClearAllButton","collectionAddress","props","dispatch","useAppDispatch","t","useTranslation","variant","scale","onClick","removeAllActivityFilters","TriggerButton","styled","Button","hasItem","CloseButton","IconButton","eventName","eventType","MarketEvent","CANCEL","MODIFY","NEW","SELL","ActivityFilter","nftActivityFilters","useGetNftActivityFilters","isEventSelected","typeFilters","some","nftActivityFilter","alignItems","mr","mb","addActivityTypeFilters","collection","field","removeActivityTypeFilters","color","width","CollectionItemRow","item","isSelected","px","py","style","flex","label","ml","name","onChange","checked","value","ListCollectionFilter","isOpen","setIsOpen","query","setQuery","orderKey","orderDir","orderState","setOrderState","collections","useGetCollections","wrapperRef","useRef","menuRef","isAnyCollectionSelected","collectionFilters","length","filteredCollections","Object","values","filter","toLowerCase","indexOf","map","isItemSelected","address","toggleSort","newOrderKey","prevOrderDir","useEffect","handleClickOutside","target","current","contains","document","addEventListener","removeEventListener","ref","component","options","placement","maxWidth","p","startIcon","placeholder","evt","fontSize","fontWeight","textTransform","height","overflowY","orderBy","addActivityCollectionFilters","removeActivityCollectionFilters","handleItemClick","justifyContent","textAlign","removeAllActivityCollectionFilters","Container","Flex","theme","mediaQueries","sm","ScrollableFlexContainer","md","ActivityFilters","flexDirection","bold","isEmpty","ActivityHistory","useTheme","activity","currentPage","maxPage","paginationData","setPaginationData","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","isLoading","setIsLoading","isInitialized","setIsInitialized","queryPage","setQueryPage","refresh","bnbBusdPrice","useBNBBusdPrice","useMatchBreakpoints","isXs","isSm","nftActivityFiltersString","JSON","stringify","fetchCollectionActivity","a","nftActivityFiltersParsed","parse","getCollectionActivity","collectionActivity","sortActivity","Math","ceil","console","error","isAddress","fetchNftMetadata","fetchActivityNftMetadata","nfts","slice","gap","padding","disabled","overflowX","nftMeta","find","metaNft","tokenId","nft","ActivityRow","marketEvent","timestamp","tx","TableLoader","borderTop","colors","cardBorder","pt","prevState","page","NoNftsImage","TwoColumnsContainer","RoundedImage","Image","radii","default","SmallRoundedImage","CollectionLink","Link","primary","lg","CollectibleRowContainer","Grid","StyledSortButton","button","secondary","ButtonContainer","Box","TableHeading","StyledAspectRatio","AspectRatio","ratio","children","pb","position","NFTMedia","borderRadius","as","useIntersectionObserver","observerRef","isIntersecting","vidRef","play","pause","image","webm","mp4","muted","loop","playsInline","src","type","gif","thumbnail","alt","div","PageButtons","Arrow","Avatar","img","StyledFlex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","FetchStatus","Fetched","to","nftsBaseUrl","display","lineHeight","truncateHash","StyledItemRow","ItemImage","SearchWrapper","dropdown","FilterButton","GridItem","LoadingRow","ActivityEventText","events","text","BUY","MobileModal","localeTimestamp","onDismiss","isUserActivity","chainId","useActiveWeb3React","priceAsFloat","parseFloat","price","priceInUsd","multiplyPriceByAmount","title","headerBackground","gradients","cardHeader","collectionName","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","otherParty","seller","buyer","external","href","getBscScanLink","ActivityPrice","justifySelf","isNftActivity","timestampAsMs","year","month","day","hour","minute","useModal","onPresentMobileModal","isPBCollection","pancakeBunniesAddress","attributes","attribute","traitType","event","stopPropagation","RouterLink","activities","id","getNftsFromCollectionApi","bunniesMetadata","pbNfts","data","otherId","activityNftTokenIds","uniqBy","getNftsFromDifferentCollectionsApi","concat","askOrders","transactions","allActivity","askOrderHistory","orderType","AskOrderType","getAskOrderEvent","askPrice","transactionHistory","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber"],"mappings":"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","file":"static/js/4.302cbe94.chunk.js","sourcesContent":["import { useCallback, useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = useCallback(() => {\r\n    setStateLastUpdated(Date.now())\r\n  }, [setStateLastUpdated])\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n","import React from 'react'\r\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeAllActivityFilters } from 'state/nftMarket/reducer'\r\n\r\ninterface ClearAllButtonProps extends ButtonProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n\r\n  const clearAll = () => {\r\n    dispatch(removeAllActivityFilters(collectionAddress))\r\n  }\r\n\r\n  return (\r\n    <Button key=\"clear-all\" variant=\"text\" scale=\"sm\" onClick={clearAll} {...props}>\r\n      {t('Clear')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClearAllButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Button, Flex, IconButton, CloseIcon } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { addActivityTypeFilters, removeActivityTypeFilters } from 'state/nftMarket/reducer'\r\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { MarketEvent } from '../../../../state/nftMarket/types'\r\n\r\ninterface ActivityFilterProps {\r\n  eventType: MarketEvent\r\n  collectionAddress: string\r\n}\r\n\r\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\r\n  ${({ hasItem }) =>\r\n    hasItem &&\r\n    `  \r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    padding-right: 8px;\r\n  `}\r\n`\r\n\r\nconst CloseButton = styled(IconButton)`\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n`\r\n\r\nconst eventName = (t: ContextApi['t'], eventType: string) => {\r\n  switch (eventType) {\r\n    case MarketEvent.CANCEL:\r\n      return t('Delisted')\r\n    case MarketEvent.MODIFY:\r\n      return t('Modified')\r\n    case MarketEvent.NEW:\r\n      return t('Listed')\r\n    case MarketEvent.SELL:\r\n      return t('Sold')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nexport const ActivityFilter: React.FC<ActivityFilterProps> = ({ eventType, collectionAddress }) => {\r\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n\r\n  const isEventSelected = nftActivityFilters.typeFilters.some((nftActivityFilter) => nftActivityFilter === eventType)\r\n\r\n  const handleMenuClick = () => {\r\n    if (!isEventSelected) {\r\n      dispatch(addActivityTypeFilters({ collection: collectionAddress, field: eventType }))\r\n    }\r\n  }\r\n\r\n  const handleClearItem = () => {\r\n    dispatch(removeActivityTypeFilters({ collection: collectionAddress, field: eventType }))\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\r\n      <Box>\r\n        <TriggerButton\r\n          onClick={handleMenuClick}\r\n          variant={isEventSelected ? 'subtle' : 'light'}\r\n          scale=\"sm\"\r\n          hasItem={isEventSelected}\r\n        >\r\n          {eventName(t, eventType)}\r\n        </TriggerButton>\r\n      </Box>\r\n      {isEventSelected && (\r\n        <CloseButton variant={isEventSelected ? 'subtle' : 'light'} scale=\"sm\" onClick={handleClearItem}>\r\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\r\n        </CloseButton>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Checkbox, Flex, Text } from '@pancakeswap/uikit'\r\nimport { StyledItemRow } from '../ListFilter/styles'\r\n\r\ninterface CollectionItemRowProps {\r\n  item: CollectionItem\r\n  isSelected: boolean\r\n  onClick: (evt) => void\r\n}\r\n\r\ninterface CollectionItem {\r\n  label: string\r\n  collectionAddress: string\r\n}\r\n\r\nexport const CollectionItemRow: React.FC<CollectionItemRowProps> = ({ item, isSelected, onClick }) => (\r\n  <StyledItemRow alignItems=\"center\" px=\"16px\" py=\"8px\">\r\n    <Text style={{ flex: 1 }}>{item.label}</Text>\r\n    <Flex ml=\"24px\">\r\n      <Checkbox name=\"item-select\" scale=\"sm\" onChange={onClick} checked={isSelected} value={item.collectionAddress} />\r\n    </Flex>\r\n  </StyledItemRow>\r\n)\r\n","import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport {\r\n  Box,\r\n  Text,\r\n  Flex,\r\n  InlineMenu,\r\n  CloseIcon,\r\n  InputGroup,\r\n  SearchIcon,\r\n  Input,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { useGetCollections, useGetNftActivityFilters } from 'state/nftMarket/hooks'\r\nimport {\r\n  addActivityCollectionFilters,\r\n  removeActivityCollectionFilters,\r\n  removeAllActivityCollectionFilters,\r\n} from 'state/nftMarket/reducer'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { CloseButton, FilterButton, ListOrderState, SearchWrapper, TriggerButton } from '../ListFilter/styles'\r\nimport { CollectionItemRow } from './styles'\r\n\r\nexport const ListCollectionFilter: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [query, setQuery] = useState('')\r\n  const [orderState, setOrderState] = useState<ListOrderState>({ orderKey: 'label', orderDir: 'asc' })\r\n  const collections = useGetCollections()\r\n  const wrapperRef = useRef(null)\r\n  const menuRef = useRef(null)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const { orderKey, orderDir } = orderState\r\n  const nftActivityFilters = useGetNftActivityFilters('')\r\n  const isAnyCollectionSelected = nftActivityFilters.collectionFilters.length > 0\r\n\r\n  const filteredCollections = (\r\n    query && query.length > 1\r\n      ? Object.values(collections).filter((item) => item.name.toLowerCase().indexOf(query.toLowerCase()) !== -1)\r\n      : Object.values(collections)\r\n  ).map((item) => {\r\n    const isItemSelected = nftActivityFilters.collectionFilters.some((collectionAddress) => {\r\n      return item.address.toLowerCase() === collectionAddress.toLowerCase()\r\n    })\r\n    return { ...item, isSelected: isItemSelected }\r\n  })\r\n\r\n  const handleClearFilter = () => {\r\n    dispatch(removeAllActivityCollectionFilters())\r\n  }\r\n\r\n  const handleMenuClick = () => setIsOpen(!isOpen)\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = evt.target\r\n    setQuery(value)\r\n  }\r\n\r\n  const handleItemClick = (evt: ChangeEvent<HTMLInputElement>, collection: Collection) => {\r\n    if (evt.target.checked) {\r\n      dispatch(addActivityCollectionFilters({ collection: collection.address.toLowerCase() }))\r\n    } else {\r\n      dispatch(removeActivityCollectionFilters({ collection: collection.address.toLowerCase() }))\r\n    }\r\n  }\r\n\r\n  const toggleSort = (newOrderKey: string) => () => {\r\n    setOrderState((prevOrderDir) => {\r\n      if (prevOrderDir.orderKey !== newOrderKey) {\r\n        return {\r\n          orderKey: newOrderKey,\r\n          orderDir: 'asc',\r\n        }\r\n      }\r\n\r\n      return {\r\n        orderKey: newOrderKey,\r\n        orderDir: prevOrderDir.orderDir === 'asc' ? 'desc' : 'asc',\r\n      }\r\n    })\r\n  }\r\n\r\n  // @TODO Fix this in the Toolkit\r\n  // This is a fix to ensure the \"isOpen\" value is aligned with the menus's (to avoid a double click)\r\n  useEffect(() => {\r\n    const handleClickOutside = ({ target }: Event) => {\r\n      if (\r\n        wrapperRef.current &&\r\n        menuRef.current &&\r\n        !menuRef.current.contains(target) &&\r\n        !wrapperRef.current.contains(target)\r\n      ) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [setIsOpen, wrapperRef, menuRef])\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\r\n      <Box ref={wrapperRef}>\r\n        <InlineMenu\r\n          component={\r\n            <TriggerButton\r\n              onClick={handleMenuClick}\r\n              variant={isAnyCollectionSelected ? 'subtle' : 'light'}\r\n              scale=\"sm\"\r\n              hasItem={isAnyCollectionSelected}\r\n            >\r\n              {t('Collection')}\r\n            </TriggerButton>\r\n          }\r\n          isOpen={isOpen}\r\n          options={{ placement: 'bottom' }}\r\n        >\r\n          <Box maxWidth=\"375px\" ref={menuRef}>\r\n            <SearchWrapper alignItems=\"center\" p=\"16px\">\r\n              <InputGroup startIcon={<SearchIcon color=\"textSubtle\" />}>\r\n                <Input name=\"query\" placeholder={t('Search')} onChange={handleChange} value={query} />\r\n              </InputGroup>\r\n            </SearchWrapper>\r\n            <Flex alignItems=\"center\" p=\"16px\">\r\n              <FilterButton onClick={toggleSort('name')} style={{ flex: 1 }}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Name')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'name' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'name' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n              <FilterButton onClick={toggleSort('isSelected')}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Filter')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'isSelected' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'isSelected' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n            </Flex>\r\n            <Box height=\"240px\" overflowY=\"auto\">\r\n              {filteredCollections.length > 0 ? (\r\n                orderBy(filteredCollections, orderKey, orderDir).map((collection) => {\r\n                  const handleClick = (evt: ChangeEvent<HTMLInputElement>) => handleItemClick(evt, collection)\r\n\r\n                  return (\r\n                    <CollectionItemRow\r\n                      key={collection.address}\r\n                      item={{ label: collection.name, collectionAddress: collection.address }}\r\n                      isSelected={collection.isSelected}\r\n                      onClick={handleClick}\r\n                    />\r\n                  )\r\n                })\r\n              ) : (\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" height=\"230px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    {t('No results found')}\r\n                  </Text>\r\n                </Flex>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </InlineMenu>\r\n      </Box>\r\n      {isAnyCollectionSelected && (\r\n        <CloseButton variant={isAnyCollectionSelected ? 'subtle' : 'light'} scale=\"sm\" onClick={handleClearFilter}>\r\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\r\n        </CloseButton>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\r\nimport { Collection, MarketEvent } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ClearAllButton from './ClearAllButton'\r\nimport { ActivityFilter } from './ActivityFilter'\r\nimport { ListCollectionFilter } from '../components/Filters/ListCollectionFilter'\r\n\r\nexport const Container = styled(Flex)`\r\n  gap: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    align-items: center;\r\n    flex-grow: 2;\r\n  }\r\n`\r\n\r\nconst ScrollableFlexContainer = styled(Flex)`\r\n  align-items: center;\r\n  flex: 1;\r\n  flex-wrap: nowrap;\r\n  overflow-x: auto;\r\n  -webkit-overflow-scrolling: touch;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-wrap: wrap;\r\n    overflow-x: revert;\r\n  }\r\n`\r\n\r\ninterface FiltersProps {\r\n  collection: Collection\r\n}\r\n\r\nconst ActivityFilters: React.FC<FiltersProps> = ({ collection }) => {\r\n  const { address } = collection || { address: '' }\r\n  const { t } = useTranslation()\r\n\r\n  const nftActivityFilters = useGetNftActivityFilters(address)\r\n\r\n  return (\r\n    <Container justifyContent=\"space-between\" flexDirection={['column', 'column', 'row']}>\r\n      <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\r\n        {t('Filter by')}\r\n      </Text>\r\n      <ScrollableFlexContainer>\r\n        {address === '' && <ListCollectionFilter />}\r\n        {[MarketEvent.NEW, MarketEvent.CANCEL, MarketEvent.MODIFY, MarketEvent.SELL].map((eventType) => {\r\n          return <ActivityFilter key={eventType} eventType={eventType} collectionAddress={address} />\r\n        })}\r\n      </ScrollableFlexContainer>\r\n      {!isEmpty(nftActivityFilters.typeFilters) || !isEmpty(nftActivityFilters.collectionFilters) ? (\r\n        <ClearAllButton collectionAddress={address} />\r\n      ) : null}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActivityFilters\r\n","import React, { useEffect, useState } from 'react'\r\nimport { isAddress } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Table,\r\n  Text,\r\n  Th,\r\n  useMatchBreakpoints,\r\n} from '@pancakeswap/uikit'\r\nimport { getCollectionActivity } from 'state/nftMarket/helpers'\r\nimport Container from 'components/Layout/Container'\r\nimport TableLoader from 'components/TableLoader'\r\nimport { Activity, Collection, NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\r\nimport { Arrow, PageButtons } from '../components/PaginationButtons'\r\nimport NoNftsImage from '../components/Activity/NoNftsImage'\r\nimport ActivityFilters from './ActivityFilters'\r\nimport ActivityRow from '../components/Activity/ActivityRow'\r\nimport { sortActivity } from './utils/sortActivity'\r\nimport { fetchActivityNftMetadata } from './utils/fetchActivityNftMetadata'\r\n\r\nconst MAX_PER_PAGE = 8\r\n\r\nconst MAX_PER_QUERY = 100\r\n\r\ninterface ActivityHistoryProps {\r\n  collection?: Collection\r\n}\r\n\r\nconst ActivityHistory: React.FC<ActivityHistoryProps> = ({ collection }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { address: collectionAddress } = collection || { address: '' }\r\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n  const [paginationData, setPaginationData] = useState<{\r\n    activity: Activity[]\r\n    currentPage: number\r\n    maxPage: number\r\n  }>({\r\n    activity: [],\r\n    currentPage: 1,\r\n    maxPage: 1,\r\n  })\r\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\r\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [isInitialized, setIsInitialized] = useState(false)\r\n  const [queryPage, setQueryPage] = useState(1)\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  const nftActivityFiltersString = JSON.stringify(nftActivityFilters)\r\n\r\n  useEffect(() => {\r\n    const fetchCollectionActivity = async () => {\r\n      try {\r\n        setIsLoading(true)\r\n        const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\r\n        const collectionActivity = await getCollectionActivity(\r\n          collectionAddress.toLowerCase(),\r\n          nftActivityFiltersParsed,\r\n          MAX_PER_QUERY,\r\n        )\r\n        const activity = sortActivity(collectionActivity)\r\n        setPaginationData({\r\n          activity,\r\n          currentPage: 1,\r\n          maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\r\n        })\r\n        setIsLoading(false)\r\n        setIsInitialized(true)\r\n      } catch (error) {\r\n        console.error('Failed to fetch collection activity', error)\r\n      }\r\n    }\r\n\r\n    if ((collectionAddress && isAddress(collectionAddress)) || collectionAddress === '') {\r\n      fetchCollectionActivity()\r\n    }\r\n  }, [dispatch, collectionAddress, nftActivityFiltersString, lastUpdated])\r\n\r\n  useEffect(() => {\r\n    const fetchNftMetadata = async () => {\r\n      const nfts = await fetchActivityNftMetadata(activitiesSlice)\r\n      setNftMetadata(nfts)\r\n    }\r\n\r\n    if (activitiesSlice.length > 0) {\r\n      fetchNftMetadata()\r\n    }\r\n  }, [activitiesSlice])\r\n\r\n  useEffect(() => {\r\n    const slice = paginationData.activity.slice(\r\n      MAX_PER_PAGE * (paginationData.currentPage - 1),\r\n      MAX_PER_PAGE * paginationData.currentPage,\r\n    )\r\n    setActivitiesSlice(slice)\r\n  }, [paginationData])\r\n\r\n  return (\r\n    <Box py=\"32px\">\r\n      <Container px={[0, null, '24px']}>\r\n        <Flex\r\n          style={{ gap: '16px', padding: '0 16px' }}\r\n          alignItems={[null, null, 'center']}\r\n          flexDirection={['column', 'column', 'row']}\r\n        >\r\n          <ActivityFilters collection={collection} />\r\n          <Button\r\n            scale=\"sm\"\r\n            disabled={isLoading}\r\n            onClick={() => {\r\n              refresh()\r\n            }}\r\n          >\r\n            {t('Refresh')}\r\n          </Button>\r\n        </Flex>\r\n      </Container>\r\n      <Container style={{ overflowX: 'auto' }}>\r\n        {paginationData.activity.length === 0 &&\r\n        nftMetadata.length === 0 &&\r\n        activitiesSlice.length === 0 &&\r\n        !isLoading ? (\r\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n            <NoNftsImage />\r\n            <Text pt=\"8px\" bold>\r\n              {t('No NFT market history found')}\r\n            </Text>\r\n          </Flex>\r\n        ) : (\r\n          <>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\r\n                  <Th textAlign=\"right\"> {t('Event')}</Th>\r\n                  {isXs || isSm ? null : (\r\n                    <>\r\n                      <Th textAlign=\"right\"> {t('Price')}</Th>\r\n                      <Th textAlign=\"center\"> {t('From')}</Th>\r\n                      <Th textAlign=\"center\"> {t('To')}</Th>\r\n                    </>\r\n                  )}\r\n                  <Th textAlign=\"center\"> {t('Date')}</Th>\r\n                  {isXs || isSm ? null : <Th />}\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                {!isInitialized ? (\r\n                  <TableLoader />\r\n                ) : (\r\n                  activitiesSlice.map((activity) => {\r\n                    const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\r\n                    return (\r\n                      <ActivityRow\r\n                        key={`${activity.marketEvent}#${activity.nft.tokenId}#${activity.timestamp}#${activity.tx}`}\r\n                        activity={activity}\r\n                        nft={nftMeta}\r\n                        bnbBusdPrice={bnbBusdPrice}\r\n                      />\r\n                    )\r\n                  })\r\n                )}\r\n              </tbody>\r\n            </Table>\r\n            <Flex\r\n              borderTop={`1px ${theme.colors.cardBorder} solid`}\r\n              pt=\"24px\"\r\n              flexDirection=\"column\"\r\n              justifyContent=\"space-between\"\r\n              height=\"100%\"\r\n            >\r\n              <PageButtons>\r\n                <Arrow\r\n                  onClick={() => {\r\n                    if (paginationData.currentPage !== 1) {\r\n                      setPaginationData((prevState) => ({\r\n                        ...prevState,\r\n                        currentPage: prevState.currentPage - 1,\r\n                      }))\r\n                    }\r\n                  }}\r\n                >\r\n                  <ArrowBackIcon color={paginationData.currentPage === 1 ? 'textDisabled' : 'primary'} />\r\n                </Arrow>\r\n                <Text>\r\n                  {t('Page %page% of %maxPage%', {\r\n                    page: paginationData.currentPage,\r\n                    maxPage: paginationData.maxPage,\r\n                  })}\r\n                </Text>\r\n                <Arrow\r\n                  onClick={async () => {\r\n                    if (paginationData.currentPage !== paginationData.maxPage) {\r\n                      setPaginationData((prevState) => ({\r\n                        ...prevState,\r\n                        currentPage: prevState.currentPage + 1,\r\n                      }))\r\n\r\n                      if (\r\n                        paginationData.maxPage - paginationData.currentPage === 1 &&\r\n                        paginationData.activity.length === MAX_PER_QUERY * queryPage\r\n                      ) {\r\n                        try {\r\n                          setIsLoading(true)\r\n                          const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\r\n                          const collectionActivity = await getCollectionActivity(\r\n                            collectionAddress.toLowerCase(),\r\n                            nftActivityFiltersParsed,\r\n                            MAX_PER_QUERY * (queryPage + 1),\r\n                          )\r\n                          const activity = sortActivity(collectionActivity)\r\n                          setPaginationData((prevState) => {\r\n                            return {\r\n                              ...prevState,\r\n                              activity,\r\n                              maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\r\n                            }\r\n                          })\r\n                          setIsLoading(false)\r\n                          setQueryPage((prevState) => prevState + 1)\r\n                        } catch (error) {\r\n                          console.error('Failed to fetch collection activity', error)\r\n                        }\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  <ArrowForwardIcon\r\n                    color={paginationData.currentPage === paginationData.maxPage ? 'textDisabled' : 'primary'}\r\n                  />\r\n                </Arrow>\r\n              </PageButtons>\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ActivityHistory\r\n","import styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { Box, Flex, Grid, Image } from '@pancakeswap/uikit'\r\n\r\nexport const TwoColumnsContainer = styled(Flex)`\r\n  gap: 22px;\r\n  align-items: flex-start;\r\n  & > div:first-child {\r\n    flex: 1;\r\n    gap: 20px;\r\n  }\r\n  & > div:last-child {\r\n    flex: 2;\r\n  }\r\n`\r\n\r\nexport const RoundedImage = styled(Image)`\r\n  height: max-content;\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  overflow: hidden;\r\n  & > img {\r\n    object-fit: contain;\r\n  }\r\n`\r\n\r\nexport const SmallRoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\nexport const Container = styled(Flex)`\r\n  gap: 24px;\r\n`\r\n\r\nexport const CollectionLink = styled(Link)`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: block;\r\n  font-weight: 600;\r\n  margin-top: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: 50px;\r\n  }\r\n`\r\n\r\nexport const CollectibleRowContainer = styled(Grid)`\r\n  &:hover {\r\n    opacity: 0.5;\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const StyledSortButton = styled.button`\r\n  border: none;\r\n  cursor: pointer;\r\n  background: none;\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  font-weight: bold;\r\n`\r\n\r\nexport const ButtonContainer = styled(Box)`\r\n  text-align: right;\r\n  padding-right: 24px;\r\n`\r\n\r\nexport const TableHeading = styled(Grid)`\r\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\r\n`\r\n","import { Box, BoxProps } from '@pancakeswap/uikit'\r\nimport React, { FC, useEffect, useRef } from 'react'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport styled from 'styled-components'\r\nimport { RoundedImage } from '../Collection/IndividualNFTPage/shared/styles'\r\n\r\nconst StyledAspectRatio = styled(Box)`\r\n  position: absolute;\r\n  inset: 0;\r\n`\r\n\r\nexport const AspectRatio = ({ ratio, children, ...props }) => (\r\n  <Box width=\"100%\" height={0} pb={`${100 / ratio}%`} position=\"relative\" {...props}>\r\n    <StyledAspectRatio>{children}</StyledAspectRatio>\r\n  </Box>\r\n)\r\n\r\nconst NFTMedia: FC<\r\n  {\r\n    nft?: NftToken\r\n    as?: any\r\n    width: number\r\n    height: number\r\n  } & Omit<BoxProps, 'width' | 'height' | 'as'>\r\n> = ({ width, height, nft, borderRadius = 'default', as, ...props }) => {\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const vidRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (vidRef.current) {\r\n      if (isIntersecting) {\r\n        vidRef.current.play()\r\n      } else {\r\n        vidRef.current.pause()\r\n      }\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  if (nft?.image.webm || nft?.image.mp4) {\r\n    return (\r\n      <AspectRatio ratio={width / height} {...props}>\r\n        <div ref={observerRef} />\r\n        <Box ref={vidRef} borderRadius={borderRadius} as=\"video\" width=\"100%\" height=\"100%\" muted loop playsInline>\r\n          <source src={nft.image.webm} type=\"video/webm\" />\r\n          <source src={nft.image.mp4} type=\"video/mp4\" />\r\n        </Box>\r\n      </AspectRatio>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <RoundedImage\r\n      width={width}\r\n      height={height}\r\n      src={nft?.image.gif || nft?.image.thumbnail}\r\n      alt={nft?.name}\r\n      as={as}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default NFTMedia\r\n","import styled from 'styled-components'\r\n\r\nconst NoNftsImage = styled.div`\r\n  background: url('/images/nfts/no-profile-md.png');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default NoNftsImage\r\n","import styled from 'styled-components'\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport { Link } from 'react-router-dom'\r\nimport { nftsBaseUrl } from '../constants'\r\n\r\nconst Avatar = styled.img`\r\n  margin-right: 4px;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-right: 12px;\r\n  }\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  align-items: center;\r\n  transition: opacity 200ms ease-in;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\r\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\r\n  const profileName = username || '-'\r\n\r\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n  if (avatarFetchStatus === FetchStatus.Fetched) {\r\n    if (profileNft?.image?.thumbnail) {\r\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\r\n    } else {\r\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\r\n      <StyledFlex>\r\n        {sellerProfilePicComponent}\r\n        <Box display=\"inline\">\r\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\r\n          {usernameFetchStatus !== FetchStatus.Fetched ? <Skeleton /> : <Text lineHeight=\"1.25\">{profileName}</Text>}\r\n        </Box>\r\n      </StyledFlex>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default ProfileCell\r\n","import { Flex, Image, Button, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nexport const StyledItemRow = styled(Flex)`\r\n  cursor: pointer;\r\n  user-select: none;\r\n`\r\n\r\nexport const ItemImage = styled(Image)`\r\n  border-radius: 50%;\r\n`\r\n\r\nexport const SearchWrapper = styled(Flex)`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  border-radius: 24px 24px 0 0;\r\n`\r\n\r\nexport const FilterButton = styled(Flex)`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  svg {\r\n    pointer-events: none;\r\n  }\r\n`\r\n\r\nexport interface ListOrderState {\r\n  orderKey: string\r\n  orderDir: 'asc' | 'desc'\r\n}\r\n\r\nexport const TriggerButton = styled(Button)<{ hasItem: boolean }>`\r\n  ${({ hasItem }) =>\r\n    hasItem &&\r\n    `  \r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    padding-right: 8px;\r\n  `}\r\n`\r\n\r\nexport const CloseButton = styled(IconButton)`\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\r\n\r\nconst GridItem = styled(Flex)`\r\n  align-items: center;\r\n`\r\n\r\nconst LoadingRow: React.FC = () => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <tr>\r\n      <Td>\r\n        <GridItem>\r\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\r\n        </GridItem>\r\n      </Td>\r\n      <Td>\r\n        <GridItem justifyContent=\"flex-end\">\r\n          <Skeleton height={[66, null, 24]} width={64} />\r\n        </GridItem>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={42} width={64} />\r\n            </GridItem>\r\n          </Td>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={48} width={124} />\r\n            </GridItem>\r\n          </Td>\r\n        </>\r\n      )}\r\n      <Td>\r\n        <GridItem justifyContent=\"center\">\r\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\r\n        </GridItem>\r\n      </Td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst TableLoader: React.FC = () => (\r\n  <>\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n  </>\r\n)\r\n\r\nexport default TableLoader\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\r\n\r\ninterface ActivityEventTextProps extends TextProps {\r\n  marketEvent: MarketEvent\r\n}\r\n\r\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const events = {\r\n    [MarketEvent.NEW]: {\r\n      text: t('Listed'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.CANCEL]: {\r\n      text: t('Delisted'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.MODIFY]: {\r\n      text: t('Modified'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.BUY]: {\r\n      text: t('Bought'),\r\n      color: 'success',\r\n    },\r\n    [MarketEvent.SELL]: {\r\n      text: t('Sold'),\r\n      color: 'failure',\r\n    },\r\n  }\r\n\r\n  return (\r\n    <Text {...props} color={events[marketEvent].color}>\r\n      {events[marketEvent].text}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default ActivityEventText\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, Link, BinanceIcon, Box } from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { LightGreyCard } from 'components/Card'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { getBscScanLink } from 'utils'\r\nimport ActivityEventText from './ActivityEventText'\r\nimport NFTMedia from '../NFTMedia'\r\n\r\ninterface MobileModalProps extends InjectedModalProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  localeTimestamp: string\r\n  isUserActivity?: boolean\r\n}\r\n\r\nconst MobileModal: React.FC<MobileModalProps> = ({\r\n  nft,\r\n  activity,\r\n  bnbBusdPrice,\r\n  localeTimestamp,\r\n  onDismiss,\r\n  isUserActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\r\n\r\n  return (\r\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\r\n          <Box width={68} mr=\"16px\">\r\n            <NFTMedia nft={nft} width={68} height={68} />\r\n          </Box>\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            <Text bold textAlign=\"right\">\r\n              {nft.name}\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <LightGreyCard p=\"16px\">\r\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\r\n            {priceAsFloat ? (\r\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\r\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n                <Text mr=\"4px\" bold>\r\n                  {priceAsFloat}\r\n                </Text>\r\n                <Text color=\"textSubtle\">\r\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })})`}\r\n                </Text>\r\n              </Flex>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </Flex>\r\n          {isUserActivity ? (\r\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('From/To')}\r\n              </Text>\r\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\r\n            </Flex>\r\n          ) : (\r\n            <>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('From')}\r\n                </Text>\r\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\r\n              </Flex>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('To')}\r\n                </Text>\r\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text fontSize=\"14px\" color=\"textSubtle\">\r\n              {t('Date')}\r\n            </Text>\r\n            <Text>{localeTimestamp}</Text>\r\n          </Flex>\r\n        </LightGreyCard>\r\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\r\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            {t('View on BscScan')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default MobileModal\r\n","import React from 'react'\r\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\n\r\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n      {price ? (\r\n        <>\r\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\r\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n            <Text maxWidth=\"80px\" bold>\r\n              {price.toLocaleString(undefined, {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 5,\r\n              })}\r\n            </Text>\r\n          </Flex>\r\n          {priceInUsd ? (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2,\r\n              })})`}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"18px\" width=\"42px\" />\r\n          )}\r\n        </>\r\n      ) : (\r\n        '-'\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ActivityPrice\r\n","import React from 'react'\r\nimport { Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal, Box } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\r\nimport MobileModal from './MobileModal'\r\nimport ActivityPrice from './ActivityPrice'\r\nimport ActivityEventText from './ActivityEventText'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\r\nimport NFTMedia from '../NFTMedia'\r\n\r\ninterface ActivityRowProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  isUserActivity?: boolean\r\n  isNftActivity?: boolean\r\n}\r\n\r\nconst ActivityRow: React.FC<ActivityRowProps> = ({\r\n  activity,\r\n  bnbBusdPrice,\r\n  nft,\r\n  isUserActivity = false,\r\n  isNftActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\r\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n  })\r\n  const [onPresentMobileModal] = useModal(\r\n    <MobileModal\r\n      nft={nft}\r\n      activity={activity}\r\n      localeTimestamp={localeTimestamp}\r\n      bnbBusdPrice={bnbBusdPrice}\r\n      isUserActivity={isUserActivity}\r\n    />,\r\n  )\r\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\r\n  const tokenId =\r\n    nft && isPBCollection\r\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\r\n      : nft\r\n      ? nft.tokenId\r\n      : null\r\n\r\n  return (\r\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })} data-test=\"nft-activity-row\">\r\n      {!isNftActivity ? (\r\n        <Td\r\n          {...((isXs || isSm) && {\r\n            onClick: (event) => {\r\n              event.stopPropagation()\r\n            },\r\n          })}\r\n        >\r\n          <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\r\n            <Box width={64} height={64} mr={[0, null, '16px']} mb={['8px', null, 0]}>\r\n              <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\r\n                <NFTMedia nft={nft} width={64} height={64} />\r\n              </RouterLink>\r\n            </Box>\r\n            <Flex flexDirection=\"column\">\r\n              <Text\r\n                as={RouterLink}\r\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}` : ``}\r\n                textAlign={['center', null, 'left']}\r\n                color=\"textSubtle\"\r\n                fontSize=\"14px\"\r\n              >\r\n                {nft?.collectionName}\r\n              </Text>\r\n              <Text\r\n                as={RouterLink}\r\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}\r\n                textAlign={['center', null, 'left']}\r\n                bold\r\n              >\r\n                {nft?.name}\r\n              </Text>\r\n            </Flex>\r\n          </Flex>\r\n        </Td>\r\n      ) : null}\r\n      <Td>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <ActivityEventText marketEvent={activity.marketEvent} />\r\n        </Flex>\r\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\r\n          </Td>\r\n          {isUserActivity ? (\r\n            <Td>\r\n              <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\r\n              </Flex>\r\n            </Td>\r\n          ) : (\r\n            <>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      <Td>\r\n        <Flex justifyContent=\"center\">\r\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\r\n            {localeTimestamp}\r\n          </Text>\r\n        </Flex>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <Td>\r\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Td>\r\n      )}\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ActivityRow\r\n","import { Activity, NftToken, TokenIdWithCollectionAddress } from 'state/nftMarket/types'\r\nimport { getNftsFromCollectionApi, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\r\nimport { uniqBy } from 'lodash'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\n\r\nexport const fetchActivityNftMetadata = async (activities: Activity[]): Promise<NftToken[]> => {\r\n  const hasPBCollections = activities.some(\r\n    (activity) => activity.nft.collection.id.toLowerCase() === pancakeBunniesAddress.toLowerCase(),\r\n  )\r\n  let bunniesMetadata\r\n  if (hasPBCollections) {\r\n    bunniesMetadata = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n  }\r\n\r\n  const pbNfts = activities\r\n    .filter((activity) => activity.nft.collection.id.toLowerCase() === pancakeBunniesAddress.toLowerCase())\r\n    .map((activity) => {\r\n      const { name: collectionName } = bunniesMetadata.data[activity.nft.otherId].collection\r\n      return {\r\n        ...bunniesMetadata.data[activity.nft.otherId],\r\n        tokenId: activity.nft.tokenId,\r\n        attributes: [{ traitType: 'bunnyId', value: activity.nft.otherId }],\r\n        collectionAddress: activity.nft.collection.id,\r\n        collectionName,\r\n      }\r\n    })\r\n\r\n  const activityNftTokenIds = uniqBy(\r\n    activities\r\n      .filter((activity) => activity.nft.collection.id.toLowerCase() !== pancakeBunniesAddress.toLowerCase())\r\n      .map((activity): TokenIdWithCollectionAddress => {\r\n        return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\r\n      }),\r\n    'tokenId',\r\n  )\r\n  const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\r\n  return nfts.concat(pbNfts)\r\n}\r\n","import { ethers } from 'ethers'\r\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\r\n\r\nexport const sortActivity = ({\r\n  askOrders = [],\r\n  transactions = [],\r\n}: {\r\n  askOrders?: AskOrder[]\r\n  transactions?: Transaction[]\r\n}): Activity[] => {\r\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\r\n    switch (orderType) {\r\n      case AskOrderType.CANCEL:\r\n        return MarketEvent.CANCEL\r\n      case AskOrderType.MODIFY:\r\n        return MarketEvent.MODIFY\r\n      case AskOrderType.NEW:\r\n        return MarketEvent.NEW\r\n      default:\r\n        return MarketEvent.MODIFY\r\n    }\r\n  }\r\n\r\n  const transformTransactions = (transactionsHistory: Transaction[]): Activity[] => {\r\n    const transformedTransactions = transactionsHistory.map((transactionHistory) => {\r\n      const marketEvent = MarketEvent.SELL\r\n      const { timestamp, nft } = transactionHistory\r\n      const price = transactionHistory.askPrice\r\n      const tx = transactionHistory.id\r\n      const buyer = transactionHistory.buyer.id\r\n      const seller = transactionHistory.seller.id\r\n      return { marketEvent, price, timestamp, nft, tx, buyer, seller }\r\n    })\r\n\r\n    return transformedTransactions\r\n  }\r\n\r\n  const transformAskOrders = (askOrdersHistory: AskOrder[]): Activity[] => {\r\n    const transformedAskOrders = askOrdersHistory.map((askOrderHistory) => {\r\n      const marketEvent = getAskOrderEvent(askOrderHistory.orderType)\r\n      const price = askOrderHistory.askPrice\r\n      const { timestamp, nft } = askOrderHistory\r\n      const tx = askOrderHistory.id\r\n      const seller = askOrderHistory?.seller.id\r\n      return { marketEvent, price, timestamp, nft, tx, seller }\r\n    })\r\n\r\n    return transformedAskOrders\r\n  }\r\n\r\n  const allActivity = [...transformAskOrders(askOrders), ...transformTransactions(transactions)]\r\n  if (allActivity.length > 0) {\r\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\r\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\r\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\r\n      return timestamp2.sub(timestamp1).toNumber()\r\n    })\r\n\r\n    return sortedByMostRecent\r\n  }\r\n  return []\r\n}\r\n"],"sourceRoot":""}