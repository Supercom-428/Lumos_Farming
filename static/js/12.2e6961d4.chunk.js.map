{"version":3,"sources":["views/Nft/market/Collection/Items/PancakeBunniesCollectionNfts.tsx","components/ScrollToTopButton/index.tsx","views/Nft/market/components/Filters/ListTraitFilter/styles.tsx","views/Nft/market/components/Filters/ListTraitFilter/index.tsx","views/Nft/market/Collection/Items/ClearAllButton.tsx","views/Nft/market/Collection/Items/SortSelect.tsx","views/Nft/market/Collection/Items/Filters.tsx","views/Nft/market/Collection/config.ts","views/Nft/market/Collection/Items/CollectionNfts.tsx","views/Nft/market/Collection/Items/FilteredCollectionNfts.tsx","views/Nft/market/Collection/Items/CollectionWrapper.tsx","views/Nft/market/Collection/Items/index.tsx","views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/Filters/ListFilter/styles.tsx","../node_modules/lodash/_baseFindIndex.js","../node_modules/lodash/uniqBy.js","../node_modules/lodash/_arrayIncludes.js","../node_modules/lodash/_arrayIncludesWith.js","../node_modules/lodash/_baseUniq.js","../node_modules/lodash/_baseIndexOf.js","../node_modules/lodash/_baseIsNaN.js","../node_modules/lodash/_strictIndexOf.js","../node_modules/lodash/_createSet.js","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts"],"names":["PancakeBunniesCollectionNfts","collection","sortBy","address","allPancakeBunnyNfts","useAllPancakeBunnyNfts","sortedNfts","orderBy","nft","meta","Number","length","gridGap","gridTemplateColumns","alignItems","map","tokenId","collectionName","GridPlaceholder","FixedContainer","styled","div","ScrollToTopButton","useState","visible","setVisible","t","useTranslation","toggleVisible","scrolled","document","documentElement","scrollTop","useEffect","window","addEventListener","removeEventListener","style","display","variant","endIcon","color","onClick","scrollTo","top","behavior","TraitItemRow","item","isSelected","onSelect","px","py","image","src","height","width","mr","flex","label","undefined","count","formatNumber","name","scale","checked","value","onChange","noop","ml","TriggerButton","Button","hasItem","CloseButton","IconButton","ListTraitFilter","title","traitType","items","collectionAddress","isOpen","setIsOpen","query","setQuery","orderKey","orderDir","orderState","setOrderState","wrapperRef","useRef","menuRef","nftFilters","useGetNftFilters","nftFilterState","useGetNftFilterLoadingState","dispatch","useAppDispatch","traitFilter","isTraitSelected","filteredItems","filter","toLowerCase","indexOf","toggleSort","newOrderKey","prevOrderDir","handleClickOutside","target","current","contains","mb","ref","component","disabled","FetchStatus","Fetching","options","placement","maxWidth","p","startIcon","placeholder","evt","fontSize","fontWeight","textTransform","overflowY","filteredItem","isItemSelected","attr","filterNftsFromCollection","handleItemSelect","justifyContent","textAlign","newFilters","ClearAllButton","props","removeAllFilters","SortSelect","selectedOrder","useGetNftOrdering","sortByItems","field","direction","defaultOptionIndex","findIndex","option","Select","onOptionChange","newOption","setOrdering","GridContainer","Grid","theme","mediaQueries","sm","md","lg","xxl","FilterByTitle","Text","FilterByControls","Box","SortByTitle","SortByControls","ScrollableFlexContainer","Flex","Filters","data","useGetCollectionDistribution","showOnlyNftsOnSale","useGetNftShowOnlyOnSale","activeButtonIndex","setActiveButtonIndex","attrsByType","attributes","reduce","accum","uniqueTraitTypes","Object","keys","bold","activeIndex","onItemClick","newIndex","setShowOnlyOnSale","showOnlyOnSale","capitalize","isEmpty","REQUEST_SIZE","CollectionNfts","totalSupply","numberTokensListed","page","setPage","skip","setSkip","nfts","setNfts","isFetchingFilteredNfts","setIsFetchingFilteredNfts","collectionNfts","useNftsFromCollection","nftFilterLoadingState","orderField","orderDirection","isFetching","fetchApiData","marketData","a","apiRequestPromises","marketNft","getNftApi","Promise","all","apiResponses","responsesWithMarketData","apiNft","i","prevState","combinedNfts","uniqBy","fetchMarketData","getNftsMarketData","isTradable","subgraphRes","fetchNftsFromCollections","size","nftsToShow","isNotLastPage","resultsAmount","currentAskPriceAsNumber","parseFloat","currentAskPrice","mt","prevPage","spin","FilteredCollectionNfts","numToShow","setNumToShow","orderedNfts","Infinity","tokenIdNumber","isFinite","parseInt","filteredNfts","slice","prevNumToShow","flexDirection","CollectionWrapper","Container","createPortal","body","Items","useParams","setSortBy","useGetCollection","isPBCollection","pancakeBunniesAddress","fetchCollection","Header","minWidth","GridPlaceholderItem","numItems","times","itemKey","StyledItemRow","ItemImage","Image","SearchWrapper","colors","dropdown","FilterButton","module","exports","array","predicate","fromIndex","fromRight","index","baseIteratee","require","baseUniq","iteratee","baseIndexOf","comparator","SetCache","arrayIncludes","arrayIncludesWith","cacheHas","createSet","setToArray","includes","isCommon","result","seen","set","outer","computed","seenIndex","push","baseFindIndex","baseIsNaN","strictIndexOf","Set","values","setAllPancakeBunnyNfts","getNftsFromCollectionApi","bunnyIds","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","bunnyId","description","displayType","updatedAt","fetchPancakeBunnies"],"mappings":"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","file":"static/js/12.2e6961d4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Grid } from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport useAllPancakeBunnyNfts from '../../hooks/useAllPancakeBunnyNfts'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\n\r\ninterface CollectionNftsProps {\r\n  collection: Collection\r\n  sortBy?: string\r\n}\r\n\r\nconst PancakeBunniesCollectionNfts: React.FC<CollectionNftsProps> = ({ collection, sortBy = 'updatedAt' }) => {\r\n  const { address } = collection\r\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(address)\r\n\r\n  const sortedNfts = allPancakeBunnyNfts\r\n    ? orderBy(allPancakeBunnyNfts, (nft) => (nft.meta[sortBy] ? Number(nft?.meta[sortBy]) : 0), [\r\n        sortBy === 'currentAskPrice' ? 'asc' : 'desc',\r\n      ])\r\n    : []\r\n\r\n  if (!sortedNfts.length) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        gridGap=\"16px\"\r\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n        alignItems=\"start\"\r\n      >\r\n        {sortedNfts.map((nft) => {\r\n          return <CollectibleLinkCard key={`${nft.tokenId}-${nft.collectionName}`} nft={nft} />\r\n        })}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PancakeBunniesCollectionNfts\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst FixedContainer = styled.div`\r\n  position: fixed;\r\n  right: 5%;\r\n  bottom: 110px;\r\n`\r\n\r\nconst ScrollToTopButton = () => {\r\n  const [visible, setVisible] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleVisible = () => {\r\n    const scrolled = document.documentElement.scrollTop\r\n    if (scrolled > 700) {\r\n      setVisible(true)\r\n    } else if (scrolled <= 700) {\r\n      setVisible(false)\r\n    }\r\n  }\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 400,\r\n      behavior: 'auto',\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', toggleVisible)\r\n\r\n    return () => window.removeEventListener('scroll', toggleVisible)\r\n  }, [])\r\n\r\n  return (\r\n    <FixedContainer style={{ display: visible ? 'inline' : 'none' }}>\r\n      <Button variant=\"subtle\" endIcon={<ChevronUpIcon color=\"invertedContrast\" />} onClick={scrollToTop}>\r\n        {t('To Top')}\r\n      </Button>\r\n    </FixedContainer>\r\n  )\r\n}\r\n\r\nexport default ScrollToTopButton\r\n","import React from 'react'\r\nimport { Radio, Text } from '@pancakeswap/uikit'\r\nimport noop from 'lodash/noop'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { ItemImage, StyledItemRow } from '../ListFilter/styles'\r\nimport { Item } from './types'\r\n\r\ninterface TraitItemRowProps {\r\n  item: Item\r\n  isSelected: boolean\r\n  onSelect: () => void\r\n}\r\n\r\nexport const TraitItemRow: React.FC<TraitItemRowProps> = ({ item, isSelected, onSelect }) => (\r\n  <StyledItemRow alignItems=\"center\" px=\"16px\" py=\"8px\" onClick={onSelect}>\r\n    {item.image && <ItemImage src={item.image} height={48} width={48} mr=\"16px\" />}\r\n    <Text style={{ flex: 1 }}>{item.label}</Text>\r\n    {item.count !== undefined && (\r\n      <Text color=\"textSubtle\" px=\"8px\">\r\n        {formatNumber(item.count, 0, 0)}\r\n      </Text>\r\n    )}\r\n    <Radio name=\"item-select\" scale=\"sm\" checked={isSelected} value={item.label} onChange={noop} ml=\"24px\" />\r\n  </StyledItemRow>\r\n)\r\n","import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\r\nimport {\r\n  ArrowDownIcon,\r\n  ArrowUpIcon,\r\n  Box,\r\n  Button,\r\n  Text,\r\n  Flex,\r\n  IconButton,\r\n  InlineMenu,\r\n  Input,\r\n  InputGroup,\r\n  SearchIcon,\r\n  CloseIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetNftFilterLoadingState, useGetNftFilters } from 'state/nftMarket/hooks'\r\nimport { filterNftsFromCollection } from 'state/nftMarket/reducer'\r\nimport styled from 'styled-components'\r\nimport { Item } from './types'\r\nimport { FilterButton, ListOrderState, SearchWrapper } from '../ListFilter/styles'\r\nimport { TraitItemRow } from './styles'\r\n\r\ninterface ListTraitFilterProps {\r\n  title?: string\r\n  traitType: string\r\n  items: Item[]\r\n  collectionAddress: string\r\n}\r\n\r\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\r\n  ${({ hasItem }) =>\r\n    hasItem &&\r\n    `\r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    padding-right: 8px;\r\n  `}\r\n`\r\n\r\nconst CloseButton = styled(IconButton)`\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n`\r\n\r\nexport const ListTraitFilter: React.FC<ListTraitFilterProps> = ({ title, traitType, items, collectionAddress }) => {\r\n  const { t } = useTranslation()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [query, setQuery] = useState('')\r\n  const [orderState, setOrderState] = useState<ListOrderState>({ orderKey: 'count', orderDir: 'asc' })\r\n  const wrapperRef = useRef(null)\r\n  const menuRef = useRef(null)\r\n  const nftFilters = useGetNftFilters(collectionAddress)\r\n  const nftFilterState = useGetNftFilterLoadingState(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { orderKey, orderDir } = orderState\r\n\r\n  const traitFilter = nftFilters[traitType]\r\n  const isTraitSelected = !!traitFilter\r\n\r\n  const filteredItems =\r\n    query && query.length > 1\r\n      ? items.filter((item) => item.label.toLowerCase().indexOf(query.toLowerCase()) !== -1)\r\n      : items\r\n\r\n  const handleClearItem = () => {\r\n    const newFilters = { ...nftFilters }\r\n\r\n    delete newFilters[traitType]\r\n\r\n    dispatch(\r\n      filterNftsFromCollection({\r\n        collectionAddress,\r\n        nftFilters: newFilters,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const handleMenuClick = () => setIsOpen(!isOpen)\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = evt.target\r\n    setQuery(value)\r\n  }\r\n\r\n  const handleItemSelect = ({ attr }: Item) => {\r\n    dispatch(\r\n      filterNftsFromCollection({\r\n        collectionAddress,\r\n        nftFilters: { ...nftFilters, [traitType]: attr },\r\n      }),\r\n    )\r\n  }\r\n\r\n  const toggleSort = (newOrderKey: string) => () => {\r\n    setOrderState((prevOrderDir) => {\r\n      if (prevOrderDir.orderKey !== newOrderKey) {\r\n        return {\r\n          orderKey: newOrderKey,\r\n          orderDir: 'asc',\r\n        }\r\n      }\r\n\r\n      return {\r\n        orderKey: newOrderKey,\r\n        orderDir: prevOrderDir.orderDir === 'asc' ? 'desc' : 'asc',\r\n      }\r\n    })\r\n  }\r\n\r\n  // @TODO Fix this in the Toolkit\r\n  // This is a fix to ensure the \"isOpen\" value is aligned with the menus's (to avoid a double click)\r\n  useEffect(() => {\r\n    const handleClickOutside = ({ target }: Event) => {\r\n      if (\r\n        wrapperRef.current &&\r\n        menuRef.current &&\r\n        !menuRef.current.contains(target) &&\r\n        !wrapperRef.current.contains(target)\r\n      ) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [setIsOpen, wrapperRef, menuRef])\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\r\n      <Box ref={wrapperRef}>\r\n        <InlineMenu\r\n          component={\r\n            <TriggerButton\r\n              onClick={handleMenuClick}\r\n              variant={isTraitSelected ? 'subtle' : 'light'}\r\n              scale=\"sm\"\r\n              disabled={nftFilterState === FetchStatus.Fetching}\r\n              hasItem={isTraitSelected}\r\n            >\r\n              {title}\r\n            </TriggerButton>\r\n          }\r\n          isOpen={isOpen}\r\n          options={{ placement: 'bottom' }}\r\n        >\r\n          <Box maxWidth=\"375px\" ref={menuRef}>\r\n            <SearchWrapper alignItems=\"center\" p=\"16px\">\r\n              <InputGroup startIcon={<SearchIcon color=\"textSubtle\" />}>\r\n                <Input name=\"query\" placeholder={t('Search')} onChange={handleChange} value={query} />\r\n              </InputGroup>\r\n            </SearchWrapper>\r\n            <Flex alignItems=\"center\" p=\"16px\">\r\n              <FilterButton onClick={toggleSort('label')} style={{ flex: 1 }}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Name')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'label' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'label' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n              <FilterButton onClick={toggleSort('count')}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Count')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'count' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'count' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n            </Flex>\r\n            <Box height=\"240px\" overflowY=\"auto\">\r\n              {filteredItems.length > 0 ? (\r\n                orderBy(filteredItems, orderKey, orderDir).map((filteredItem) => {\r\n                  const handleSelect = () => handleItemSelect(filteredItem)\r\n                  const isItemSelected = traitFilter ? traitFilter.value === filteredItem.attr.value : false\r\n\r\n                  return (\r\n                    <TraitItemRow\r\n                      key={filteredItem.label}\r\n                      item={filteredItem}\r\n                      isSelected={isItemSelected}\r\n                      onSelect={handleSelect}\r\n                    />\r\n                  )\r\n                })\r\n              ) : (\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" height=\"230px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    {t('No results found')}\r\n                  </Text>\r\n                </Flex>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </InlineMenu>\r\n      </Box>\r\n      {isTraitSelected && (\r\n        <CloseButton\r\n          variant={isTraitSelected ? 'subtle' : 'light'}\r\n          scale=\"sm\"\r\n          onClick={handleClearItem}\r\n          disabled={nftFilterState === FetchStatus.Fetching}\r\n        >\r\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\r\n        </CloseButton>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeAllFilters } from 'state/nftMarket/reducer'\r\nimport { useGetNftFilterLoadingState } from 'state/nftMarket/hooks'\r\nimport { FetchStatus } from 'config/constants/types'\r\n\r\ninterface ClearAllButtonProps extends ButtonProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const nftFilterState = useGetNftFilterLoadingState(collectionAddress)\r\n\r\n  const clearAll = () => {\r\n    dispatch(removeAllFilters(collectionAddress))\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      key=\"clear-all\"\r\n      variant=\"text\"\r\n      scale=\"sm\"\r\n      onClick={clearAll}\r\n      disabled={nftFilterState === FetchStatus.Fetching}\r\n      {...props}\r\n    >\r\n      {t('Clear')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClearAllButton\r\n","import React from 'react'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setOrdering } from 'state/nftMarket/reducer'\r\nimport { useGetNftOrdering } from 'state/nftMarket/hooks'\r\n\r\nconst SortSelect: React.FC<{ collectionAddress: string }> = ({ collectionAddress }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const selectedOrder = useGetNftOrdering(collectionAddress)\r\n  const handleChange = (newOption: OptionProps) => {\r\n    const { field, direction } = newOption.value\r\n    dispatch(setOrdering({ collection: collectionAddress, field, direction }))\r\n  }\r\n\r\n  const sortByItems = [\r\n    { label: t('Recently listed'), value: { field: 'updatedAt', direction: 'desc' } },\r\n    { label: t('Lowest price'), value: { field: 'currentAskPrice', direction: 'asc' } },\r\n    { label: t('Highest price'), value: { field: 'currentAskPrice', direction: 'desc' } },\r\n    { label: t('Token ID'), value: { field: 'tokenId', direction: 'asc' } },\r\n  ]\r\n\r\n  const defaultOptionIndex = sortByItems.findIndex(\r\n    (option) => option.value.field === selectedOrder.field && option.value.direction === selectedOrder.direction,\r\n  )\r\n\r\n  return (\r\n    <Select\r\n      options={sortByItems}\r\n      onOptionChange={handleChange}\r\n      defaultOptionIndex={defaultOptionIndex !== -1 ? defaultOptionIndex : undefined}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SortSelect\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, ButtonMenu, ButtonMenuItem, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport capitalize from 'lodash/capitalize'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useGetNftFilters, useGetNftShowOnlyOnSale } from 'state/nftMarket/hooks'\r\nimport { Collection, NftAttribute } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Item, ListTraitFilter } from 'views/Nft/market/components/Filters'\r\nimport { useAppDispatch } from 'state'\r\nimport { setShowOnlyOnSale } from 'state/nftMarket/reducer'\r\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\r\nimport ClearAllButton from './ClearAllButton'\r\nimport SortSelect from './SortSelect'\r\n\r\ninterface FiltersProps {\r\n  collection: Collection\r\n}\r\n\r\nconst GridContainer = styled(Grid)`\r\n  margin-bottom: 16px;\r\n  padding: 0 16px;\r\n  grid-gap: 8px 16px;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-areas:\r\n    'filterByTitle .'\r\n    'attributeFilters attributeFilters'\r\n    '. sortByTitle'\r\n    'filterByControls sortByControls';\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . .'\r\n      'attributeFilters attributeFilters attributeFilters'\r\n      '. . sortByTitle'\r\n      'filterByControls . sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 2fr 5fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . .'\r\n      'filterByControls attributeFilters attributeFilters'\r\n      '. . sortByTitle'\r\n      '. . sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    grid-template-columns: 1.3fr 5fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . sortByTitle'\r\n      'filterByControls attributeFilters sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.xxl} {\r\n    grid-template-columns: 1fr 5fr 1fr;\r\n  }\r\n`\r\n\r\nconst FilterByTitle = styled(Text)`\r\n  grid-area: filterByTitle;\r\n`\r\n\r\nconst FilterByControls = styled(Box)`\r\n  grid-area: filterByControls;\r\n`\r\n\r\nconst SortByTitle = styled(Text)`\r\n  grid-area: sortByTitle;\r\n`\r\n\r\nconst SortByControls = styled(Box)`\r\n  grid-area: sortByControls;\r\n`\r\n\r\nconst ScrollableFlexContainer = styled(Flex)`\r\n  grid-area: attributeFilters;\r\n  align-items: center;\r\n  flex: 1;\r\n  flex-wrap: nowrap;\r\n  overflow-x: auto;\r\n  -webkit-overflow-scrolling: touch;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-wrap: wrap;\r\n    overflow-x: revert;\r\n  }\r\n`\r\n\r\nconst Filters: React.FC<FiltersProps> = ({ collection }) => {\r\n  const { address } = collection\r\n  const dispatch = useAppDispatch()\r\n  const { data } = useGetCollectionDistribution(address)\r\n  const { t } = useTranslation()\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(address)\r\n  const [activeButtonIndex, setActiveButtonIndex] = useState(showOnlyNftsOnSale ? 1 : 0)\r\n\r\n  const onActiveButtonChange = (newIndex: number) => {\r\n    dispatch(setShowOnlyOnSale({ collection: address, showOnlyOnSale: newIndex === 1 }))\r\n    setActiveButtonIndex(newIndex)\r\n  }\r\n\r\n  const nftFilters = useGetNftFilters(address)\r\n  const attrsByType: Record<string, NftAttribute[]> = collection?.attributes?.reduce(\r\n    (accum, attr) => ({\r\n      ...accum,\r\n      [attr.traitType]: accum[attr.traitType] ? [...accum[attr.traitType], attr] : [attr],\r\n    }),\r\n    {},\r\n  )\r\n  const uniqueTraitTypes = attrsByType ? Object.keys(attrsByType) : []\r\n\r\n  return (\r\n    <GridContainer>\r\n      <FilterByTitle textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\r\n        {t('Filter by')}\r\n      </FilterByTitle>\r\n      <FilterByControls>\r\n        <ButtonMenu scale=\"sm\" activeIndex={activeButtonIndex} onItemClick={onActiveButtonChange}>\r\n          <ButtonMenuItem>{t('All')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('On Sale')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </FilterByControls>\r\n      <SortByTitle fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\r\n        {t('Sort By')}\r\n      </SortByTitle>\r\n      <SortByControls>\r\n        <SortSelect collectionAddress={address} />\r\n      </SortByControls>\r\n      <ScrollableFlexContainer>\r\n        {uniqueTraitTypes.map((traitType) => {\r\n          const attrs = attrsByType[traitType]\r\n          const items: Item[] = attrs.map((attr) => ({\r\n            label: capitalize(attr.value as string),\r\n            count: data && data[traitType] ? data[traitType][attr.value] : undefined,\r\n            attr,\r\n          }))\r\n\r\n          return (\r\n            <ListTraitFilter\r\n              key={traitType}\r\n              title={capitalize(traitType)}\r\n              traitType={traitType}\r\n              items={items}\r\n              collectionAddress={address}\r\n            />\r\n          )\r\n        })}\r\n        {!isEmpty(nftFilters) && <ClearAllButton collectionAddress={address} mb=\"4px\" />}\r\n      </ScrollableFlexContainer>\r\n    </GridContainer>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","export const REQUEST_SIZE = 100\r\n","import React, { useEffect, useState } from 'react'\r\nimport uniqBy from 'lodash/uniqBy'\r\nimport { AutoRenewIcon, Button, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetNftFilterLoadingState,\r\n  useGetNftOrdering,\r\n  useGetNftShowOnlyOnSale,\r\n  useNftsFromCollection,\r\n} from 'state/nftMarket/hooks'\r\nimport { Collection, NftToken, TokenMarketData } from 'state/nftMarket/types'\r\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\r\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport { REQUEST_SIZE } from '../config'\r\n\r\ninterface CollectionNftsProps {\r\n  collection: Collection\r\n}\r\n\r\nconst CollectionNfts: React.FC<CollectionNftsProps> = ({ collection }) => {\r\n  const { totalSupply, numberTokensListed, address: collectionAddress } = collection\r\n  const [page, setPage] = useState(1)\r\n  const [skip, setSkip] = useState(0)\r\n  const [nfts, setNfts] = useState<NftToken[]>([])\r\n  const [isFetchingFilteredNfts, setIsFetchingFilteredNfts] = useState(false)\r\n  const { t } = useTranslation()\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n  const nftFilterLoadingState = useGetNftFilterLoadingState(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(collectionAddress)\r\n  const { field: orderField, direction: orderDirection } = useGetNftOrdering(collectionAddress)\r\n  const isFetching = orderField === 'tokenId' ? nftFilterLoadingState === FetchStatus.Fetching : isFetchingFilteredNfts\r\n\r\n  const handleLoadMore = () => {\r\n    if (orderField === 'tokenId') {\r\n      setPage((prevPage) => prevPage + 1)\r\n    }\r\n    setSkip(skip + REQUEST_SIZE)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (orderField === 'tokenId') {\r\n      setPage(1)\r\n    }\r\n  }, [orderField])\r\n\r\n  useEffect(() => {\r\n    setNfts([])\r\n    setSkip(0)\r\n  }, [orderField, orderDirection])\r\n\r\n  useEffect(() => {\r\n    const fetchApiData = async (marketData: TokenMarketData[]) => {\r\n      const apiRequestPromises = marketData.map((marketNft) => getNftApi(collectionAddress, marketNft.tokenId))\r\n      const apiResponses = await Promise.all(apiRequestPromises)\r\n      const responsesWithMarketData = apiResponses.map((apiNft, i) => {\r\n        return {\r\n          ...apiNft,\r\n          collectionAddress,\r\n          collectionName: apiNft.collection.name,\r\n          marketData: marketData[i],\r\n        }\r\n      })\r\n      setIsFetchingFilteredNfts(false)\r\n      setNfts((prevState) => {\r\n        const combinedNfts = [...prevState, ...responsesWithMarketData]\r\n        return uniqBy(combinedNfts, 'tokenId')\r\n      })\r\n    }\r\n\r\n    const fetchMarketData = async () => {\r\n      const subgraphRes = await getNftsMarketData(\r\n        { collection: collectionAddress.toLowerCase(), isTradable: true },\r\n        REQUEST_SIZE,\r\n        orderField,\r\n        orderDirection,\r\n        skip,\r\n      )\r\n      fetchApiData(subgraphRes)\r\n    }\r\n\r\n    if (orderField !== 'tokenId') {\r\n      // Query by tokenId is handled in useEffect below since we in this case\r\n      // we need to show all NFTs, even those that never been on sale (i.e. they are not in subgraph)\r\n      setIsFetchingFilteredNfts(true)\r\n      fetchMarketData()\r\n    }\r\n  }, [orderField, orderDirection, skip, collectionAddress])\r\n\r\n  useEffect(() => {\r\n    if (orderField === 'tokenId') {\r\n      dispatch(\r\n        fetchNftsFromCollections({\r\n          collectionAddress,\r\n          page,\r\n          size: REQUEST_SIZE,\r\n        }),\r\n      )\r\n    }\r\n  }, [page, collectionAddress, dispatch, orderField])\r\n\r\n  const nftsToShow =\r\n    orderField === 'tokenId'\r\n      ? collectionNfts?.filter((nft) => {\r\n          if (showOnlyNftsOnSale) {\r\n            return nft.marketData?.isTradable\r\n          }\r\n          return true\r\n        })\r\n      : nfts\r\n\r\n  if (!nftsToShow || nftsToShow?.length === 0) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  const isNotLastPage =\r\n    showOnlyNftsOnSale || orderField !== 'tokenId'\r\n      ? nftsToShow?.length < Number(numberTokensListed)\r\n      : nftsToShow?.length < Number(totalSupply)\r\n\r\n  const resultsAmount = showOnlyNftsOnSale || orderField !== 'tokenId' ? numberTokensListed : totalSupply\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <Text bold>\r\n          {resultsAmount} {t('Results')}\r\n        </Text>\r\n      </Flex>\r\n      <Grid\r\n        gridGap=\"16px\"\r\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n        alignItems=\"start\"\r\n      >\r\n        {nftsToShow.map((nft) => {\r\n          const currentAskPriceAsNumber = nft.marketData && parseFloat(nft.marketData.currentAskPrice)\r\n\r\n          return (\r\n            <CollectibleLinkCard\r\n              key={nft.tokenId}\r\n              nft={nft}\r\n              currentAskPrice={currentAskPriceAsNumber > 0 ? currentAskPriceAsNumber : undefined}\r\n            />\r\n          )\r\n        })}\r\n      </Grid>\r\n      <Flex mt=\"60px\" mb=\"12px\" justifyContent=\"center\">\r\n        {isNotLastPage && (\r\n          <Button\r\n            onClick={handleLoadMore}\r\n            scale=\"sm\"\r\n            endIcon={isFetching ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\r\n          >\r\n            {isFetching ? t('Loading') : t('Load more')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionNfts\r\n","import React, { useState } from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { BunnyPlaceholderIcon, Button, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport {\r\n  useGetNftFilterLoadingState,\r\n  useGetNftOrdering,\r\n  useGetNftShowOnlyOnSale,\r\n  useNftsFromCollection,\r\n} from 'state/nftMarket/hooks'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport { REQUEST_SIZE } from '../config'\r\n\r\ninterface FilteredCollectionNftsProps {\r\n  collection: Collection\r\n}\r\n\r\nconst FilteredCollectionNfts: React.FC<FilteredCollectionNftsProps> = ({ collection }) => {\r\n  const { address: collectionAddress } = collection\r\n  const [numToShow, setNumToShow] = useState(REQUEST_SIZE)\r\n  const { t } = useTranslation()\r\n  const selectedOrder = useGetNftOrdering(collectionAddress)\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(collectionAddress)\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n  const nftFilterLoadingState = useGetNftFilterLoadingState(collectionAddress)\r\n\r\n  const handleLoadMore = () => {\r\n    setNumToShow((prevNumToShow) => prevNumToShow + REQUEST_SIZE)\r\n  }\r\n\r\n  if (nftFilterLoadingState === FetchStatus.Fetching) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  const orderedNfts = collectionNfts\r\n    ? orderBy(\r\n        collectionNfts,\r\n        (nft) => {\r\n          if (selectedOrder.field === 'currentAskPrice') {\r\n            const currentAskPriceAsNumber = nft.marketData?.currentAskPrice\r\n              ? parseFloat(nft.marketData?.currentAskPrice)\r\n              : 0\r\n            if (currentAskPriceAsNumber > 0) {\r\n              return parseFloat(nft.marketData.currentAskPrice)\r\n            }\r\n            return selectedOrder.direction === 'asc' ? Infinity : -Infinity\r\n          }\r\n          if (selectedOrder.field === 'tokenId') {\r\n            const tokenIdNumber = Number(nft.tokenId)\r\n            return Number.isFinite(tokenIdNumber) ? tokenIdNumber : 0\r\n          }\r\n          // recently listed sorting\r\n          return nft.marketData ? parseInt(nft.marketData[selectedOrder.field], 10) : 0\r\n        },\r\n        selectedOrder.direction,\r\n      )\r\n    : []\r\n\r\n  const filteredNfts = showOnlyNftsOnSale ? orderedNfts.filter((nft) => nft.marketData?.isTradable) : orderedNfts\r\n\r\n  const nftsToShow = filteredNfts.slice(0, numToShow)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <Text bold>\r\n          {filteredNfts.length} {t('Results')}\r\n        </Text>\r\n      </Flex>\r\n      {nftsToShow.length > 0 ? (\r\n        <>\r\n          <Grid\r\n            gridGap=\"16px\"\r\n            gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n            alignItems=\"start\"\r\n          >\r\n            {nftsToShow.map((nft) => {\r\n              const currentAskPriceAsNumber = nft.marketData && parseFloat(nft.marketData.currentAskPrice)\r\n\r\n              return (\r\n                <CollectibleLinkCard\r\n                  key={nft.tokenId}\r\n                  nft={nft}\r\n                  currentAskPrice={currentAskPriceAsNumber > 0 ? currentAskPriceAsNumber : undefined}\r\n                />\r\n              )\r\n            })}\r\n          </Grid>\r\n          <Flex mt=\"60px\" mb=\"12px\" justifyContent=\"center\">\r\n            {collectionNfts.length > numToShow && (\r\n              <Button onClick={handleLoadMore} scale=\"sm\">\r\n                {t('Load more')}\r\n              </Button>\r\n            )}\r\n          </Flex>\r\n        </>\r\n      ) : (\r\n        <Flex alignItems=\"center\" py=\"48px\" flexDirection=\"column\">\r\n          <BunnyPlaceholderIcon width=\"96px\" mb=\"24px\" />\r\n          <Text fontWeight={600}>{t('No NFTs found')}</Text>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FilteredCollectionNfts\r\n","import React from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { useGetNftFilters } from 'state/nftMarket/hooks'\r\nimport Container from 'components/Layout/Container'\r\nimport ScrollButton from 'components/ScrollToTopButton'\r\nimport Filters from './Filters'\r\nimport CollectionNfts from './CollectionNfts'\r\nimport FilteredCollectionNfts from './FilteredCollectionNfts'\r\n\r\ninterface CollectionWrapperProps {\r\n  collection: Collection\r\n}\r\n\r\nconst CollectionWrapper: React.FC<CollectionWrapperProps> = ({ collection }) => {\r\n  const nftFilters = useGetNftFilters(collection.address)\r\n\r\n  return (\r\n    <Box py=\"32px\">\r\n      <Container px={[0, null, '24px']}>\r\n        <Filters collection={collection} />\r\n      </Container>\r\n      <Container>\r\n        {isEmpty(nftFilters) ? (\r\n          <CollectionNfts collection={collection} />\r\n        ) : (\r\n          <FilteredCollectionNfts collection={collection} />\r\n        )}\r\n      </Container>\r\n      {createPortal(<ScrollButton />, document.body)}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default CollectionWrapper\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchCollection } from 'state/nftMarket/reducer'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Container from 'components/Layout/Container'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport PancakeBunniesCollectionNfts from './PancakeBunniesCollectionNfts'\r\nimport Header from '../Header'\r\nimport CollectionWrapper from './CollectionWrapper'\r\n\r\nconst Items = () => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const [sortBy, setSortBy] = useState('updatedAt')\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const collection = useGetCollection(collectionAddress)\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  const { address } = collection || {}\r\n\r\n  const sortByItems = [\r\n    { label: t('Recently listed'), value: 'updatedAt' },\r\n    { label: t('Lowest price'), value: 'currentAskPrice' },\r\n  ]\r\n\r\n  const handleChange = (newOption: OptionProps) => {\r\n    setSortBy(newOption.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (address) {\r\n      dispatch(fetchCollection(address))\r\n    }\r\n  }, [address, dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Header collection={collection} />\r\n      {isPBCollection ? (\r\n        <Container mb=\"24px\">\r\n          <Flex alignItems=\"center\" justifyContent={['flex-start', null, null, 'flex-end']} mb=\"24px\">\r\n            <Box minWidth=\"165px\">\r\n              <Text fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\r\n                {t('Sort By')}\r\n              </Text>\r\n              <Select options={sortByItems} onOptionChange={handleChange} />\r\n            </Box>\r\n          </Flex>\r\n          <PancakeBunniesCollectionNfts collection={collection} sortBy={sortBy} />\r\n        </Container>\r\n      ) : (\r\n        <CollectionWrapper collection={collection} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Items\r\n","import React from 'react'\r\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\r\nimport times from 'lodash/times'\r\n\r\ninterface GridPlaceholderProps extends GridProps {\r\n  numItems?: number\r\n}\r\n\r\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\r\n  <Box {...props}>\r\n    <Skeleton height=\"258px\" mb=\"8px\" />\r\n    <Skeleton width=\"30%\" mb=\"4px\" />\r\n    <Skeleton width=\"45%\" mb=\"16px\" />\r\n    <Skeleton />\r\n  </Box>\r\n)\r\n\r\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\r\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\r\n    {times(numItems).map((itemKey) => (\r\n      <GridPlaceholderItem key={itemKey} />\r\n    ))}\r\n  </Grid>\r\n)\r\n\r\nexport default GridPlaceholder\r\n","import { Flex, Image, Button, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nexport const StyledItemRow = styled(Flex)`\r\n  cursor: pointer;\r\n  user-select: none;\r\n`\r\n\r\nexport const ItemImage = styled(Image)`\r\n  border-radius: 50%;\r\n`\r\n\r\nexport const SearchWrapper = styled(Flex)`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  border-radius: 24px 24px 0 0;\r\n`\r\n\r\nexport const FilterButton = styled(Flex)`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  svg {\r\n    pointer-events: none;\r\n  }\r\n`\r\n\r\nexport interface ListOrderState {\r\n  orderKey: string\r\n  orderDir: 'asc' | 'desc'\r\n}\r\n\r\nexport const TriggerButton = styled(Button)<{ hasItem: boolean }>`\r\n  ${({ hasItem }) =>\r\n    hasItem &&\r\n    `  \r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    padding-right: 8px;\r\n  `}\r\n`\r\n\r\nexport const CloseButton = styled(IconButton)`\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n`\r\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","var baseIteratee = require('./_baseIteratee'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nmodule.exports = uniqBy;\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n","/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arrayIncludesWith;\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n","import { useState, useEffect } from 'react'\r\nimport {\r\n  getAllPancakeBunniesLowestPrice,\r\n  getAllPancakeBunniesRecentUpdatedAt,\r\n  getNftsFromCollectionApi,\r\n} from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\r\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\r\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\r\n\r\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\r\n\r\n  useEffect(() => {\r\n    const fetchPancakeBunnies = async () => {\r\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\r\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\r\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\r\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\r\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      const bunnyIds = Object.keys(data)\r\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\r\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\r\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\r\n        return {\r\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\r\n          tokenId: data[bunnyId].name,\r\n          name: data[bunnyId].name,\r\n          description: data[bunnyId].description,\r\n          collectionAddress: pancakeBunniesAddress,\r\n          collectionName: data[bunnyId].collection.name,\r\n          image: data[bunnyId].image,\r\n          attributes: [\r\n            {\r\n              traitType: 'bunnyId',\r\n              value: bunnyId,\r\n              displayType: null,\r\n            },\r\n          ],\r\n          meta: {\r\n            currentAskPrice: lowestPrices[bunnyId],\r\n            updatedAt: latestUpdates[bunnyId],\r\n          },\r\n        }\r\n      })\r\n      setAllPancakeBunnyNfts(allBunnies)\r\n    }\r\n    if (isPBCollection && !allPancakeBunnyNfts) {\r\n      fetchPancakeBunnies()\r\n    }\r\n  }, [isPBCollection, allPancakeBunnyNfts])\r\n\r\n  return allPancakeBunnyNfts\r\n}\r\n\r\nexport default useAllPancakeBunnyNfts\r\n"],"sourceRoot":""}