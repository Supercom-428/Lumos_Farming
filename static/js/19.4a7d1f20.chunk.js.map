{"version":3,"sources":["views/Ifos2/components/IfoFoldableCard/types.ts","views/Ifos2/hooks/useIfoApprove.ts","views/Ifos2/components/IfoFoldableCard/Achievement.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/PercentageOfTotal.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/Skeletons.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/IfoCardTokens.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/GetTokenModal.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/ContributeButton.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/IfoCardActions.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx","views/Ifos2/components/IfoFoldableCard/IfoPoolCard/index.tsx","views/Ifos2/components/IfoFoldableCard/Timer.tsx","views/Ifos2/components/IfoFoldableCard/IfoRibbon.tsx","components/Navegation2/index.tsx","views/Ifos2/components/IfoFoldableCard/index.tsx","views/Ifos2/components/IfoLayout.tsx","views/Ifos2/components/IfoPoolVaultCard.tsx","views/Ifos2/CurrentIfo.tsx","views/Ifos2/components/IfoCardV1Data.tsx","views/Ifos2/components/IfoCardV2Data.tsx","views/Ifos2/components/IfoCardV3Data.tsx","views/Ifos2/PastIfo.tsx","views/Ifos2/index.tsx"],"names":["EnableStatus","useIfoApprove","tokenContract","spenderAddress","callWithGasPrice","useCallWithGasPrice","useCallback","onTransactionSubmitted","onSuccess","onError","a","ethers","constants","MaxUint256","tx","wait","receipt","status","SmartContractIcon","props","viewBox","fill","xmlns","d","fillRule","clipRule","FIXED_MIN_DOLLAR_FOR_ACHIEVEMENT","BIG_TEN","Container","styled","Flex","theme","mediaQueries","md","AchievementFlex","isFinished","InlinePrize","IfoAchievement","ifo","publicIfoData","t","useTranslation","tokenName","token","symbol","toLowerCase","campaignTitle","name","minLpForAchievement","thresholdPoints","formatBigNumber","div","currencyPriceInUSD","toNumber","toFixed","p","pb","alignItems","flex","src","width","height","mr","flexDirection","ml","color","fontSize","bold","lineHeight","title","numberPoints","gt","amount","currency","tokens","cake","minHeight","gap","pt","pl","external","href","articleUrl","getBscScanLink","address","twitterUrl","telegramUrl","description","style","whiteSpace","PercentageOfTotal","userAmount","totalAmount","percentOfUserDisplay","isGreaterThan","times","toLocaleString","undefined","maximumFractionDigits","num","SkeletonCardActions","SkeletonCardTokens","justifyContent","mb","variant","SkeletonCardDetails","TokenSection","primaryToken","secondaryToken","children","CommitTokenSection","commitToken","equals","cakeBnbLpToken","wbnb","Label","textTransform","Value","marginLeft","wordBreak","OnSaleInfo","distributionRatio","saleAmount","toUpperCase","ratio","MessageTextLink","Link","IfoCardTokens","poolId","walletIfoData","hasProfile","isLoading","onApprove","enableStatus","account","useWeb3React","useTooltip","placement","targetRef","tooltip","tooltipVisible","publicPoolCharacteristics","userPoolCharacteristics","hasClaimed","ifoPoolVault","useIfoPoolVault","pool","useIfoWithApr","credit","useIfoPoolCredit","stakingTokenBalance","userData","BigNumber","BIG_ZERO","useModal","VaultStakeModal","stakingMax","performanceFee","fees","performanceFeeAsDecimal","onPresentStake","message","SwapBasic","history","location","match","version","getBalanceNumber","ENABLED","mt","onClick","IS_ENABLING","endIcon","spin","amountTokenCommittedInLP","decimals","totalAmountPool","offeringAmountInToken","isEqualTo","fontWeight","textAlign","refundingAmountInLP","ref","display","my","renderTokenSection","GetTokenModal","onDismiss","maxWidth","margin","as","minWidth","multiplierValues","gasPrice","parseUnits","toString","SmallAmountNotice","ContributeModal","userCurrencyBalance","creditLeft","limitPerUserInLP","contract","useState","value","setValue","raisingTokenContract","useERC20","valueWithTokenDecimals","DEFAULT_TOKEN_DECIMAL","label","useApproveConfirmTransaction","onRequiresApproval","allowance","response","currentAllowance","onConfirm","PoolIds","poolBasic","transactionHash","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","maximumTokenEntry","useMemo","minus","isLessThanOrEqualTo","maximumTokenCommittable","isWarning","poolUnlimited","formatNumber","getBalanceAmount","flexGrow","split","toLocaleLowerCase","currencyValue","onUserInput","onBlur","balance","map","multiplierValue","index","scale","length","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","isNaN","eq","ContributeButton","isPendingTx","toastSuccess","useToast","currentBlock","useBlock","useTokenBalance","handleContributeSuccess","txHash","Promise","all","fetchIfoData","Toast","ifoCredit","onPresentContributeModal","onPresentGetTokenModal","isMaxCommitted","isGreaterThanOrEqualTo","isDisabled","disabled","ClaimButton","ifoVersion","toastError","setPendingTx","isPending","handleClaim","harvest","harvestPool","hash","setIsClaimed","logError","IfoCardActions","ConnectWalletButton","FooterEntry","small","MaxTokenEntry","maxToken","isCurrencyCake","isV3","tooltipContent","price","useBUSDPrice","dollarValueOfToken","multiplyPriceByAmount","IfoCardDetails","poolCharacteristic","walletCharacteristic","version3MaxTokens","maxLpTokens","isActive","taxRate","totalCommittedPercent","raisingAmountPool","totalLPCommitted","totalLPCommittedInUSD","totalCommitted","pricePerTokenWithFeeToOriginalRatio","plus","offeringAmountPool","pricePerTokenWithFee","tokenOfferingPrice","tokenEntry","paddingTop","raiseAmount","cakeToBurn","SmallCard","Card","config","cardConfig","useProfile","isProfileLoading","className","GradientText","Heading","FlexGap","SoonTimer","secondsUntilStart","timeUntil","getTimePeriods","position","animation","days","hours","minutes","EndInHeading","LiveNowHeading","LiveTimer","secondsUntilEnd","BigCurve","Box","$status","IfoRibbon","Component","$useDark","$background","Math","min","max","progress","overflow","IfoRibbonEnd","IfoRibbonSoon","IfoRibbonLive","Navegation","useTheme","to","StyledCard","$isCurrent","sm","Header","CardHeader","CardsWrapper","xxl","singleCard","StyledCardFooter","CardBody","CardFooter","StyledNoHatBunny","$isLive","lg","NoHatBunny","isLive","isCurrent","useMatchBreakpoints","isXs","isSm","isMd","isSmallerThanTablet","alt","IfoCurrentCard","isExpanded","setIsExpanded","isMobile","shouldShowBunny","bottom","expanded","FoldableContent","isVisible","IfoCard","fetchPublicIfoData","isPublicIfoDataInitialized","isInitialized","fetchWalletIfoData","resetWalletIfoData","resetIfoData","isWalletDataInitialized","DISABLED","setEnableStatus","isRecentlyActive","fastRefresh","useFastFresh","isWindowVisible","useIsWindowVisible","useEffect","lte","checkAllowance","IfoPoolCard","IfoFoldableCard","isDesktop","borderRadius","ifoId","id","prev","IfoLayout","IfoLayoutWrapper","IfoPoolVaultCard","Text","colors","dropdown","ActionContainer","invertedContrast","CakeVaultCard","showStakedOnly","m","activeIfo","gradients","bubblegum","ifosConfig","find","Ifo","useGetPublicIfoV2Data","useGetWalletIfoV3Data","py","IfoCardV1Data","useGetPublicIfoV1Data","useGetWalletIfoV1Data","IfoCardV2Data","useGetWalletIfoV2Data","IfoCardV3Data","inactiveIfo","filter","PastIfo","Ifos","useRouteMatch","path","isExact","useFetchIfoPool","exact","CurrentIfo"],"mappings":"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","file":"static/js/19.4a7d1f20.chunk.js","sourcesContent":["export enum EnableStatus {\r\n  ENABLED = 'enabled',\r\n  DISABLED = 'disabled',\r\n  IS_ENABLING = 'is_enabling',\r\n}\r\n\r\nexport default EnableStatus\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\r\n\r\nconst useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const onApprove = useCallback(\r\n    async (\r\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\r\n      onSuccess: (receipt: TransactionReceipt) => void,\r\n      onError: (receipt: TransactionReceipt) => void,\r\n    ) => {\r\n      const tx = await callWithGasPrice(tokenContract, 'approve', [spenderAddress, ethers.constants.MaxUint256])\r\n      onTransactionSubmitted(tx)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        onSuccess(receipt)\r\n      } else {\r\n        onError(receipt)\r\n      }\r\n    },\r\n    [spenderAddress, tokenContract, callWithGasPrice],\r\n  )\r\n\r\n  return onApprove\r\n}\r\n\r\nexport default useIfoApprove\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Flex,\r\n  Image,\r\n  Text,\r\n  PrizeIcon,\r\n  Skeleton,\r\n  LanguageIcon,\r\n  SvgProps,\r\n  Svg,\r\n  TwitterIcon,\r\n  Link,\r\n  TelegramIcon,\r\n} from '@pancakeswap/uikit'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { PublicIfoData } from 'views/Ifos/types'\r\nimport { Ifo } from 'config/constants/types'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\nimport { getBscScanLink } from 'utils'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { FlexGap } from 'components/Layout/Flex'\r\n\r\nconst SmartContractIcon: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\r\n      <path d=\"M10.037 6a.75.75 0 000 1.5h7.5a.75.75 0 000-1.5h-7.5zM9.287 9.75a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM10.037 12a.75.75 0 000 1.5h7.5a.75.75 0 000-1.5h-7.5z\" />\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M5.287 4a2 2 0 012-2h13a2 2 0 012 2v15c0 1.66-1.34 3-3 3h-14c-1.66 0-3-1.34-3-3v-2c0-.55.45-1 1-1h2V4zm0 16h11v-2h-12v1c0 .55.45 1 1 1zm14 0c.55 0 1-.45 1-1V4h-13v12h10c.55 0 1 .45 1 1v2c0 .55.45 1 1 1z\"\r\n      />\r\n    </Svg>\r\n  )\r\n}\r\n\r\nconst FIXED_MIN_DOLLAR_FOR_ACHIEVEMENT = BIG_TEN\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n}\r\n\r\nconst Container = styled(Flex)`\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  text-align: left;\r\n  gap: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n    align-items: initial;\r\n  }\r\n`\r\n\r\nconst AchievementFlex = styled(Flex)<{ isFinished: boolean }>`\r\n  ${({ isFinished }) => (isFinished ? 'filter: grayscale(100%)' : '')};\r\n  text-align: left;\r\n`\r\n\r\nconst InlinePrize = styled(Flex)`\r\n  display: inline-flex;\r\n  vertical-align: top;\r\n`\r\n\r\nconst IfoAchievement: React.FC<Props> = ({ ifo, publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const tokenName = ifo.token.symbol?.toLowerCase()\r\n  const campaignTitle = ifo.name\r\n  const minLpForAchievement = publicIfoData.thresholdPoints\r\n    ? formatBigNumber(publicIfoData.thresholdPoints, 3)\r\n    : FIXED_MIN_DOLLAR_FOR_ACHIEVEMENT.div(publicIfoData.currencyPriceInUSD).toNumber().toFixed(3)\r\n\r\n  return (\r\n    <Container p=\"16px\" pb=\"32px\">\r\n      <AchievementFlex isFinished={publicIfoData.status === 'finished'} alignItems=\"flex-start\" flex={1}>\r\n        <Image src={`/images/achievements/ifo-${tokenName}.svg`} width={56} height={56} mr=\"8px\" />\r\n        <Flex flexDirection=\"column\" ml=\"8px\">\r\n          <Text color=\"secondary\" fontSize=\"12px\">\r\n            {`${t('Achievement')}:`}\r\n          </Text>\r\n          <Flex>\r\n            <Text bold mr=\"8px\" lineHeight={1.2}>\r\n              {t('IFO Shopper: %title%', { title: campaignTitle })}\r\n              <InlinePrize alignItems=\"center\" ml=\"8px\">\r\n                <PrizeIcon color=\"textSubtle\" width=\"16px\" mr=\"4px\" />\r\n                <Text lineHeight={1.2} color=\"textSubtle\">\r\n                  {publicIfoData.numberPoints}\r\n                </Text>\r\n              </InlinePrize>\r\n            </Text>\r\n          </Flex>\r\n          {publicIfoData.currencyPriceInUSD.gt(0) ? (\r\n            <Text color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Commit ~%amount% %symbol% in total to earn!', {\r\n                amount: minLpForAchievement,\r\n                symbol: ifo.currency === tokens.cake ? 'CAKE' : 'LP',\r\n              })}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton minHeight={18} width={80} />\r\n          )}\r\n          <FlexGap gap=\"16px\" pt=\"24px\" pl=\"4px\">\r\n            <Link external href={ifo.articleUrl}>\r\n              <LanguageIcon color=\"white\" />\r\n            </Link>\r\n            <Link external href={getBscScanLink(ifo.address, 'address')}>\r\n              <SmartContractIcon color=\"white\" />\r\n            </Link>\r\n            {ifo.twitterUrl && (\r\n              <Link external href={ifo.twitterUrl}>\r\n                <TwitterIcon color=\"white\" />\r\n              </Link>\r\n            )}\r\n            {ifo.telegramUrl && (\r\n              <Link external href={ifo.telegramUrl}>\r\n                <TelegramIcon color=\"white\" />\r\n              </Link>\r\n            )}\r\n          </FlexGap>\r\n        </Flex>\r\n      </AchievementFlex>\r\n      {ifo.description && (\r\n        <Flex alignItems=\"flex-end\" flexDirection=\"column\" flex={1}>\r\n          <Text fontSize=\"14px\" lineHeight={1.2} style={{ whiteSpace: 'pre-line' }}>\r\n            {ifo.description}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default IfoAchievement\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface PercentageOfTotalProps extends TextProps {\r\n  userAmount: BigNumber\r\n  totalAmount: BigNumber\r\n}\r\n\r\nconst PercentageOfTotal: React.FC<PercentageOfTotalProps> = ({ userAmount, totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const percentOfUserContribution = totalAmount.isGreaterThan(0) ? userAmount.div(totalAmount).times(100).toNumber() : 0\r\n  const percentOfUserDisplay = percentOfUserContribution.toLocaleString(undefined, { maximumFractionDigits: 5 })\r\n\r\n  return (\r\n    <Text fontSize=\"14px\" color=\"textSubtle\" {...props}>\r\n      {t('%num% of total', { num: `${percentOfUserDisplay}%` })}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default PercentageOfTotal\r\n","import React from 'react'\r\nimport { Flex, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport const SkeletonCardActions = () => {\r\n  return <Skeleton height=\"48px\" />\r\n}\r\n\r\nexport const SkeletonCardTokens = () => {\r\n  return (\r\n    <div>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\r\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\r\n        <Skeleton width=\"90%\" />\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\r\n        <Skeleton width=\"90%\" />\r\n      </Flex>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SkeletonCardDetails = () => {\r\n  return (\r\n    <div>\r\n      <Skeleton mb=\"8px\" />\r\n      <Skeleton />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default null\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport {\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  CheckmarkCircleIcon,\r\n  FlexProps,\r\n  HelpIcon,\r\n  useTooltip,\r\n  Button,\r\n  AutoRenewIcon,\r\n  BunnyPlaceholderIcon,\r\n  Message,\r\n  MessageText,\r\n  useModal,\r\n  Link,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport tokens from 'config/constants/tokens'\r\nimport { cakeBnbLpToken } from 'config/constants/ifo'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { TokenImage, TokenPairImage } from 'components/TokenImage'\r\nimport VaultStakeModal from 'views/Pools/components/CakeVaultCard/VaultStakeModal'\r\nimport { useIfoPoolVault, useIfoPoolCredit, useIfoWithApr } from 'state/pools/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { EnableStatus } from '../types'\r\nimport PercentageOfTotal from './PercentageOfTotal'\r\nimport { SkeletonCardTokens } from './Skeletons'\r\nimport QBANK from '../../../../Pools/components/CakeVaultCard/Qbank'\r\n import SwapBasic from '../../../../Swap/SwapBasic'\r\nimport Swap from '../../../../Swap'\r\n\r\ninterface TokenSectionProps extends FlexProps {\r\n  primaryToken?: Token\r\n  secondaryToken?: Token\r\n}\r\n\r\nconst TokenSection: React.FC<TokenSectionProps> = ({ primaryToken, secondaryToken, children, ...props }) => {\r\n  const renderTokenComponent = () => {\r\n    if (!primaryToken) {\r\n      // return <BunnyPlaceholderIcon width={32} mr=\"16px\" />\r\n      return <QBANK />\r\n    }\r\n\r\n    if (primaryToken && secondaryToken) {\r\n      // return (\r\n      //   <TokenPairImage\r\n      //     variant=\"inverted\"\r\n      //     primaryToken={primaryToken}\r\n      //     height={32}\r\n      //     width={32}\r\n      //     secondaryToken={secondaryToken}\r\n      //     mr=\"16px\"\r\n      //   />\r\n      // )\r\n      return <QBANK/>\r\n    \r\n    }\r\n\r\n    return <QBANK/>\r\n    \r\n    // return <TokenImage token={primaryToken} height={32} width={32} mr=\"16px\" />\r\n  }\r\n\r\n  return (\r\n    <Flex {...props}>\r\n      {renderTokenComponent()}\r\n      <div>{children}</div>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst CommitTokenSection: React.FC<TokenSectionProps & { commitToken: Token }> = ({ commitToken, ...props }) => {\r\n  if (commitToken.equals(cakeBnbLpToken)) {\r\n    return <TokenSection primaryToken={tokens.cake} secondaryToken={tokens.wbnb} {...props} />\r\n  }\r\n  return <TokenSection primaryToken={commitToken} {...props} />\r\n}\r\n\r\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"white\" textTransform=\"uppercase\" {...props} />\r\n\r\nconst Value = (props) => <Text marginLeft=\"10px!important\" bold fontSize=\"16px\" style={{ wordBreak: 'break-all' }} {...props} />\r\n\r\ninterface IfoCardTokensProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  hasProfile: boolean\r\n  isLoading: boolean\r\n  onApprove: () => Promise<any>\r\n  enableStatus: EnableStatus\r\n}\r\n\r\nconst OnSaleInfo = ({ token, saleAmount, distributionRatio }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <TokenSection primaryToken={token}>\r\n      <Flex flexDirection=\"column\">\r\n        <Label>{t('On sale').toUpperCase()}</Label>\r\n        <Value>100,000,000,000,000 QBANKX </Value>\r\n        <Text fontSize=\"14px\" color=\"white\">\r\n          {t('%ratio%% of total suply', { ratio: distributionRatio })}\r\n        </Text>\r\n      </Flex>\r\n    </TokenSection>\r\n  )\r\n}\r\n\r\nconst MessageTextLink = styled(Link)`\r\n  display: inline;\r\n  text-decoration: underline;\r\n  font-weight: bold;\r\n  font-size: 14px;\r\n  white-space: nowrap;\r\n  color: white;\r\n`\r\n\r\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\r\n  poolId,\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n  hasProfile,\r\n  isLoading,\r\n  onApprove,\r\n  enableStatus,\r\n}) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t(\r\n      'Sorry, you didn’t contribute enough QBANKX to meet the minimum threshold. You didn’t buy anything in this sale, but you can still reclaim your QBANKX.',\r\n    ),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  const { currency, token } = ifo\r\n  const { hasClaimed } = userPoolCharacteristics\r\n  const distributionRatio = ifo[poolId].distributionRatio * 100\r\n\r\n  const ifoPoolVault = useIfoPoolVault()\r\n  const { pool } = useIfoWithApr()\r\n  const credit = useIfoPoolCredit()\r\n\r\n  const stakingTokenBalance = pool?.userData?.stakingTokenBalance\r\n    ? new BigNumber(pool.userData.stakingTokenBalance)\r\n    : BIG_ZERO\r\n\r\n  const [onPresentStake] = useModal(\r\n    <VaultStakeModal\r\n      stakingMax={stakingTokenBalance}\r\n      performanceFee={ifoPoolVault.fees.performanceFeeAsDecimal}\r\n      pool={pool}\r\n    />,\r\n  )\r\n\r\n  const renderTokenSection = () => {\r\n    if (isLoading) {\r\n      return <SkeletonCardTokens />\r\n    }\r\n    if (!account) {\r\n      return <OnSaleInfo token={token} distributionRatio={distributionRatio} saleAmount={ifo[poolId].saleAmount} />\r\n    }\r\n\r\n    let message\r\n\r\n    if (account && !hasProfile && poolId === 'poolBasic') {\r\n      message = (\r\n        <Flex>\r\n        <SwapBasic history={undefined} location={undefined} match={undefined}/>\r\n      </Flex>\r\n      )\r\n    }\r\n    // if (account && !hasProfile && poolId === 'poolUnlimited') {\r\n    //   message = (\r\n    //     <Flex>\r\n    //     <SwapUnlimited history={undefined} location={undefined} match={undefined}/>\r\n    //   </Flex>\r\n    //   )\r\n    // }\r\n\r\n    if (ifo.version === 3 && getBalanceNumber(credit) === 0 && poolId === 'poolBasic') {\r\n      message = (\r\n        // <Message my=\"24px\" p=\"8px\" variant=\"danger\">\r\n        //   <Box>\r\n        //     <MessageText display=\"inline\">\r\n        //       {t('You don’t have any average QBANKX balance available to commit in the IFO QBANKX pool.')}\r\n        //     </MessageText>{' '}\r\n        //     <MessageTextLink display=\"inline\" fontWeight={700} href=\"#ifo-how-to\" color=\"failure\">\r\n        //       {t('How does it work?')} »\r\n        //     </MessageTextLink>\r\n        //   </Box>\r\n        // </Message>\r\n      <Flex>\r\n          <SwapBasic history={undefined} location={undefined} match={undefined}/>\r\n      </Flex>\r\n        )\r\n    }\r\n    if (ifo.version === 3 && getBalanceNumber(credit) === 0 && poolId === 'poolUnlimited') {\r\n      message = (\r\n        // <Message my=\"24px\" p=\"8px\" variant=\"danger\">\r\n        //   <Box>\r\n        //     <MessageText display=\"inline\">\r\n        //       {t('You don’t have any average QBANKX balance available to commit in the IFO QBANKX pool.')}\r\n        //     </MessageText>{' '}\r\n        //     <MessageTextLink display=\"inline\" fontWeight={700} href=\"#ifo-how-to\" color=\"failure\">\r\n        //       {t('How does it work?')} »\r\n        //     </MessageTextLink>\r\n        //   </Box>\r\n        // </Message>\r\n      <Flex>\r\n          <SwapBasic history={undefined} location={undefined} match={undefined}/>\r\n      </Flex>\r\n        )\r\n    }\r\n    if (account && !hasProfile) {\r\n      return (\r\n        <>\r\n          <OnSaleInfo token={token} distributionRatio={distributionRatio} saleAmount={ifo[poolId].saleAmount} />\r\n          {message}\r\n        </>\r\n      )\r\n    }\r\n    if (publicIfoData.status === 'coming_soon') {\r\n      return (\r\n        <>\r\n          <TokenSection primaryToken={ifo.token}>\r\n            <Label>{t('On sale')}</Label>\r\n            <Value>{ifo[poolId].saleAmount}</Value>\r\n          </TokenSection>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\" pl=\"48px\">\r\n            {t('%ratio%% of total sale', { ratio: distributionRatio })}\r\n          </Text>\r\n          {message}\r\n          {enableStatus !== EnableStatus.ENABLED && account && (\r\n            <Button\r\n              width=\"100%\"\r\n              mt=\"16px\"\r\n              onClick={onApprove}\r\n              isLoading={enableStatus === EnableStatus.IS_ENABLING}\r\n              endIcon={enableStatus === EnableStatus.IS_ENABLING ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n            >\r\n              {t('Enable')}\r\n            </Button>\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n    if (publicIfoData.status === 'live') {\r\n      return (\r\n        <>\r\n          <CommitTokenSection commitToken={ifo.currency} mb=\"24px\">\r\n            <Label>{t('Your %symbol% committed', { symbol: currency.symbol })}</Label>\r\n            <Value>{getBalanceNumber(userPoolCharacteristics.amountTokenCommittedInLP, currency.decimals)}</Value>\r\n            <PercentageOfTotal\r\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\r\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\r\n            />\r\n          </CommitTokenSection>\r\n          <TokenSection primaryToken={ifo.token}>\r\n            <Label>{t('%symbol% to receive', { symbol: token.symbol })}</Label>\r\n            <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\r\n          </TokenSection>\r\n        </>\r\n      )\r\n    }\r\n    if (publicIfoData.status === 'finished') {\r\n      return userPoolCharacteristics.amountTokenCommittedInLP.isEqualTo(0) ? (\r\n        <Flex flexDirection=\"column\" alignItems=\"center\">\r\n          <BunnyPlaceholderIcon width={80} mb=\"16px\" />\r\n          <Text fontWeight={600}>{t('You didn’t participate in this sale!')}</Text>\r\n          <Text textAlign=\"center\" fontSize=\"14px\">\r\n            {t('To participate in the next IFO, stake some QBANKX in the IFO QBANKX pool!')}\r\n          </Text>\r\n          <MessageTextLink href=\"#ifo-how-to\" textAlign=\"center\">\r\n            {t('How does it work?')} »\r\n          </MessageTextLink>\r\n          <Button mt=\"24px\" onClick={onPresentStake}>\r\n            {t('Stake QBANKX in IFO pool')}\r\n          </Button>\r\n        </Flex>\r\n      ) : (\r\n        <>\r\n          <CommitTokenSection commitToken={ifo.currency} mb=\"24px\">\r\n            <Label>\r\n              {t(hasClaimed ? 'Your %symbol% RECLAIMED' : 'Your %symbol% TO RECLAIM', { symbol: currency.symbol })}\r\n            </Label>\r\n            <Flex alignItems=\"center\">\r\n              <Value>{getBalanceNumber(userPoolCharacteristics.refundingAmountInLP, currency.decimals)}</Value>\r\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\r\n            </Flex>\r\n            <PercentageOfTotal\r\n              userAmount={userPoolCharacteristics.amountTokenCommittedInLP}\r\n              totalAmount={publicPoolCharacteristics.totalAmountPool}\r\n            />\r\n          </CommitTokenSection>\r\n          <TokenSection primaryToken={ifo.token}>\r\n            <Label> {t(hasClaimed ? '%symbol% received' : '%symbol% to receive', { symbol: token.symbol })}</Label>\r\n            <Flex alignItems=\"center\">\r\n              <Value>{getBalanceNumber(userPoolCharacteristics.offeringAmountInToken, token.decimals)}</Value>\r\n              {!hasClaimed && userPoolCharacteristics.offeringAmountInToken.isEqualTo(0) && (\r\n                <div ref={targetRef} style={{ display: 'flex', marginLeft: '8px' }}>\r\n                  <HelpIcon />\r\n                </div>\r\n              )}\r\n              {hasClaimed && <CheckmarkCircleIcon color=\"success\" ml=\"8px\" />}\r\n            </Flex>\r\n          </TokenSection>\r\n          {hasClaimed && (\r\n            <Message my=\"24px\" p=\"8px\" variant=\"success\">\r\n              <MessageText>{t('You’ve successfully claimed tokens back.')}</MessageText>\r\n            </Message>\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n  return (\r\n    <Box>\r\n      {tooltipVisible && tooltip}\r\n      {renderTokenSection()}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default IfoCardTokens\r\n","import React from 'react'\r\nimport { Modal, ModalBody, Text, Image, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface Props {\r\n  currency: Token\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst GetTokenModal: React.FC<Partial<Props>> = ({ currency, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Modal title={t('%symbol% required', { symbol: currency.symbol })} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"288px\">\r\n        <Image src={`/images/tokens/${currency.address}.svg`} width={72} height={72} margin=\"auto\" mb=\"24px\" />\r\n        <Text mb=\"16px\">\r\n          {t('You’ll need %symbol% tokens to participate in the IFO!', { symbol: currency.symbol })}\r\n        </Text>\r\n        <Text mb=\"24px\">\r\n          {t('Get %symbol%, or make sure your tokens aren’t staked somewhere else.', { symbol: currency.symbol })}\r\n        </Text>\r\n        <Button\r\n          as={Link}\r\n          external\r\n          href={`/swap?outputCurrency=${currency.address}`}\r\n          endIcon={<OpenNewIcon color=\"white\" />}\r\n          minWidth=\"100%\" // Bypass the width=\"fit-content\" on Links\r\n        >\r\n          {t('Get %symbol%', { symbol: currency.symbol })}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default GetTokenModal\r\n","import React, { useMemo, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport {\r\n  Modal,\r\n  ModalBody,\r\n  Text,\r\n  Image,\r\n  Button,\r\n  BalanceInput,\r\n  Flex,\r\n  useTooltip,\r\n  TooltipText,\r\n  Box,\r\n  Link,\r\n  Message,\r\n  MessageText,\r\n} from '@pancakeswap/uikit'\r\nimport { PoolIds, Ifo } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport tokens from 'config/constants/tokens'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  userCurrencyBalance: BigNumber\r\n  creditLeft: BigNumber\r\n  onSuccess: (amount: BigNumber, txHash: string) => void\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\r\n\r\n// Default value for transaction setting, tweak based on BSC network congestion.\r\nconst gasPrice = parseUnits('10', 'gwei').toString()\r\n\r\nconst SmallAmountNotice: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box maxWidth=\"350px\">\r\n      <Message variant=\"warning\" mb=\"16px\">\r\n        <MessageText>\r\n          {t('If the amount you commit is too small, you may not receive a meaningful amount of IFO tokens.')}\r\n        </MessageText>\r\n      </Message>\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst ContributeModal: React.FC<Props> = ({\r\n  poolId,\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n  userCurrencyBalance,\r\n  creditLeft,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  const { currency } = ifo\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { contract } = walletIfoData\r\n  const [value, setValue] = useState('')\r\n  const { account } = useWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const raisingTokenContract = useERC20(currency.address)\r\n  const { t } = useTranslation()\r\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\r\n  const label = currency === tokens.cake ? t('Max. CAKE entry') : t('Max. token entry')\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        try {\r\n          const response = await raisingTokenContract.allowance(account, contract.address)\r\n          const currentAllowance = new BigNumber(response.toString())\r\n          return currentAllowance.gt(0)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return callWithGasPrice(raisingTokenContract, 'approve', [contract.address, ethers.constants.MaxUint256], {\r\n          gasPrice,\r\n        })\r\n      },\r\n      onConfirm: () => {\r\n        return callWithGasPrice(\r\n          contract,\r\n          'depositPool',\r\n          [valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1],\r\n          {\r\n            gasPrice,\r\n          },\r\n        )\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        await onSuccess(valueWithTokenDecimals, receipt.transactionHash)\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  // in v3 max token entry is based on ifo credit and hard cap limit per user minus amount already committed\r\n  const maximumTokenEntry = useMemo(() => {\r\n    if (!creditLeft) {\r\n      return limitPerUserInLP.minus(amountTokenCommittedInLP)\r\n    }\r\n    if (limitPerUserInLP.isGreaterThan(0)) {\r\n      if (limitPerUserInLP.isGreaterThan(0)) {\r\n        return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(creditLeft)\r\n          ? limitPerUserInLP.minus(amountTokenCommittedInLP)\r\n          : creditLeft\r\n      }\r\n    }\r\n    return creditLeft\r\n  }, [creditLeft, limitPerUserInLP, amountTokenCommittedInLP])\r\n\r\n  // include user balance for input\r\n  const maximumTokenCommittable = useMemo(() => {\r\n    return maximumTokenEntry.isLessThanOrEqualTo(userCurrencyBalance) ? maximumTokenEntry : userCurrencyBalance\r\n  }, [maximumTokenEntry, userCurrencyBalance])\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    poolId === PoolIds.poolBasic\r\n      ? t(\r\n          'For the basic sale, Max CAKE entry is capped by minimum between your average CAKE balance in the IFO CAKE pool, or the pool’s hard cap. To increase the max entry, Stake more CAKE into the IFO CAKE pool',\r\n        )\r\n      : t(\r\n          'For the unlimited sale, Max CAKE entry is capped by your average CAKE balance in the IFO CAKE pool. To increase the max entry, Stake more CAKE into the IFO CAKE pool',\r\n        ),\r\n    {},\r\n  )\r\n\r\n  const isWarning =\r\n    valueWithTokenDecimals.isGreaterThan(userCurrencyBalance) || valueWithTokenDecimals.isGreaterThan(maximumTokenEntry)\r\n\r\n  return (\r\n    <Modal title={t('Contribute %symbol%', { symbol: currency.symbol })} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"360px\">\r\n        {poolId === PoolIds.poolUnlimited && <SmallAmountNotice />}\r\n        <Box p=\"2px\">\r\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n            {tooltipVisible && tooltip}\r\n            <TooltipText ref={targetRef}>{label}:</TooltipText>\r\n            <Text>{`${formatNumber(getBalanceAmount(maximumTokenEntry, currency.decimals).toNumber(), 3, 3)} ${\r\n              ifo.currency.symbol\r\n            }`}</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\" mb=\"8px\">\r\n            <Text>{t('Commit')}:</Text>\r\n            <Flex flexGrow={1} justifyContent=\"flex-end\">\r\n              <Image\r\n                src={\r\n                  ifo.currency.symbol === 'CAKE'\r\n                    ? '/images/cake.svg'\r\n                    : `/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`\r\n                }\r\n                width={24}\r\n                height={24}\r\n              />\r\n              <Text ml=\"4px\">{currency.symbol}</Text>\r\n            </Flex>\r\n          </Flex>\r\n          <BalanceInput\r\n            value={value}\r\n            currencyValue={`${publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2)} USD`}\r\n            onUserInput={setValue}\r\n            isWarning={isWarning}\r\n            decimals={currency.decimals}\r\n            onBlur={() => {\r\n              if (isWarning) {\r\n                // auto adjust to max value\r\n                setValue(getBalanceAmount(maximumTokenCommittable).toString())\r\n              }\r\n            }}\r\n            mb=\"8px\"\r\n          />\r\n          {isWarning && (\r\n            <Text\r\n              color={valueWithTokenDecimals.isGreaterThan(userCurrencyBalance) ? 'failure' : 'warning'}\r\n              textAlign=\"right\"\r\n              fontSize=\"12px\"\r\n              mb=\"8px\"\r\n            >\r\n              {valueWithTokenDecimals.isGreaterThan(userCurrencyBalance)\r\n                ? t('Insufficient Balance')\r\n                : t('Exceeded max CAKE entry')}\r\n            </Text>\r\n          )}\r\n          <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\r\n            {t('Balance: %balance%', {\r\n              balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString(),\r\n            })}\r\n          </Text>\r\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n            {multiplierValues.map((multiplierValue, index) => (\r\n              <Button\r\n                key={multiplierValue}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={() => setValue(getBalanceAmount(maximumTokenCommittable.times(multiplierValue)).toString())}\r\n                mr={index < multiplierValues.length - 1 ? '8px' : 0}\r\n              >\r\n                {multiplierValue * 100}%\r\n              </Button>\r\n            ))}\r\n          </Flex>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\r\n            {t(\r\n              'If you don’t commit enough CAKE, you may not receive any IFO tokens at all and will only receive a full refund of your CAKE.',\r\n            )}\r\n            <Link\r\n              fontSize=\"12px\"\r\n              display=\"inline\"\r\n              href=\"https://docs.pancakeswap.finance/products/ifo-initial-farm-offering\"\r\n              external\r\n            >\r\n              {t('Read more')}\r\n            </Link>\r\n          </Text>\r\n          <ApproveConfirmButtons\r\n            isApproveDisabled={isConfirmed || isConfirming || isApproved}\r\n            isApproving={isApproving}\r\n            isConfirmDisabled={\r\n              !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0) || isWarning\r\n            }\r\n            isConfirming={isConfirming}\r\n            onApprove={handleApprove}\r\n            onConfirm={handleConfirm}\r\n          />\r\n        </Box>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ContributeModal\r\n","import React from 'react'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, useModal } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport GetTokenModal from './GetTokenModal'\r\nimport ContributeModal from './ContributeModal'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}\r\nconst ContributeButton: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\r\n  const publicPoolCharacteristics = publicIfoData[poolId]\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { isPendingTx, amountTokenCommittedInLP } = userPoolCharacteristics\r\n  const { limitPerUserInLP } = publicPoolCharacteristics\r\n  const { t } = useTranslation()\r\n  const { toastSuccess } = useToast()\r\n  const { currentBlock } = useBlock()\r\n  const { balance: userCurrencyBalance } = useTokenBalance(ifo.currency.address)\r\n\r\n  // Refetch all the data, and display a message when fetching is done\r\n  const handleContributeSuccess = async (amount: BigNumber, txHash: string) => {\r\n    await Promise.all([publicIfoData.fetchIfoData(currentBlock), walletIfoData.fetchIfoData()])\r\n    toastSuccess(\r\n      t('Success!'),\r\n      <ToastDescriptionWithTx txHash={txHash}>\r\n        {t('You have contributed %amount% CAKE to this IFO!', {\r\n          amount: getBalanceNumber(amount),\r\n        })}\r\n      </ToastDescriptionWithTx>,\r\n    )\r\n  }\r\n\r\n  const [onPresentContributeModal] = useModal(\r\n    <ContributeModal\r\n      poolId={poolId}\r\n      creditLeft={walletIfoData.ifoCredit?.creditLeft}\r\n      ifo={ifo}\r\n      publicIfoData={publicIfoData}\r\n      walletIfoData={walletIfoData}\r\n      onSuccess={handleContributeSuccess}\r\n      userCurrencyBalance={userCurrencyBalance}\r\n    />,\r\n    false,\r\n  )\r\n\r\n  const [onPresentGetTokenModal] = useModal(<GetTokenModal currency={ifo.currency} />, false)\r\n\r\n  const isMaxCommitted =\r\n    (walletIfoData.ifoCredit?.creditLeft && walletIfoData.ifoCredit?.creditLeft.isLessThanOrEqualTo(0)) ||\r\n    (limitPerUserInLP.isGreaterThan(0) && amountTokenCommittedInLP.isGreaterThanOrEqualTo(limitPerUserInLP))\r\n\r\n  const isDisabled = isPendingTx || isMaxCommitted || publicIfoData.status !== 'live'\r\n\r\n  return (\r\n    <Button\r\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetTokenModal : onPresentContributeModal}\r\n      width=\"100%\"\r\n      disabled={isDisabled}\r\n    >\r\n      {isMaxCommitted && publicIfoData.status === 'live' ? t('Max. Committed') : t('Commit CAKE')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ContributeButton\r\n","import React from 'react'\r\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\r\nimport { PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { logError } from 'utils/sentry'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifoVersion: number\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n  const { t } = useTranslation()\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\r\n\r\n  const handleClaim = async () => {\r\n    try {\r\n      setPendingTx(true)\r\n      const tx =\r\n        ifoVersion === 1\r\n          ? await walletIfoData.contract.harvest()\r\n          : await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\r\n      toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n      const receipt = await tx.wait()\r\n      const txHash = receipt.transactionHash\r\n\r\n      walletIfoData.setIsClaimed(poolId)\r\n      toastSuccess(\r\n        t('Success!'),\r\n        <ToastDescriptionWithTx txHash={txHash}>\r\n          {t('You have successfully claimed your rewards.')}\r\n        </ToastDescriptionWithTx>,\r\n      )\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      logError(error)\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleClaim}\r\n      disabled={userPoolCharacteristics.isPendingTx}\r\n      width=\"100%\"\r\n      isLoading={userPoolCharacteristics.isPendingTx}\r\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n    >\r\n      {t('Claim')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClaimButton\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Button } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Link } from 'react-router-dom'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport ContributeButton from './ContributeButton'\r\nimport ClaimButton from './ClaimButton'\r\nimport { SkeletonCardActions } from './Skeletons'\r\n\r\ninterface Props {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  hasProfile: boolean\r\n  isLoading: boolean\r\n}\r\n\r\nconst IfoCardActions: React.FC<Props> = ({ poolId, ifo, publicIfoData, walletIfoData, hasProfile, isLoading }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const userPoolCharacteristics = walletIfoData[poolId]\r\n\r\n  if (isLoading) {\r\n    return <SkeletonCardActions />\r\n  }\r\n\r\n  if (!account) {\r\n    return <ConnectWalletButton width=\"100%\" />\r\n  }\r\n\r\n  if (!hasProfile) {\r\n    return (\r\n      <div/>\r\n      // <Button as={Link} to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`} width=\"100%\">\r\n      // <Button width=\"100%\">\r\n      //   {t('Sacrifice')}\r\n      // </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {(publicIfoData.status === 'live' || publicIfoData.status === 'coming_soon') && (\r\n        <ContributeButton poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n      )}\r\n      {publicIfoData.status === 'finished' &&\r\n        !userPoolCharacteristics.hasClaimed &&\r\n        (userPoolCharacteristics.offeringAmountInToken.isGreaterThan(0) ||\r\n          userPoolCharacteristics.refundingAmountInLP.isGreaterThan(0)) && (\r\n          <ClaimButton poolId={poolId} ifoVersion={ifo.version} walletIfoData={walletIfoData} />\r\n        )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IfoCardActions\r\n","import React, { ReactNode } from 'react'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Text, Flex, Box, Skeleton, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { getBalanceNumber, formatNumber } from 'utils/formatBalance'\r\nimport useBUSDPrice from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { SkeletonCardDetails } from './Skeletons'\r\n\r\nexport interface IfoCardDetailsProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nexport interface FooterEntryProps {\r\n  label: ReactNode\r\n  value: ReactNode\r\n}\r\n\r\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Text small color=\"white\">\r\n        {label}\r\n      </Text>\r\n      {value ? (\r\n        <Text small textAlign=\"right\">\r\n          {value}\r\n        </Text>\r\n      ) : (\r\n        <Skeleton height={21} width={80} />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst MaxTokenEntry = ({ maxToken, ifo, poolId }: { maxToken: number; ifo: Ifo; poolId: PoolIds }) => {\r\n  const isCurrencyCake = ifo.currency === tokens.cake\r\n  const isV3 = ifo.version === 3\r\n  const { t } = useTranslation()\r\n\r\n  const tooltipContent =\r\n    poolId === PoolIds.poolBasic\r\n      ? t(\r\n          'For the basic sale, Max QBANKX entry is capped by minimum between your average QBANKX balance in the IFO QBANKX pool, or the pool’s hard cap. To increase the max entry, Stake more QBANKX into the IFO QBANKX pool',\r\n        )\r\n      : t(\r\n          'For the unlimited sale, Max QBANKX entry is capped by your average QBANKX balance in the IFO QBANKX pool. To increase the max entry, Stake more QBANKX into the IFO QBANKX pool',\r\n        )\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\r\n  const label = isCurrencyCake ? t('Max. QBANKX entry') : t('Max. token entry')\r\n  const price = useBUSDPrice(ifo.currency)\r\n\r\n  const dollarValueOfToken = multiplyPriceByAmount(price, maxToken, ifo.currency.decimals)\r\n\r\n  return (\r\n    <>\r\n      {isV3 && tooltipVisible && tooltip}\r\n      <FooterEntry\r\n        label={\r\n          isV3 ? (\r\n            <TooltipText small color=\"textSubtle\" ref={targetRef}>\r\n              {label}\r\n            </TooltipText>\r\n          ) : (\r\n            label\r\n          )\r\n        }\r\n        value={\r\n          <Text small textAlign=\"right\" color={maxToken > 0 ? 'text' : 'failure'}>\r\n            {`${formatNumber(maxToken, 3, 3)} ${\r\n              !isCurrencyCake ? ifo.currency.symbol : ''\r\n            } ${` ~($${dollarValueOfToken.toFixed(0)})`}`}\r\n          </Text>\r\n        }\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({ poolId, ifo, publicIfoData, walletIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, currencyPriceInUSD } = publicIfoData\r\n  const poolCharacteristic = publicIfoData[poolId]\r\n  const walletCharacteristic = walletIfoData[poolId]\r\n\r\n  let version3MaxTokens = walletIfoData.ifoCredit?.creditLeft\r\n    ? // if creditLeft > limit show limit else show creditLeft\r\n      walletIfoData.ifoCredit.creditLeft.gt(\r\n        poolCharacteristic.limitPerUserInLP.minus(walletCharacteristic.amountTokenCommittedInLP),\r\n      )\r\n      ? poolCharacteristic.limitPerUserInLP.minus(walletCharacteristic.amountTokenCommittedInLP)\r\n      : walletIfoData.ifoCredit.creditLeft\r\n    : null\r\n\r\n  // unlimited pool just show the credit left\r\n  version3MaxTokens = poolId === PoolIds.poolUnlimited ? walletIfoData.ifoCredit?.creditLeft : version3MaxTokens\r\n\r\n  /* Format start */\r\n  const maxLpTokens =\r\n    ifo.version === 3 && ifo.isActive\r\n      ? version3MaxTokens\r\n        ? getBalanceNumber(version3MaxTokens, ifo.currency.decimals)\r\n        : 0\r\n      : getBalanceNumber(poolCharacteristic.limitPerUserInLP, ifo.currency.decimals)\r\n  const taxRate = `${poolCharacteristic.taxRate}%`\r\n\r\n  const totalCommittedPercent = poolCharacteristic.totalAmountPool\r\n    .div(poolCharacteristic.raisingAmountPool)\r\n    .times(100)\r\n    .toFixed(2)\r\n  const totalLPCommitted = getBalanceNumber(poolCharacteristic.totalAmountPool, ifo.currency.decimals)\r\n  const totalLPCommittedInUSD = currencyPriceInUSD.times(totalLPCommitted)\r\n  const totalCommitted = `~$${formatNumber(totalLPCommittedInUSD.toNumber(), 0, 0)} (${totalCommittedPercent}%)`\r\n\r\n  const sumTaxesOverflow = poolCharacteristic.totalAmountPool.times(poolCharacteristic.taxRate).times(0.01)\r\n  const pricePerTokenWithFeeToOriginalRatio = sumTaxesOverflow\r\n    .plus(poolCharacteristic.raisingAmountPool)\r\n    .div(poolCharacteristic.offeringAmountPool)\r\n    .div(poolCharacteristic.raisingAmountPool.div(poolCharacteristic.offeringAmountPool))\r\n  const pricePerTokenWithFee = `~$${formatNumber(\r\n    pricePerTokenWithFeeToOriginalRatio.times(ifo.tokenOfferingPrice).toNumber(),\r\n    0,\r\n    2,\r\n  )}`\r\n\r\n  const tokenEntry = <MaxTokenEntry poolId={poolId} ifo={ifo} maxToken={maxLpTokens} />\r\n\r\n  /* Format end */\r\n  const renderBasedOnIfoStatus = () => {\r\n    if (status === 'coming_soon') {\r\n      return (\r\n        <>\r\n          {tokenEntry}\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          {ifo[poolId].cakeToBurn !== '$0' && <FooterEntry label={t('QBANKX to burn:')} value={ifo[poolId].cakeToBurn} />}\r\n          <FooterEntry\r\n            label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n            value={`$${ifo.tokenOfferingPrice}`}\r\n          />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'live') {\r\n      return (\r\n        <>\r\n          {tokenEntry}\r\n          {poolId === PoolIds.poolBasic && (\r\n            <FooterEntry\r\n              label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n              value={`$${ifo.tokenOfferingPrice}`}\r\n            />\r\n          )}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          {poolId === PoolIds.poolUnlimited && (\r\n            <FooterEntry\r\n              label={t('Price per %symbol% with fee:', { symbol: ifo.token.symbol })}\r\n              value={pricePerTokenWithFee}\r\n            />\r\n          )}\r\n          <FooterEntry label={t('Total committed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n        </>\r\n      )\r\n    }\r\n    if (status === 'finished') {\r\n      return (\r\n        <>\r\n          {/* {(poolId === PoolIds.poolBasic || ifo.isActive) && tokenEntry} */}\r\n          {poolId === PoolIds.poolUnlimited && <FooterEntry label={t('Additional fee:')} value={taxRate} />}\r\n          <FooterEntry  label={t('Total sacrificed:')} value={currencyPriceInUSD.gt(0) ? totalCommitted : null} />\r\n          <FooterEntry label={t('Funds to raise:')} value={ifo[poolId].raiseAmount} />\r\n          {ifo[poolId].cakeToBurn !== '$0' && <FooterEntry label={t('QBANKX to burn:')} value={ifo[poolId].cakeToBurn} />}\r\n          {/* {ifo.version > 1 && (\r\n            <FooterEntry\r\n              label={t('Price per %symbol%:', { symbol: ifo.token.symbol })}\r\n              value={`$${ifo.tokenOfferingPrice ? ifo.tokenOfferingPrice : '?'}`}\r\n            />\r\n          )} */}\r\n          {ifo.version > 1 && poolId === PoolIds.poolUnlimited && (\r\n            <FooterEntry\r\n              label={t('Price per QBANKX with fee:', { symbol: ifo.token.symbol })}\r\n              value={pricePerTokenWithFee}\r\n            />\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n    return <SkeletonCardDetails />\r\n  }\r\n\r\n  return <Box paddingTop=\"24px\">{renderBasedOnIfoStatus()}</Box>\r\n}\r\n\r\nexport default IfoCardDetails\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { Box, Card, CardBody, CardHeader, Flex, HelpIcon, Text, useTooltip } from '@pancakeswap/uikit'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport { EnableStatus } from '../types'\r\nimport IfoCardTokens from './IfoCardTokens'\r\nimport IfoCardActions from './IfoCardActions'\r\nimport IfoCardDetails from './IfoCardDetails'\r\nimport '../styles.css'\r\n\r\nconst StyledCard = styled(Card)`\r\n  background: transparent;\r\n  max-width: 368px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  height: fit-content;\r\n\r\n`\r\n\r\ninterface IfoCardProps {\r\n  poolId: PoolIds\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n  onApprove: () => Promise<any>\r\n  enableStatus: EnableStatus\r\n}\r\n\r\nconst cardConfig = (\r\n  t: ContextApi['t'],\r\n  poolId: PoolIds,\r\n): {\r\n  title: string\r\n  // variant:  'default',\r\n  tooltip: string\r\n} => {\r\n  switch (poolId) {\r\n    case PoolIds.poolBasic:\r\n      return {\r\n        title: t('BNB Sacrifice'),\r\n        // variant: 'default',\r\n        tooltip: t(\r\n          'Every person can only commit a limited amount, but may expect a higher return per token committed.',\r\n        ),\r\n      }\r\n    case PoolIds.poolUnlimited:\r\n      return {\r\n        title: t('LUSI Sacrifice'),\r\n        //  variant: 'default',\r\n        tooltip: t('No limits on the amount you can commit. Additional fee applies when claiming.'),\r\n      }\r\n    default:\r\n      return { title: '', tooltip: '' }\r\n  }\r\n}\r\n// variant: 'default'\r\nconst SmallCard: React.FC<IfoCardProps> = ({ poolId, ifo, publicIfoData, walletIfoData, onApprove, enableStatus }) => {\r\n  const { t } = useTranslation()\r\n  const config = cardConfig(t, poolId)\r\n  const { hasProfile, isLoading: isProfileLoading } = useProfile()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(config.tooltip, { placement: 'bottom' })\r\n\r\n  const isLoading = isProfileLoading || publicIfoData.status === 'idle'\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <div className='glass' >\r\n        <div className='_header_card2'  >\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text bold fontSize=\"20px\" lineHeight={1}>\r\n              {config.title}\r\n            </Text>\r\n            <div ref={targetRef}>\r\n              <HelpIcon />\r\n            </div>\r\n          </Flex>\r\n        </div>\r\n        <CardBody className='transparent ' p=\"12px\">\r\n          <IfoCardTokens\r\n            poolId={poolId}\r\n            ifo={ifo}\r\n            publicIfoData={publicIfoData}\r\n            walletIfoData={walletIfoData}\r\n            hasProfile={hasProfile}\r\n            isLoading={isLoading}\r\n            onApprove={onApprove}\r\n            enableStatus={enableStatus}\r\n          />\r\n          <Box mt=\"24px\">\r\n            <IfoCardActions\r\n              poolId={poolId}\r\n              ifo={ifo}\r\n              publicIfoData={publicIfoData}\r\n              walletIfoData={walletIfoData}\r\n              hasProfile={hasProfile}\r\n              isLoading={isLoading}\r\n            />\r\n          \r\n          </Box>\r\n          <IfoCardDetails poolId={poolId} ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n        </CardBody>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SmallCard\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Flex, Heading, PocketWatchIcon, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport { PublicIfoData } from 'views/Ifos/types'\r\n\r\ninterface Props {\r\n  publicIfoData: PublicIfoData\r\n}\r\n\r\nconst GradientText = styled(Heading)`\r\n  background: -webkit-linear-gradient(#ffd800, #eb8c00);\r\n  background-clip: text;\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  -webkit-text-stroke: 1px rgba(0, 0, 0, 0.5);\r\n`\r\n\r\nconst FlexGap = styled(Flex)<{ gap: string }>`\r\n  gap: ${({ gap }) => gap};\r\n`\r\n\r\nexport const SoonTimer: React.FC<Props> = ({ publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, secondsUntilStart } = publicIfoData\r\n  const timeUntil = getTimePeriods(secondsUntilStart)\r\n  return (\r\n    <Flex justifyContent=\"center\" position=\"relative\">\r\n      {status === 'idle' ? (\r\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\r\n      ) : (\r\n        <>\r\n          <FlexGap gap=\"8px\" alignItems=\"center\">\r\n            <Heading as=\"h3\" scale=\"lg\" color=\"secondary\">\r\n              {t('Start in')}\r\n            </Heading>\r\n            <FlexGap gap=\"4px\" alignItems=\"baseline\">\r\n              {timeUntil.days ? (\r\n                <>\r\n                  <Heading scale=\"lg\" color=\"secondary\">\r\n                    {timeUntil.days}\r\n                  </Heading>\r\n                  <Text color=\"secondary\">{t('d')}</Text>\r\n                </>\r\n              ) : null}\r\n              {timeUntil.days || timeUntil.hours ? (\r\n                <>\r\n                  <Heading color=\"secondary\" scale=\"lg\">\r\n                    {timeUntil.hours}\r\n                  </Heading>\r\n                  <Text color=\"secondary\">{t('h')}</Text>\r\n                </>\r\n              ) : null}\r\n              <>\r\n                <Heading color=\"secondary\" scale=\"lg\">\r\n                  {timeUntil.minutes}\r\n                </Heading>\r\n                <Text color=\"secondary\">{t('m')}</Text>\r\n              </>\r\n            </FlexGap>\r\n          </FlexGap>\r\n        </>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst EndInHeading = styled(Heading)`\r\n  color: white;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  line-height: 1.1;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    font-size: 24px;\r\n  }\r\n`\r\n\r\nconst LiveNowHeading = styled(EndInHeading)`\r\n  color: white;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    background: -webkit-linear-gradient(#ffd800, #eb8c00);\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -webkit-text-stroke: 1px rgba(0, 0, 0, 0.5);\r\n  }\r\n`\r\n\r\nconst LiveTimer: React.FC<Props> = ({ publicIfoData }) => {\r\n  const { t } = useTranslation()\r\n  const { status, secondsUntilEnd } = publicIfoData\r\n  const timeUntil = getTimePeriods(secondsUntilEnd)\r\n  return (\r\n    <Flex justifyContent=\"center\" position=\"relative\">\r\n      {status === 'idle' ? (\r\n        <Skeleton animation=\"pulse\" variant=\"rect\" width=\"100%\" height=\"48px\" />\r\n      ) : (\r\n        <>\r\n          <PocketWatchIcon width=\"42px\" mr=\"8px\" />\r\n          <FlexGap gap=\"8px\" alignItems=\"center\">\r\n            <LiveNowHeading as=\"h3\">{`${t('Live Now').toUpperCase()}!`}</LiveNowHeading>\r\n            <EndInHeading as=\"h3\" scale=\"lg\" color=\"white\">\r\n              {t('Ends in')}\r\n            </EndInHeading>\r\n            <FlexGap gap=\"4px\" alignItems=\"baseline\">\r\n              {timeUntil.days ? (\r\n                <>\r\n                  <GradientText scale=\"lg\">{timeUntil.days}</GradientText>\r\n                  <Text color=\"white\">{t('d')}</Text>\r\n                </>\r\n              ) : null}\r\n              {timeUntil.days || timeUntil.hours ? (\r\n                <>\r\n                  <GradientText scale=\"lg\">{timeUntil.hours}</GradientText>\r\n                  <Text color=\"white\">{t('h')}</Text>\r\n                </>\r\n              ) : null}\r\n              <>\r\n                <GradientText scale=\"lg\">{timeUntil.minutes}</GradientText>\r\n                <Text color=\"white\">{t('m')}</Text>\r\n              </>\r\n            </FlexGap>\r\n          </FlexGap>\r\n        </>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default LiveTimer\r\n","import { Box, Flex, Heading, Progress, ProgressBar } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { PublicIfoData } from '../../types'\r\nimport LiveTimer, { SoonTimer } from './Timer'\r\n\r\nconst BigCurve = styled(Box)<{ $status: PublicIfoData['status'] }>`\r\n  width: 150%;\r\n  position: absolute;\r\n  top: -140%;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n\r\n  ${({ $status, theme }) => {\r\n    switch ($status) {\r\n      case 'coming_soon':\r\n        return `\r\n          background: transparent!important;\r\n        `\r\n      case 'live':\r\n        return `\r\n          background: transparent!important;\r\n        `\r\n      case 'finished':\r\n        return `\r\n          background: transparent!important;\r\n        `\r\n      default:\r\n        return ''\r\n    }\r\n  }}\r\n`\r\n\r\nexport const IfoRibbon = ({ publicIfoData }: { publicIfoData: PublicIfoData }) => {\r\n  const { status } = publicIfoData\r\n\r\n  let Component\r\n  if (status === 'finished') {\r\n    Component = <IfoRibbonEnd />\r\n  } else if (status === 'live') {\r\n    Component = <IfoRibbonLive publicIfoData={publicIfoData} />\r\n  } else if (status === 'coming_soon') {\r\n    Component = <IfoRibbonSoon publicIfoData={publicIfoData} />\r\n  }\r\n\r\n  if (status === 'idle') {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {status === 'live' && (\r\n        <Progress variant=\"flat\">\r\n          <ProgressBar\r\n            $useDark\r\n            $background=\"linear-gradient(273deg, #ffd800 -2.87%, #eb8c00 113.73%)\"\r\n            style={{ width: `${Math.min(Math.max(publicIfoData.progress, 0), 100)}%` }}\r\n          />\r\n        </Progress>\r\n      )}\r\n      <Flex\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        flexDirection=\"column\"\r\n        minHeight={['48px', '48px', '48px', '75px']}\r\n        position=\"relative\"\r\n        overflow=\"hidden\"\r\n      >\r\n        {Component}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nconst IfoRibbonEnd = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <BigCurve $status=\"finished\" />\r\n      <Box position=\"relative\">\r\n        <Heading as=\"h3\" scale=\"lg\" color=\"textSubtle\">\r\n          {t('Sacrifice Open!')}\r\n        </Heading>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nconst IfoRibbonSoon = ({ publicIfoData }: { publicIfoData: PublicIfoData }) => {\r\n  return (\r\n    <>\r\n      <BigCurve $status=\"coming_soon\" />\r\n      <Box position=\"relative\">\r\n        <Heading as=\"h3\" scale=\"lg\" color=\"secondary\">\r\n          <SoonTimer publicIfoData={publicIfoData} />\r\n        </Heading>\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nconst IfoRibbonLive = ({ publicIfoData }: { publicIfoData: PublicIfoData }) => {\r\n  return (\r\n    <>\r\n      <BigCurve $status=\"live\" />\r\n      <Box position=\"relative\">\r\n        <LiveTimer publicIfoData={publicIfoData} />\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Button } from '@pancakeswap/uikit'\r\nimport { Link } from 'react-router-dom'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport default function Navegation(){\r\n    const { account } = useWeb3React()\r\n    const { theme } = useTheme()\r\n    const { t } = useTranslation()\r\n    return (\r\n        <div className='header__aside'>\r\n            <Link to=\"/ifo3\">\r\n                <Button className=\"titulo__header transparent\" > {t('BNB Sacrifice')}</Button>\r\n            </Link>\r\n            <Link to=\"/ifos2\">\r\n                <Button className=\"titulo__header transparent\" >{t('LUSI Sacrifice')}</Button>\r\n            </Link> \r\n        </div>\r\n\r\n    );\r\n}","import {\r\n  Box,\r\n  Card,\r\n  CardBody,\r\n  CardFooter,\r\n  CardHeader,\r\n  ExpandableLabel,\r\n  ExpandableButton,\r\n  useMatchBreakpoints,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport {  Route } from 'react-router-dom'\r\n\r\n\r\n\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { useFastFresh } from 'hooks/useRefresh'\r\nimport useToast from 'hooks/useToast'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport styled from 'styled-components'\r\nimport { PublicIfoData, WalletIfoData } from 'views/Ifos/types'\r\nimport useIsWindowVisible from '../../../../hooks/useIsWindowVisible'\r\nimport useIfoApprove from '../../hooks/useIfoApprove'\r\nimport IfoAchievement from './Achievement'\r\nimport IfoPoolCard from './IfoPoolCard'\r\nimport { EnableStatus } from './types'\r\nimport { IfoRibbon } from './IfoRibbon'\r\nimport Swap from '../../../Page'\r\nimport './styles.css'\r\nimport Navegation2 from '../../../../components/Navegation2'\r\n\r\n\r\ninterface IfoFoldableCardProps {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}\r\n\r\nconst StyledCard = styled(Card)<{ $isCurrent?: boolean }>`\r\n  width: 100%;\r\n  margin: auto;\r\n  border-top-left-radius: 32px;\r\n  border-top-right-radius: 32px;\r\n\r\n  ${({ $isCurrent }) =>\r\n    $isCurrent &&\r\n    `\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n  > div {\r\n    border-top-left-radius: 0;\r\n    border-top-right-radius: 0;\r\n  }\r\n  `}\r\n\r\n  > div {\r\n    background: transparent!important;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    border-top-left-radius: 32px;\r\n    border-top-right-radius: 32px;\r\n\r\n    > div {\r\n      border-top-left-radius: 32px;\r\n      border-top-right-radius: 32px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Header = styled(CardHeader)<{ ifoId: string; $isCurrent?: boolean }>`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  height: ${({ $isCurrent }) => ($isCurrent ? '64px' : '112px')};\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n  border-top-left-radius: 32px;\r\n  border-top-right-radius: 32px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 112px;\r\n  }\r\n`\r\n// background-image: ${({ ifoId }) => `url('/images/ifos/${ifoId}-bg.svg'), url('/images/ifos/${ifoId}-bg.png')`};\r\n\r\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  ${({ theme }) => theme.mediaQueries.xxl} {\r\n    grid-template-columns: ${({ singleCard }) => (singleCard ? '1fr' : '1fr 1fr')};\r\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\r\n  }\r\n  background: transparent;\r\n`\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  padding: 24px 16px;\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    padding: 24px;\r\n  }\r\n  background: red;\r\n`\r\n\r\nconst StyledCardFooter = styled(CardFooter)`\r\n  padding: 0;\r\n  background: transparent;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledNoHatBunny = styled.div<{ $isLive: boolean; $isCurrent?: boolean }>`\r\n  position: absolute;\r\n  left: -24px;\r\n  z-index: 1;\r\n  top: 33px;\r\n\r\n  > img {\r\n    width: 78px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    top: ${({ $isLive }) => ($isLive ? '46px' : '33px')};\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    left: auto;\r\n    top: ${({ $isLive }) => ($isLive ? '61px' : '48px')};\r\n    right: ${({ $isCurrent }) => ($isCurrent ? '17px' : '90px')};\r\n\r\n    > img {\r\n      width: 80px;\r\n    }\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    right: ${({ $isCurrent }) => ($isCurrent ? '67px' : '90px')};\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.xxl} {\r\n    right: 90px;\r\n  }\r\n`\r\n\r\nconst NoHatBunny = ({ isLive, isCurrent }: { isLive?: boolean; isCurrent?: boolean }) => {\r\n  const { isXs, isSm, isMd } = useMatchBreakpoints()\r\n  const isSmallerThanTablet = isXs || isSm || isMd\r\n  if (isSmallerThanTablet && isLive) return null\r\n  return (\r\n    <StyledNoHatBunny $isLive={isLive} $isCurrent={isCurrent}>\r\n      <img\r\n        src={`/images/ifos/assets/bunnypop-${!isSmallerThanTablet ? 'right' : 'left'}.png`}\r\n        width={123}\r\n        height={162}\r\n        alt=\"bunny\"\r\n      />\r\n    </StyledNoHatBunny>\r\n  )\r\n}\r\n\r\n// Active Ifo\r\nexport const IfoCurrentCard = ({\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n}: {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const { t } = useTranslation()\r\n  const { isMobile } = useMatchBreakpoints()\r\n\r\n  const shouldShowBunny = publicIfoData.status === 'live' || publicIfoData.status === 'coming_soon'\r\n\r\n  return (\r\n    <>\r\n      {isMobile && (\r\n        <Box \r\n          className=\"sticky-header\"\r\n          bottom=\"48px\"\r\n          width=\"100%\"\r\n          maxWidth={['400px', '400px', '400px', '100%']}\r\n        >\r\n          {/* <Header $isCurrent ifoId={ifo.id} /> */}\r\n          <IfoRibbon publicIfoData={publicIfoData} />\r\n          {shouldShowBunny && <NoHatBunny isLive={publicIfoData.status === 'live'} />}\r\n         \r\n        </Box>\r\n      )}\r\n      \r\n      <Box className='glass' position=\"relative\" width=\"100%\" maxWidth={['400px', '400px', '400px', '100%']}>\r\n        {!isMobile && shouldShowBunny && <NoHatBunny isCurrent isLive={publicIfoData.status === 'live'} />}\r\n        <StyledCard className='transparent'  $isCurrent>\r\n          {!isMobile && (\r\n            <div className='_header_card'>\r\n              {/* <Header $isCurrent ifoId={ifo.id} /> */}\r\n              <IfoRibbon publicIfoData={publicIfoData} />\r\n            </div>\r\n          )}\r\n          <IfoCard  ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n          <StyledCardFooter className='transparent '>\r\n            <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\r\n              {isExpanded ? t('Hide') : t('Details')}\r\n            </ExpandableLabel>\r\n            {isExpanded && <IfoAchievement ifo={ifo} publicIfoData={publicIfoData} />}\r\n          </StyledCardFooter>\r\n        </StyledCard>\r\n      </Box>\r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nconst FoldableContent = styled.div<{ isVisible: boolean }>`\r\n  display: ${({ isVisible }) => (isVisible ? 'block' : 'none')};\r\n`\r\n\r\n// Past Ifo\r\nconst IfoFoldableCard = ({\r\n  ifo,\r\n  publicIfoData,\r\n  walletIfoData,\r\n}: {\r\n  ifo: Ifo\r\n  publicIfoData: PublicIfoData\r\n  walletIfoData: WalletIfoData\r\n}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      {isExpanded && isDesktop && <NoHatBunny isLive={false} />}\r\n      <Box as={StyledCard} borderRadius=\"32px\">\r\n        <Box position=\"relative\">\r\n          <Header ifoId={ifo.id}>\r\n            <ExpandableButton expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)} />\r\n          </Header>\r\n          {isExpanded && (\r\n            <>\r\n              <IfoRibbon publicIfoData={publicIfoData} />\r\n            </>\r\n          )}\r\n        </Box>\r\n        <FoldableContent isVisible={isExpanded}>\r\n          <IfoCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n          <IfoAchievement ifo={ifo} publicIfoData={publicIfoData} />\r\n        </FoldableContent>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst IfoCard: React.FC<IfoFoldableCardProps> = ({ ifo, publicIfoData, walletIfoData }) => {\r\n  const { currentBlock } = useBlock()\r\n  const { fetchIfoData: fetchPublicIfoData, isInitialized: isPublicIfoDataInitialized, secondsUntilEnd } = publicIfoData\r\n  const {\r\n    contract,\r\n    fetchIfoData: fetchWalletIfoData,\r\n    resetIfoData: resetWalletIfoData,\r\n    isInitialized: isWalletDataInitialized,\r\n  } = walletIfoData\r\n  const [enableStatus, setEnableStatus] = useState(EnableStatus.DISABLED)\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const raisingTokenContract = useERC20(ifo.currency.address)\r\n  // Continue to fetch 2 more minutes to get latest data\r\n  const isRecentlyActive =\r\n    (publicIfoData.status !== 'finished' || (publicIfoData.status === 'finished' && secondsUntilEnd >= -120)) &&\r\n    ifo.isActive\r\n  const onApprove = useIfoApprove(raisingTokenContract, contract.address)\r\n  const { toastSuccess, toastError } = useToast()\r\n  const fastRefresh = useFastFresh()\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  useEffect(() => {\r\n    if (isRecentlyActive || !isPublicIfoDataInitialized) {\r\n      fetchPublicIfoData(currentBlock)\r\n    }\r\n  }, [isRecentlyActive, isPublicIfoDataInitialized, fetchPublicIfoData, currentBlock])\r\n\r\n  useEffect(() => {\r\n    if (isWindowVisible && (isRecentlyActive || !isWalletDataInitialized)) {\r\n      if (account) {\r\n        fetchWalletIfoData()\r\n      }\r\n    }\r\n\r\n    if (!account && isWalletDataInitialized) {\r\n      resetWalletIfoData()\r\n    }\r\n  }, [\r\n    isWindowVisible,\r\n    account,\r\n    isRecentlyActive,\r\n    isWalletDataInitialized,\r\n    fetchWalletIfoData,\r\n    resetWalletIfoData,\r\n    fastRefresh,\r\n  ])\r\n\r\n  const handleApprove = async () => {\r\n    try {\r\n      setEnableStatus(EnableStatus.IS_ENABLING)\r\n      await onApprove(\r\n        (tx) => {\r\n          toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n        },\r\n        (receipt) => {\r\n          toastSuccess(\r\n            t('Successfully Enabled!'),\r\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n              {t('You can now participate in the %symbol% IFO.', { symbol: ifo.token.symbol })}\r\n            </ToastDescriptionWithTx>,\r\n          )\r\n        },\r\n        (receipt) => {\r\n          toastError(\r\n            t('Error'),\r\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n              {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\r\n            </ToastDescriptionWithTx>,\r\n          )\r\n        },\r\n      )\r\n      setEnableStatus(EnableStatus.ENABLED)\r\n    } catch (error) {\r\n      setEnableStatus(EnableStatus.DISABLED)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const checkAllowance = async () => {\r\n      try {\r\n        const response = await raisingTokenContract.allowance(account, contract.address)\r\n        const currentAllowance = new BigNumber(response.toString())\r\n        setEnableStatus(currentAllowance.lte(0) ? EnableStatus.DISABLED : EnableStatus.ENABLED)\r\n      } catch (error) {\r\n        setEnableStatus(EnableStatus.DISABLED)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      checkAllowance()\r\n    }\r\n  }, [account, raisingTokenContract, contract, setEnableStatus])\r\n\r\n  return (\r\n    \r\n    \r\n    <div className='transparent'>\r\n    <Navegation2 />\r\n      <div className='transparent'>\r\n        <CardsWrapper className='transparent change' singleCard={!publicIfoData.poolBasic || !walletIfoData.poolBasic}>\r\n          {publicIfoData.poolBasic && walletIfoData.poolBasic && (\r\n            <IfoPoolCard\r\n              poolId={PoolIds.poolBasic}\r\n              ifo={ifo}\r\n              publicIfoData={publicIfoData}\r\n              walletIfoData={walletIfoData}\r\n              onApprove={handleApprove}\r\n              enableStatus={enableStatus}\r\n            />\r\n          )}\r\n          {/* <IfoPoolCard\r\n            poolId={PoolIds.poolUnlimited}\r\n            ifo={ifo}\r\n            publicIfoData={publicIfoData}\r\n            walletIfoData={walletIfoData}\r\n            onApprove={handleApprove}\r\n            enableStatus={enableStatus}\r\n          /> */}\r\n        </CardsWrapper>\r\n      </div>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default IfoFoldableCard\r\n","import { Box } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst IfoLayout = styled(Box)`\r\n  > div:not(.sticky-header) {\r\n    margin-bottom: 32px;\r\n\r\n  }\r\n`\r\nexport const IfoLayoutWrapper = styled(IfoLayout)`\r\n  column-gap: 32px;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n    margin-top: 32px !important;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: minmax(300px, 1fr) minmax(462px, 2fr);\r\n  }\r\n\r\n  > div {\r\n    margin: 0 auto;\r\n    align-items: flex-start;\r\n    margin-top: 10px !important;\r\n\r\n  }\r\n`\r\n\r\nexport default IfoLayout\r\n","import {\r\n  Box,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  ExpandableButton,\r\n  Flex,\r\n  HelpIcon,\r\n  Text,\r\n  useMatchBreakpoints,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport Balance from 'components/Balance'\r\nimport { CompoundingPoolTag } from 'components/Tags'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\nimport tokens from 'config/constants/tokens'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useBUSDCakeAmount } from 'hooks/useBUSDPrice'\r\nimport React, { useState } from 'react'\r\nimport { useIfoPoolCredit, useIfoPoolVault, useIfoWithApr } from 'state/pools/hooks'\r\nimport { VaultKey } from 'state/types'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CakeVaultCard, { CreditCalcBlock } from 'views/Pools/components/CakeVaultCard'\r\nimport RecentCakeProfitCountdownRow from 'views/Pools/components/CakeVaultCard/RecentCakeProfitRow'\r\nimport UnstakingFeeCountdownRow from 'views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow'\r\nimport { IfoVaultCardAvgBalance } from 'views/Pools/components/CakeVaultCard/VaultCardActions'\r\nimport AprRow from 'views/Pools/components/PoolCard/AprRow'\r\nimport ExpandedFooter from 'views/Pools/components/PoolCard/CardFooter/ExpandedFooter'\r\nimport Staked from 'views/Pools/components/PoolsTable/ActionPanel/Stake'\r\nimport { ActionContainer } from 'views/Pools/components/PoolsTable/ActionPanel/styles'\r\nimport { convertSharesToCake } from '../../Pools/helpers'\r\nimport \"./styles.css\";\r\n\r\n\r\nconst StyledCardMobile = styled(Card)`\r\n  max-width: 400px;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledTokenContent = styled(Flex)`\r\n  ${Text} {\r\n    line-height: 1.2;\r\n    white-space: nowrap;\r\n  }\r\n`\r\n\r\nconst StyledCardFooter = styled(Box)`\r\n  padding: 16px;\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\nconst StyledCardBody = styled(CardBody)`\r\n  display: grid;\r\n  padding: 16px;\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  gap: 16px;\r\n  ${ActionContainer} {\r\n    margin: 0;\r\n    background-color: ${({ theme }) => theme.colors.invertedContrast};\r\n  }\r\n`\r\n\r\nconst IfoPoolVaultCardMobile: React.FC = () => {\r\n  const { pool } = useIfoWithApr()\r\n  const { account } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  const credit = useIfoPoolCredit()\r\n  const {\r\n    fees: { performanceFeeAsDecimal },\r\n    userData: { userShares, isLoading: userDataLoading },\r\n    pricePerFullShare,\r\n  } = useIfoPoolVault()\r\n\r\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\r\n\r\n  const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n  const cakeAsNumberBalance = getBalanceNumber(credit)\r\n  const stakedDollarValue = useBUSDCakeAmount(cakeAsNumberBalance)\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.'),\r\n    {\r\n      placement: 'bottom',\r\n    },\r\n  )\r\n  return (\r\n    <StyledCardMobile isActive>\r\n      <CardHeader p=\"16px\">\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <StyledTokenContent  alignItems=\"center\" flex={1}>\r\n            {/* <TokenPairImage width={24} height={24} primaryToken={tokens.cake} secondaryToken={tokens.cake} /> */}\r\n            <Box ml=\"8px\">\r\n              <Text fontSize=\"12px\" bold color=\"secondary\" textTransform=\"uppercase\">\r\n                {t('Sacrifice')}\r\n              </Text>\r\n              <Text small bold>\r\n              QBANKX Sacrifice\r\n              </Text>\r\n              <Text color=\"textSubtle\" fontSize=\"12px\">\r\n                {t('Sacrifice')} QBANKX\r\n              </Text>\r\n            </Box>\r\n          </StyledTokenContent>\r\n          <StyledTokenContent flexDirection=\"column\" flex={1}>\r\n            <Text color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('IFO Credit')}\r\n            </Text>\r\n            <Balance small bold decimals={3} value={cakeAsNumberBalance} />\r\n            <Balance\r\n              value={stakedDollarValue || 0}\r\n              fontSize=\"12px\"\r\n              color=\"textSubtle\"\r\n              decimals={2}\r\n              prefix=\"~\"\r\n              unit=\" USD\"\r\n            />\r\n          </StyledTokenContent>\r\n          <ExpandableButton expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)} />\r\n        </Flex>\r\n      </CardHeader>\r\n      {isExpanded && (\r\n        <>\r\n          <StyledCardBody>\r\n            <AprRow pool={pool} stakedBalance={cakeAsBigNumber} performanceFee={performanceFeeAsDecimal} />\r\n            <CreditCalcBlock />\r\n            <ActionContainer>\r\n              <IfoVaultCardAvgBalance />\r\n            </ActionContainer>\r\n            <Staked pool={pool} userDataLoaded={!userDataLoading} />\r\n            <ActionContainer>\r\n              <Box>\r\n                <RecentCakeProfitCountdownRow vaultKey={VaultKey.IfoPool} />\r\n              </Box>\r\n              <Box mt=\"8px\">\r\n                <UnstakingFeeCountdownRow vaultKey={VaultKey.IfoPool} />\r\n              </Box>\r\n            </ActionContainer>\r\n          </StyledCardBody>\r\n          <StyledCardFooter>\r\n            <ExpandedFooter account={account} pool={pool} />\r\n            <Flex alignItems=\"center\">\r\n              <CompoundingPoolTag />\r\n              {tooltipVisible && tooltip}\r\n              <Flex ref={targetRef}>\r\n                <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\r\n              </Flex>\r\n            </Flex>\r\n          </StyledCardFooter>\r\n        </>\r\n      )}\r\n    </StyledCardMobile>\r\n  )\r\n}\r\n\r\nconst IfoPoolVaultCard = () => {\r\n  const { pool } = useIfoWithApr()\r\n  const { isMd, isXs, isSm } = useMatchBreakpoints()\r\n  const isSmallerThanTablet = isMd || isXs || isSm\r\n  if (isSmallerThanTablet) {\r\n    return <CakeVaultCard pool={pool} showStakedOnly={false} m=\"auto\" />\r\n  }\r\n\r\n  return <CakeVaultCard pool={pool} showStakedOnly={false} m=\"auto\" />\r\n}\r\n\r\nexport default IfoPoolVaultCard\r\n","import { ifosConfig } from 'config/constants'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\n\r\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\r\nimport useGetWalletIfoV3Data from 'views/Ifos/hooks/v3/useGetWalletIfoData'\r\nimport Container from 'components/Layout/Container'\r\nimport { IfoCurrentCard } from './components/IfoFoldableCard'\r\nimport IfoLayout, { IfoLayoutWrapper } from './components/IfoLayout'\r\nimport IfoPoolVaultCard from './components/IfoPoolVaultCard'\r\nimport IfoQuestions from './components/IfoQuestions'\r\nimport IfoSteps from './components/IfoSteps'\r\nimport Navegation from '../../components/Navegation'\r\n\r\n\r\nconst IfoStepBackground = styled(Box)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n`\r\n\r\n/**\r\n * Note: currently there should be only 1 active IFO at a time\r\n */\r\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\r\n\r\nconst Ifo = () => {\r\n  const publicIfoData = useGetPublicIfoV2Data(activeIfo)\r\n  const walletIfoData = useGetWalletIfoV3Data(activeIfo)\r\n\r\n  return (\r\n   \r\n    <IfoLayout id=\"current-ifo\" py={['24px', '24px', '40px']}>\r\n      \r\n      <Container>\r\n        \r\n        <IfoLayoutWrapper>\r\n          <IfoPoolVaultCard />\r\n          \r\n          <IfoCurrentCard ifo={activeIfo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n        </IfoLayoutWrapper>\r\n      </Container>\r\n      {/* <IfoStepBackground>\r\n        <Container>\r\n          <IfoSteps isLive={publicIfoData.status === 'live'} ifo={activeIfo} walletIfoData={walletIfoData} />\r\n        </Container>\r\n      </IfoStepBackground>\r\n      <Container>\r\n        <IfoQuestions />\r\n      </Container> */}\r\n    </IfoLayout>\r\n  )\r\n}\r\n\r\nexport default Ifo\r\n","import React from 'react'\r\nimport useGetPublicIfoV1Data from 'views/Ifos/hooks/v1/useGetPublicIfoData'\r\nimport useGetWalletIfoV1Data from 'views/Ifos/hooks/v1/useGetWalletIfoData'\r\nimport { Ifo } from 'config/constants/types'\r\nimport IfoFoldableCard from './IfoFoldableCard'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n}\r\n\r\nconst IfoCardV1Data: React.FC<Props> = ({ ifo }) => {\r\n  const publicIfoData = useGetPublicIfoV1Data(ifo)\r\n  const walletIfoData = useGetWalletIfoV1Data(ifo)\r\n\r\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n}\r\n\r\nexport default IfoCardV1Data\r\n","import React from 'react'\r\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\r\nimport useGetWalletIfoV2Data from 'views/Ifos/hooks/v2/useGetWalletIfoData'\r\nimport { Ifo } from 'config/constants/types'\r\nimport IfoFoldableCard from './IfoFoldableCard'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n}\r\n\r\nconst IfoCardV2Data: React.FC<Props> = ({ ifo }) => {\r\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\r\n  const walletIfoData = useGetWalletIfoV2Data(ifo)\r\n\r\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n}\r\n\r\nexport default IfoCardV2Data\r\n","import React from 'react'\r\nimport useGetPublicIfoV2Data from 'views/Ifos/hooks/v2/useGetPublicIfoData'\r\nimport useGetWalletIfoV3Data from 'views/Ifos/hooks/v3/useGetWalletIfoData'\r\nimport { Ifo } from 'config/constants/types'\r\nimport IfoFoldableCard from './IfoFoldableCard'\r\n\r\ninterface Props {\r\n  ifo: Ifo\r\n}\r\n\r\nconst IfoCardV3Data: React.FC<Props> = ({ ifo }) => {\r\n  const publicIfoData = useGetPublicIfoV2Data(ifo)\r\n  const walletIfoData = useGetWalletIfoV3Data(ifo)\r\n\r\n  return <IfoFoldableCard ifo={ifo} publicIfoData={publicIfoData} walletIfoData={walletIfoData} />\r\n}\r\n\r\nexport default IfoCardV3Data\r\n","import { ifosConfig } from 'config/constants'\r\nimport { Ifo } from 'config/constants/types'\r\nimport React from 'react'\r\nimport IfoCardV1Data from './components/IfoCardV1Data'\r\nimport IfoCardV2Data from './components/IfoCardV2Data'\r\nimport IfoCardV3Data from './components/IfoCardV3Data'\r\nimport IfoLayout from './components/IfoLayout'\r\n\r\nconst inactiveIfo: Ifo[] = ifosConfig.filter((ifo) => !ifo.isActive)\r\n\r\nconst PastIfo = () => {\r\n  return (\r\n    <IfoLayout maxWidth=\"736px\" m=\"auto\" width=\"100%\" id=\"past-ifos\" py={['24px', '24px', '40px']}>\r\n      {inactiveIfo.map((ifo) => {\r\n        switch (ifo.version) {\r\n          case 1:\r\n            return <IfoCardV1Data key={ifo.id} ifo={ifo} />\r\n          case 2:\r\n            return <IfoCardV2Data key={ifo.id} ifo={ifo} />\r\n          case 3:\r\n            return <IfoCardV3Data key={ifo.id} ifo={ifo} />\r\n          default:\r\n            return null\r\n        }\r\n      })}\r\n    </IfoLayout>\r\n  )\r\n}\r\n\r\nexport default PastIfo\r\n","import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport Container from 'components/Layout/Container'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport React from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useFetchIfoPool } from 'state/pools/hooks'\r\nimport Hero from './components/Hero'\r\nimport CurrentIfo from './CurrentIfo'\r\nimport PastIfo from './PastIfo'\r\nimport Navegation from '../../components/Navegation'\r\n\r\n\r\nconst Ifos = () => {\r\n  const { t } = useTranslation()\r\n  const { path, isExact } = useRouteMatch()\r\n\r\n  useFetchIfoPool()\r\n\r\n  return (\r\n    <>\r\n    \r\n      {/* <SubMenuItems\r\n        items={[\r\n          {\r\n            label: t('Latest'),\r\n            href: '/ifo',\r\n          },\r\n          {\r\n            label: t('Finished'),\r\n            href: '/ifo/history',\r\n          },\r\n        ]}\r\n        activeItem={isExact ? '/ifo' : '/ifo/history'}\r\n      /> */}\r\n      <>\r\n        {/* <Hero /> */}\r\n        <Route exact path={`${path}`}>\r\n      \r\n          <CurrentIfo />\r\n        \r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          <Container>\r\n            <PastIfo />\r\n          </Container>\r\n        </Route>\r\n      </>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Ifos\r\n"],"sourceRoot":""}