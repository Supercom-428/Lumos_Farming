{"version":3,"sources":["views/Nft/market/components/BuySellModals/BuyModal/types.ts","views/Nft/market/components/BuySellModals/BuyModal/styles.tsx","views/Nft/market/components/BuySellModals/BuyModal/ReviewStage.tsx","views/Nft/market/components/BuySellModals/BuyModal/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/MainPancakeBunnyCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/ExpandableCard.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ManagePancakeBunniesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/PropertiesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/DetailsCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/MoreFromThisCollection.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/ForSaleTableRows.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/CountdownCircle.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/UpdateIndicator.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/utils.ts","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/MainNFTCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/ManageNFTsCard.tsx","views/Nft/market/hooks/useNftOwner.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/OwnerCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/ActivityCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/index.tsx","views/Nft/market/hooks/useGetCollectionDistribution.tsx","views/Nft/market/ActivityHistory/utils/sortActivity.tsx","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts"],"names":["PaymentCurrency","BuyingStage","StyledModal","styled","Modal","stage","theme","APPROVE_AND_CONFIRM","CONFIRM","colors","textSubtle","BorderedBox","Grid","background","cardBorder","radii","default","BnbAmountCell","bnbAmount","isLoading","isInsufficient","bnbBusdPrice","useBNBBusdPrice","flexDirection","justifySelf","width","height","mb","usdAmount","multiplyPriceByAmount","justifyContent","mr","bold","color","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","small","textAlign","ReviewStage","nftToBuy","paymentCurrency","setPaymentCurrency","nftPrice","walletBalance","walletFetchStatus","notEnoughBnbForPurchase","continueToNextStage","t","useTranslation","account","useWeb3React","px","pt","src","image","thumbnail","fontSize","collectionName","name","alignItems","p","as","Link","scale","external","variant","href","getBscScanLinkForNft","collectionAddress","tokenId","activeIndex","onItemClick","index","symbol","BNB","FetchStatus","Fetched","ConnectWalletButton","my","pb","onClick","disabled","style","symbol1","symbol2","modalTitles","REVIEW","TX_CONFIRMED","BuyModal","onDismiss","useState","setStage","confirmedTxHash","setConfirmedTxHash","isPaymentCurrentInitialized","setIsPaymentCurrentInitialized","useTheme","callWithGasPrice","useCallWithGasPrice","wbnbContract","useERC20","tokens","wbnb","address","nftMarketContract","useNftMarketContract","toastSuccess","useToast","dispatch","useAppDispatch","nftPriceWei","parseUnits","marketData","currentAskPrice","parseFloat","useGetBnbBalance","bnbBalance","balance","bnbFetchStatus","fetchStatus","formattedBnbBalance","formatEther","useTokenBalance","wbnbBalance","wbnbFetchStatus","formattedWbnbBalance","getBalanceNumber","lt","ethersToBigNumber","useEffect","gte","WBNB","useApproveConfirmTransaction","onRequiresApproval","a","allowance","currentAllowance","gt","onApprove","ethers","constants","MaxUint256","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","payAmount","Number","isNaN","BigNumber","from","value","onSuccess","addUserNft","nftLocation","NftLocation","WALLET","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","ConfirmStage","TransactionConfirmed","MainPancakeBunnyCard","cheapestNft","cheapestNftFromOtherSellers","nothingForSaleBunny","nftToDisplay","onlyOwnNftsOnSale","hasListings","priceInUsd","useModal","onPresentBuyModal","SellModal","nftToSell","onPresentAdjustPriceModal","actionButton","minWidth","mt","flex","to","nftsBaseUrl","description","formatNumber","maxWidth","NFTMedia","nft","expandAnimation","keyframes","collapseAnimation","ExpandableCardBody","Box","expanded","css","FullWidthCard","Card","ExpandableCard","icon","content","setExpanded","gridTemplateColumns","borderBottom","prev","ScrollableContainer","Divider","div","LocationColors","FORSALE","PROFILE","LocationIcons","SellIcon","WalletFilledIcon","CameraIcon","CollectibleRow","lowestPrice","modalVariant","location","ProfileNftModal","onPresentProfileNftModal","onPresentModal","mx","CollectiblesByLocation","nfts","IconComponent","display","map","ManagePancakeBunniesCard","bunnyId","useUserNfts","userNftsInitializationState","userNfts","useFetchUserNfts","bunniesInWallet","filter","attributes","bunniesForSale","profilePicBunny","loading","UserNftInitializationState","INITIALIZED","useHasNoBunnies","length","totalBunnies","totalBunniesText","KNOWN_TRAITS_TEXT","SingleProperty","rarity","textTransform","toFixed","PropertiesCard","properties","property","traitType","LongTextContainer","Text","DetailsCard","contractAddress","ipfsJson","count","chainId","useActiveWeb3React","ipfsLink","uriToHttp","getBscScanLink","SwiperCircle","isActive","secondary","textDisabled","StyledSwiper","mediaQueries","md","MoreFromThisCollection","currentTokenName","swiperRef","setSwiperRef","setActiveIndex","useMatchBreakpoints","isMobile","isMd","isLg","allPancakeBunnyNfts","useAllPancakeBunnyNfts","collectionNfts","useNftsFromCollection","isPBCollection","isAddress","pancakeBunniesAddress","fetchNftsFromCollections","page","size","nftsToShow","useMemo","shuffle","isTradable","slidesPerView","maxPageIndex","reduce","nftArray","current","find","push","slice","spaceBetween","onSwiper","onActiveIndexChange","newActiveIndex","Math","ceil","slidesPerGroup","initialSlide","slidePrev","Array","keys","slideTo","goToSlide","slideNext","OwnersTableRow","Row","ownNft","currentSeller","toLowerCase","pl","ProfileCell","accountAddress","ForSaleTableRow","nftsForSale","countdownAnimation","CountdownContainer","primaryBright","CountdownCircle","secondsRemaining","isUpdating","lineHeight","r","cx","cy","UpdateIndicator","setSecondsRemaining","isFetchingMorePancakeBunnies","useLoadingState","isUpdatingPancakeBunnies","useTooltip","placement","tooltip","tooltipVisible","targetRef","intervalId","setInterval","clearInterval","ref","StyledCard","hasManyPages","ForSaleTableCard","totalForSale","loadMore","isFetchingMoreNfts","priceSort","togglePriceSort","setPage","itemsPerPage","needsExtraPage","maxPage","floor","nftsOnCurrentPage","switchPage","pageNumber","loadMoreButton","ml","num","py","type","ForSaleTableRows","IndividualPancakeBunnyPage","setNothingForSaleBunny","allBunnies","useGetAllBunniesByBunnyId","setPriceSort","previousPriceSort","usePreviousValue","useFetchByBunnyIdAndUpdate","latestPancakeBunniesUpdateAt","fetchMorePancakeBunnies","fastRefresh","useFastFresh","isWindowVisible","useIsWindowVisible","bunniesSortedByPrice","orderBy","allBunniesFromOtherSellers","bunny","cheapestBunny","cheapestBunnyFromOtherSellers","prevBunnyId","usePrevious","useGetCollectionDistributionPB","distributionData","data","totalBunnyCount","total","isFetchingDistribution","isFetching","msSinceLastUpdate","Date","now","PANCAKE_BUNNIES_UPDATE_FREQUENCY","getNftsFromCollectionApi","collection","displayType","fetchBasicBunnyData","sortedNfts","sort","nftA","nftB","nftPriceA","nftPriceB","sortNFTsByPriceBuilder","PageLoader","propertyRarity","tokenCount","Page","metadataUrl","currentValue","MainNFTCard","isOwnNft","nftIsProfilePic","currentAskPriceAsNumber","onPresentSellModal","EditProfileModal","onEditProfileModal","ownerButtons","CollectibleByLocation","ManageNFTsCard","hasThisNft","useNftOwner","owner","setOwner","isLoadingOwner","setIsLoadingOwner","collectionContract","useErc721CollectionContract","getOwner","ownerOf","tokenOwner","OwnerRow","OwnerCard","padding","ActivityCard","currentPage","setCurrentPage","setMaxPages","activitiesSlice","setActivitiesSlice","sortedTokenActivities","setSortedTokenActivities","setIsLoading","isXs","isSm","getTokenActivity","tokenActivity","sortActivity","console","error","fetchTokenActivity","max","getMaxPages","getActivitySlice","TableLoader","activity","ActivityRow","isNftActivity","timestamp","borderTop","NoNftsImage","OwnerActivityContainer","Flex","IndividualNFTPage","setNft","setIsOwnNft","useGetCollectionDistribution","fetchNftData","getNftApi","metadata","getNftsMarketData","nftOwnedByConnectedUser","userNft","userProfilePicture","Object","rarityMap","sum","values","nftAttributeValue","attribute","IndividualNFTPageRouter","useParams","state","setState","prevState","apiResponse","tokenIds","attributesDistribution","totalCountCall","getPancakeRabbitsAddress","bunnyCountCalls","params","bunnyContractCalls","concat","multicallv2","pancakeRabbitsAbi","response","tokenListResponse","obj","toNumber","entries","tokenData","fetchTokens","getCollectionDistributionApi","askOrders","transactions","allActivity","askOrderHistory","marketEvent","orderType","AskOrderType","CANCEL","MarketEvent","MODIFY","NEW","getAskOrderEvent","price","askPrice","tx","id","seller","transactionHistory","SELL","buyer","activityItem1","activityItem2","timestamp1","sub","setAllPancakeBunnyNfts","bunnyIds","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","meta","updatedAt","fetchPancakeBunnies"],"mappings":"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","file":"static/js/23.89ea32c3.chunk.js","sourcesContent":["import { TokenMarketData, Image } from 'state/nftMarket/types'\r\n\r\nexport enum PaymentCurrency {\r\n  BNB,\r\n  WBNB,\r\n}\r\n\r\nexport enum BuyingStage {\r\n  REVIEW,\r\n  APPROVE_AND_CONFIRM,\r\n  CONFIRM,\r\n  TX_CONFIRMED,\r\n}\r\n\r\nexport interface BuyNFT {\r\n  collection: {\r\n    address: string\r\n    name: string\r\n  }\r\n  token: TokenMarketData\r\n  name: string\r\n  image: Image\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Grid, Flex, Text, BinanceIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { BuyingStage } from './types'\r\n\r\nexport const StyledModal = styled(Modal)<{ stage: BuyingStage }>`\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n  & h2:first-of-type {\r\n    ${({ stage, theme }) =>\r\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\r\n        ? `color: ${theme.colors.textSubtle}`\r\n        : null};\r\n  }\r\n  & svg:first-of-type {\r\n    ${({ stage, theme }) =>\r\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\r\n        ? `fill: ${theme.colors.textSubtle}`\r\n        : null};\r\n  }\r\n`\r\n\r\nexport const BorderedBox = styled(Grid)`\r\n  margin: 16px 0;\r\n  padding: 16px;\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-row-gap: 8px;\r\n`\r\n\r\ninterface BnbAmountCellProps {\r\n  bnbAmount: number\r\n  isLoading?: boolean\r\n  isInsufficient?: boolean\r\n}\r\n\r\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount, isLoading, isInsufficient }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  if (isLoading) {\r\n    return (\r\n      <Flex flexDirection=\"column\" justifySelf=\"flex-end\">\r\n        <Skeleton width=\"86px\" height=\"20px\" mb=\"6px\" />\r\n        <Skeleton width=\"86px\" height=\"20px\" />\r\n      </Flex>\r\n    )\r\n  }\r\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\r\n  return (\r\n    <Flex justifySelf=\"flex-end\" flexDirection=\"column\">\r\n      <Flex justifyContent=\"flex-end\">\r\n        <BinanceIcon height={16} width={16} mr=\"4px\" />\r\n        <Text bold color={isInsufficient ? 'failure' : 'text'}>{`${bnbAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 5,\r\n        })}`}</Text>\r\n      </Flex>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        {`($${usdAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { Flex, Text, Button, ButtonMenu, ButtonMenuItem, Message, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport { Divider, RoundedImage } from '../shared/styles'\r\nimport { BorderedBox, BnbAmountCell } from './styles'\r\nimport { PaymentCurrency } from './types'\r\n\r\ninterface ReviewStageProps {\r\n  nftToBuy: NftToken\r\n  paymentCurrency: PaymentCurrency\r\n  setPaymentCurrency: (index: number) => void\r\n  nftPrice: number\r\n  walletBalance: number\r\n  walletFetchStatus: FetchStatus\r\n  notEnoughBnbForPurchase: boolean\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst ReviewStage: React.FC<ReviewStageProps> = ({\r\n  nftToBuy,\r\n  paymentCurrency,\r\n  setPaymentCurrency,\r\n  nftPrice,\r\n  walletBalance,\r\n  walletFetchStatus,\r\n  notEnoughBnbForPurchase,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  return (\r\n    <>\r\n      <Flex px=\"24px\" pt=\"24px\" flexDirection=\"column\">\r\n        <Flex>\r\n          <RoundedImage src={nftToBuy.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Flex flexDirection=\"column\" justifyContent=\"space-evenly\">\r\n            <Text color=\"textSubtle\" fontSize=\"12px\">\r\n              {nftToBuy.collectionName}\r\n            </Text>\r\n            <Text bold>{nftToBuy.name}</Text>\r\n            <Flex alignItems=\"center\">\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" p=\"0px\" height=\"16px\" mr=\"4px\">\r\n                {t('Token ID:')}\r\n              </Text>\r\n              <Button\r\n                as={Link}\r\n                scale=\"xs\"\r\n                px=\"0px\"\r\n                pt=\"2px\"\r\n                external\r\n                variant=\"text\"\r\n                href={getBscScanLinkForNft(nftToBuy.collectionAddress, nftToBuy.tokenId)}\r\n              >\r\n                {nftToBuy.tokenId}\r\n              </Button>\r\n            </Flex>\r\n          </Flex>\r\n        </Flex>\r\n        <BorderedBox>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Pay with')}\r\n          </Text>\r\n          <ButtonMenu\r\n            activeIndex={paymentCurrency}\r\n            onItemClick={(index) => setPaymentCurrency(index)}\r\n            scale=\"sm\"\r\n            variant=\"subtle\"\r\n          >\r\n            <ButtonMenuItem>BNB</ButtonMenuItem>\r\n            <ButtonMenuItem>WBNB</ButtonMenuItem>\r\n          </ButtonMenu>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Total payment')}\r\n          </Text>\r\n          <BnbAmountCell bnbAmount={nftPrice} />\r\n          <Text small color=\"textSubtle\">\r\n            {t('%symbol% in wallet', { symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB' })}\r\n          </Text>\r\n          {!account ? (\r\n            <Flex justifySelf=\"flex-end\">\r\n              <ConnectWalletButton scale=\"sm\" />\r\n            </Flex>\r\n          ) : (\r\n            <BnbAmountCell\r\n              bnbAmount={walletBalance}\r\n              isLoading={walletFetchStatus !== FetchStatus.Fetched}\r\n              isInsufficient={walletFetchStatus === FetchStatus.Fetched && notEnoughBnbForPurchase}\r\n            />\r\n          )}\r\n        </BorderedBox>\r\n        {walletFetchStatus === FetchStatus.Fetched && notEnoughBnbForPurchase && (\r\n          <Message p=\"8px\" variant=\"danger\">\r\n            <Text>\r\n              {t('Not enough %symbol% to purchase this NFT', {\r\n                symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB',\r\n              })}\r\n            </Text>\r\n          </Message>\r\n        )}\r\n        <Flex alignItems=\"center\">\r\n          <Text my=\"16px\" mr=\"4px\">\r\n            {t('Convert between BNB and WBNB for free')}:\r\n          </Text>\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href=\"/swap?inputCurrency=BNB&outputCurrency=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\r\n          >\r\n            {t('Convert')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\">\r\n        <Button\r\n          onClick={continueToNextStage}\r\n          disabled={walletFetchStatus !== FetchStatus.Fetched || notEnoughBnbForPurchase}\r\n          mb=\"8px\"\r\n        >\r\n          {t('Checkout')}\r\n        </Button>\r\n        <Button as={Link} external style={{ width: '100%' }} href=\"/swap?outputCurrency=BNB\" variant=\"secondary\">\r\n          {t('Get %symbol1% or %symbol2%', { symbol1: 'BNB', symbol2: 'WBNB' })}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReviewStage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { ethersToBigNumber } from 'utils/bigNumber'\r\nimport tokens from 'config/constants/tokens'\r\nimport { parseUnits, formatEther } from 'ethers/lib/utils'\r\nimport { useERC20, useNftMarketContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useAppDispatch } from 'state'\r\nimport { addUserNft } from 'state/nftMarket/reducer'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { StyledModal } from './styles'\r\nimport ReviewStage from './ReviewStage'\r\nimport ConfirmStage from '../shared/ConfirmStage'\r\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\r\nimport { PaymentCurrency, BuyingStage } from './types'\r\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\r\n\r\nconst modalTitles = {\r\n  [BuyingStage.REVIEW]: 'Review',\r\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\r\n  [BuyingStage.CONFIRM]: 'Back',\r\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed',\r\n}\r\n\r\ninterface BuyModalProps extends InjectedModalProps {\r\n  nftToBuy: NftToken\r\n}\r\n\r\nconst BuyModal: React.FC<BuyModalProps> = ({ nftToBuy, onDismiss }) => {\r\n  const [stage, setStage] = useState(BuyingStage.REVIEW)\r\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\r\n  const [paymentCurrency, setPaymentCurrency] = useState<PaymentCurrency>(PaymentCurrency.BNB)\r\n  const [isPaymentCurrentInitialized, setIsPaymentCurrentInitialized] = useState(false)\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const { account } = useWeb3React()\r\n  const wbnbContract = useERC20(tokens.wbnb.address)\r\n  const nftMarketContract = useNftMarketContract()\r\n\r\n  const { toastSuccess } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether')\r\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice)\r\n\r\n  // BNB - returns ethers.BigNumber\r\n  const { balance: bnbBalance, fetchStatus: bnbFetchStatus } = useGetBnbBalance()\r\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance))\r\n  // WBNB - returns BigNumber\r\n  const { balance: wbnbBalance, fetchStatus: wbnbFetchStatus } = useTokenBalance(tokens.wbnb.address)\r\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance)\r\n\r\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance\r\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus\r\n\r\n  const notEnoughBnbForPurchase =\r\n    paymentCurrency === PaymentCurrency.BNB\r\n      ? bnbBalance.lt(nftPriceWei)\r\n      : wbnbBalance.lt(ethersToBigNumber(nftPriceWei))\r\n\r\n  useEffect(() => {\r\n    if (bnbBalance.lt(nftPriceWei) && wbnbBalance.gte(ethersToBigNumber(nftPriceWei)) && !isPaymentCurrentInitialized) {\r\n      setPaymentCurrency(PaymentCurrency.WBNB)\r\n      setIsPaymentCurrentInitialized(true)\r\n    }\r\n  }, [bnbBalance, wbnbBalance, nftPriceWei, isPaymentCurrentInitialized])\r\n\r\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\r\n    onRequiresApproval: async () => {\r\n      try {\r\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address)\r\n        return currentAllowance.gt(0)\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    },\r\n    onApprove: () => {\r\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256])\r\n    },\r\n    onApproveSuccess: async ({ receipt }) => {\r\n      toastSuccess(\r\n        t('Contract approved - you can now buy NFT with WBNB!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n    onConfirm: () => {\r\n      const payAmount = Number.isNaN(nftPrice)\r\n        ? ethers.BigNumber.from(0)\r\n        : parseUnits(nftToBuy.marketData.currentAskPrice)\r\n      if (paymentCurrency === PaymentCurrency.BNB) {\r\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\r\n          value: payAmount,\r\n        })\r\n      }\r\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [\r\n        nftToBuy.collectionAddress,\r\n        nftToBuy.tokenId,\r\n        payAmount,\r\n      ])\r\n    },\r\n    onSuccess: async ({ receipt }) => {\r\n      setConfirmedTxHash(receipt.transactionHash)\r\n      setStage(BuyingStage.TX_CONFIRMED)\r\n      dispatch(\r\n        addUserNft({\r\n          tokenId: nftToBuy.tokenId,\r\n          collectionAddress: nftToBuy.collectionAddress,\r\n          nftLocation: NftLocation.WALLET,\r\n        }),\r\n      )\r\n      toastSuccess(\r\n        t('Your NFT has been sent to your wallet'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n  })\r\n\r\n  const continueToNextStage = () => {\r\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\r\n      setStage(BuyingStage.APPROVE_AND_CONFIRM)\r\n    } else {\r\n      setStage(BuyingStage.CONFIRM)\r\n    }\r\n  }\r\n\r\n  const goBack = () => {\r\n    setStage(BuyingStage.REVIEW)\r\n  }\r\n\r\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM\r\n\r\n  return (\r\n    <StyledModal\r\n      title={t(modalTitles[stage])}\r\n      stage={stage}\r\n      onDismiss={onDismiss}\r\n      onBack={showBackButton ? goBack : null}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stage === BuyingStage.REVIEW && (\r\n        <ReviewStage\r\n          nftToBuy={nftToBuy}\r\n          paymentCurrency={paymentCurrency}\r\n          setPaymentCurrency={setPaymentCurrency}\r\n          nftPrice={nftPrice}\r\n          walletBalance={walletBalance}\r\n          walletFetchStatus={walletFetchStatus}\r\n          notEnoughBnbForPurchase={notEnoughBnbForPurchase}\r\n          continueToNextStage={continueToNextStage}\r\n        />\r\n      )}\r\n      {stage === BuyingStage.APPROVE_AND_CONFIRM && (\r\n        <ApproveAndConfirmStage\r\n          variant=\"buy\"\r\n          handleApprove={handleApprove}\r\n          isApproved={isApproved}\r\n          isApproving={isApproving}\r\n          isConfirming={isConfirming}\r\n          handleConfirm={handleConfirm}\r\n        />\r\n      )}\r\n      {stage === BuyingStage.CONFIRM && <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />}\r\n      {stage === BuyingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default BuyModal\r\n","import React from 'react'\r\nimport { Flex, Box, Card, CardBody, Text, Button, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport NFTMedia from 'views/Nft/market/components/NFTMedia'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport { nftsBaseUrl } from '../../../constants'\r\nimport { Container, CollectionLink } from '../shared/styles'\r\n\r\ninterface MainPancakeBunnyCardProps {\r\n  cheapestNft: NftToken\r\n  cheapestNftFromOtherSellers?: NftToken\r\n  nothingForSaleBunny?: NftToken\r\n}\r\n\r\nconst MainPancakeBunnyCard: React.FC<MainPancakeBunnyCardProps> = ({\r\n  cheapestNft,\r\n  cheapestNftFromOtherSellers,\r\n  nothingForSaleBunny,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const nftToDisplay = cheapestNftFromOtherSellers || cheapestNft || nothingForSaleBunny\r\n\r\n  const onlyOwnNftsOnSale = !cheapestNftFromOtherSellers\r\n  const hasListings = cheapestNftFromOtherSellers || cheapestNft\r\n\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nftToDisplay.marketData?.currentAskPrice))\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nftToDisplay} />)\r\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={cheapestNft} />)\r\n\r\n  const actionButton = onlyOwnNftsOnSale ? (\r\n    <Button\r\n      variant=\"danger\"\r\n      minWidth=\"168px\"\r\n      width={['100%', null, 'max-content']}\r\n      mt=\"24px\"\r\n      onClick={onPresentAdjustPriceModal}\r\n    >\r\n      {t('Adjust Sale Price')}\r\n    </Button>\r\n  ) : (\r\n    <Button\r\n      disabled={onlyOwnNftsOnSale}\r\n      minWidth=\"168px\"\r\n      width={['100%', null, 'max-content']}\r\n      mt=\"24px\"\r\n      onClick={onPresentBuyModal}\r\n    >\r\n      {t('Buy')}\r\n    </Button>\r\n  )\r\n  return (\r\n    <Card mb=\"40px\">\r\n      <CardBody>\r\n        <Container flexDirection={['column-reverse', null, 'row']}>\r\n          <Flex flex=\"2\">\r\n            <Box>\r\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nftToDisplay.collectionAddress}`}>\r\n                {nftToDisplay.collectionName}\r\n              </CollectionLink>\r\n              <Text fontSize=\"40px\" bold mt=\"12px\">\r\n                {nftToDisplay.name}\r\n              </Text>\r\n              <Text mt={['16px', '16px', '48px']}>{t(nftToDisplay.description)}</Text>\r\n              {(cheapestNft || cheapestNftFromOtherSellers) && (\r\n                <>\r\n                  <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\r\n                    {t('Lowest price')}\r\n                  </Text>\r\n                  <Flex alignItems=\"center\" mt=\"8px\">\r\n                    <BinanceIcon width={18} height={18} mr=\"4px\" />\r\n                    <Text fontSize=\"24px\" bold mr=\"4px\">\r\n                      {formatNumber(parseFloat(nftToDisplay.marketData?.currentAskPrice), 0, 5)}\r\n                    </Text>\r\n                    {bnbBusdPrice ? (\r\n                      <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\r\n                        minimumFractionDigits: 2,\r\n                        maximumFractionDigits: 2,\r\n                      })} USD)`}</Text>\r\n                    ) : (\r\n                      <Skeleton width=\"64px\" />\r\n                    )}\r\n                  </Flex>\r\n                </>\r\n              )}\r\n              {hasListings && actionButton}\r\n            </Box>\r\n          </Flex>\r\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\" maxWidth={440}>\r\n            <NFTMedia key={nftToDisplay.name} nft={nftToDisplay} width={440} height={440} />\r\n          </Flex>\r\n        </Container>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default MainPancakeBunnyCard\r\n","import React, { useState } from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { Grid, Text, Card, Box, ChevronUpIcon, ChevronDownIcon, IconButton } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 720px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 710px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst ExpandableCardBody = styled(Box)<{ expanded: boolean }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n`\r\n\r\nconst FullWidthCard = styled(Card)`\r\n  width: 100%;\r\n`\r\n\r\ninterface ExpandableCardProps {\r\n  icon: React.ReactNode\r\n  title: string\r\n  content: React.ReactNode\r\n}\r\n\r\nconst ExpandableCard: React.FC<ExpandableCardProps> = ({ icon, title, content }) => {\r\n  const [expanded, setExpanded] = useState(true)\r\n  const { theme } = useTheme()\r\n  return (\r\n    <FullWidthCard>\r\n      <Grid\r\n        gridTemplateColumns=\"1fr 8fr 1fr\"\r\n        alignItems=\"center\"\r\n        height=\"72px\"\r\n        px=\"24px\"\r\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\r\n      >\r\n        {icon}\r\n        <Text bold>{title}</Text>\r\n        <IconButton\r\n          onClick={() => {\r\n            setExpanded((prev) => !prev)\r\n          }}\r\n          variant=\"text\"\r\n          maxWidth=\"32px\"\r\n        >\r\n          {expanded ? (\r\n            <ChevronUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n          ) : (\r\n            <ChevronDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n          )}\r\n        </IconButton>\r\n      </Grid>\r\n      <ExpandableCardBody expanded={expanded}>{content}</ExpandableCardBody>\r\n    </FullWidthCard>\r\n  )\r\n}\r\n\r\nexport default ExpandableCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  Text,\r\n  CogIcon,\r\n  SellIcon,\r\n  WalletFilledIcon,\r\n  CameraIcon,\r\n  BinanceIcon,\r\n  Skeleton,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableCard from '../shared/ExpandableCard'\r\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport ProfileNftModal from '../../../components/ProfileNftModal'\r\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\r\n\r\nconst ScrollableContainer = styled(Box)`\r\n  overflow-y: auto;\r\n  max-height: 224px;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  margin: 16px 20px;\r\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\r\n`\r\n\r\nconst LocationColors = {\r\n  [NftLocation.FORSALE]: 'failure',\r\n  [NftLocation.WALLET]: 'secondary',\r\n  [NftLocation.PROFILE]: 'textSubtle',\r\n}\r\n\r\nconst LocationIcons = {\r\n  [NftLocation.FORSALE]: SellIcon,\r\n  [NftLocation.WALLET]: WalletFilledIcon,\r\n  [NftLocation.PROFILE]: CameraIcon,\r\n}\r\n\r\ninterface CollectibleRowProps {\r\n  nft: NftToken\r\n  lowestPrice: string\r\n}\r\n\r\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft, lowestPrice }) => {\r\n  const { t } = useTranslation()\r\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\r\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\r\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\r\n  return (\r\n    <CollectibleRowContainer\r\n      gridTemplateColumns=\"96px 1fr\"\r\n      px=\"16px\"\r\n      pb=\"8px\"\r\n      my=\"16px\"\r\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\r\n    >\r\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\r\n      <Grid gridTemplateColumns=\"1fr 1fr\">\r\n        <Text bold>{nft.name}</Text>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n          {nft.collectionName}\r\n        </Text>\r\n        {lowestPrice && (\r\n          <>\r\n            <Text small color=\"textSubtle\">\r\n              {t('Lowest price')}\r\n            </Text>\r\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\r\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\r\n              <Text small>{formatNumber(parseFloat(lowestPrice), 0, 5)}</Text>\r\n            </Flex>\r\n          </>\r\n        )}\r\n        {nft.location === NftLocation.FORSALE ? (\r\n          <>\r\n            <Text small color=\"textSubtle\">\r\n              {t('Your price')}\r\n            </Text>\r\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\r\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\r\n              <Text small>{nft.marketData.currentAskPrice}</Text>\r\n            </Flex>\r\n          </>\r\n        ) : (\r\n          <Text small color=\"textDisabled\">\r\n            {t('Not on sale')}\r\n          </Text>\r\n        )}\r\n      </Grid>\r\n    </CollectibleRowContainer>\r\n  )\r\n}\r\n\r\ninterface CollectiblesByLocationProps {\r\n  location: NftLocation\r\n  nfts: NftToken[]\r\n  lowestPrice: string\r\n}\r\n\r\nconst CollectiblesByLocation: React.FC<CollectiblesByLocationProps> = ({ location, nfts, lowestPrice }) => {\r\n  const { t } = useTranslation()\r\n  const IconComponent = LocationIcons[location]\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\r\n        <IconComponent color={LocationColors[location]} width=\"24px\" height=\"24px\" />\r\n        <Text display=\"inline\" bold color={LocationColors[location]}>\r\n          {t(location)}\r\n        </Text>\r\n      </Grid>\r\n      <ScrollableContainer>\r\n        {nfts.map((nft) => (\r\n          <CollectibleRow key={nft.tokenId} nft={nft} lowestPrice={lowestPrice} />\r\n        ))}\r\n      </ScrollableContainer>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface ManagePancakeBunniesCardProps {\r\n  bunnyId: string\r\n  lowestPrice?: string\r\n}\r\n\r\nconst ManagePancakeBunniesCard: React.FC<ManagePancakeBunniesCardProps> = ({ bunnyId, lowestPrice }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\r\n  useFetchUserNfts()\r\n\r\n  const bunniesInWallet = userNfts.filter(\r\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.WALLET,\r\n  )\r\n  const bunniesForSale = userNfts.filter(\r\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.FORSALE,\r\n  )\r\n  const profilePicBunny = userNfts.filter(\r\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.PROFILE,\r\n  )\r\n\r\n  const loading = userNftsInitializationState !== UserNftInitializationState.INITIALIZED\r\n  const useHasNoBunnies =\r\n    !loading && bunniesInWallet.length === 0 && bunniesForSale.length === 0 && profilePicBunny.length === 0\r\n  const totalBunnies = bunniesInWallet.length + bunniesForSale.length + profilePicBunny.length\r\n  const totalBunniesText = account && !useHasNoBunnies ? ` (${totalBunnies})` : ''\r\n\r\n  const content = (\r\n    <Box pt=\"16px\">\r\n      {!account && (\r\n        <Flex mb=\"16px\" justifyContent=\"center\">\r\n          <ConnectWalletButton />\r\n        </Flex>\r\n      )}\r\n      {useHasNoBunnies && (\r\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\r\n          {t('You don’t have any of this item.')}\r\n        </Text>\r\n      )}\r\n      {account && loading && (\r\n        <Box px=\"16px\" pb=\"8px\">\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n        </Box>\r\n      )}\r\n      {bunniesForSale.length > 0 && (\r\n        <CollectiblesByLocation location={NftLocation.FORSALE} nfts={bunniesForSale} lowestPrice={lowestPrice} />\r\n      )}\r\n      {bunniesInWallet.length > 0 && (\r\n        <>\r\n          {bunniesForSale.length > 0 && <Divider />}\r\n          <CollectiblesByLocation location={NftLocation.WALLET} nfts={bunniesInWallet} lowestPrice={lowestPrice} />\r\n        </>\r\n      )}\r\n      {profilePicBunny.length > 0 && (\r\n        <>\r\n          {(bunniesForSale.length > 0 || bunniesInWallet.length > 0) && <Divider />}\r\n          <CollectiblesByLocation location={NftLocation.PROFILE} nfts={profilePicBunny} lowestPrice={lowestPrice} />\r\n        </>\r\n      )}\r\n    </Box>\r\n  )\r\n  return (\r\n    <ExpandableCard\r\n      title={`${t('Manage Yours')}${totalBunniesText}`}\r\n      icon={<CogIcon width=\"24px\" height=\"24px\" />}\r\n      content={content}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ManagePancakeBunniesCard\r\n","import React from 'react'\r\nimport { Box, Flex, Text, NftIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftAttribute } from 'state/nftMarket/types'\r\nimport ExpandableCard from './ExpandableCard'\r\n\r\ninterface PropertiesCardProps {\r\n  properties: NftAttribute[]\r\n  rarity: { [key: string]: number }\r\n}\r\n\r\n// Map of known traits to human-readable text\r\nconst KNOWN_TRAITS_TEXT = {\r\n  bunnyId: 'Bunny ID',\r\n}\r\n\r\nconst SingleProperty: React.FC<{ title: string; value: string | number; rarity: number }> = ({\r\n  title,\r\n  value,\r\n  rarity,\r\n}) => {\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n        {KNOWN_TRAITS_TEXT[title] ?? title}\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text bold textTransform=\"uppercase\" mr=\"4px\">\r\n          {value}\r\n        </Text>\r\n        {rarity && (\r\n          <Text small color=\"textSubtle\">\r\n            ({rarity.toFixed(2)}%)\r\n          </Text>\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst PropertiesCard: React.FC<PropertiesCardProps> = ({ properties, rarity }) => {\r\n  const { t } = useTranslation()\r\n  const content = (\r\n    <Box p=\"24px\">\r\n      {properties.map((property) => (\r\n        <SingleProperty\r\n          key={property.traitType}\r\n          title={property.traitType}\r\n          value={property.value}\r\n          rarity={rarity[property.traitType]}\r\n        />\r\n      ))}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Properties')} icon={<NftIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default PropertiesCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, Text, SearchIcon, Link } from '@pancakeswap/uikit'\r\nimport { getBscScanLink } from 'utils'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport uriToHttp from 'utils/uriToHttp'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport ExpandableCard from './ExpandableCard'\r\n\r\ninterface DetailsCardProps {\r\n  contractAddress: string\r\n  ipfsJson: string\r\n  count?: number\r\n  rarity?: number\r\n}\r\n\r\nconst LongTextContainer = styled(Text)`\r\n  max-width: 120px;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst DetailsCard: React.FC<DetailsCardProps> = ({ contractAddress, ipfsJson, count, rarity }) => {\r\n  const { t } = useTranslation()\r\n  const { chainId } = useActiveWeb3React()\r\n  const ipfsLink = ipfsJson ? uriToHttp(ipfsJson)[0] : null\r\n  const content = (\r\n    <Box p=\"24px\">\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n          {t('Contract address')}\r\n        </Text>\r\n        <Link external href={getBscScanLink(contractAddress, 'address', chainId)}>\r\n          <LongTextContainer bold>{contractAddress}</LongTextContainer>\r\n        </Link>\r\n      </Flex>\r\n      {ipfsLink && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n            IPFS JSON\r\n          </Text>\r\n          <Link external href={ipfsLink}>\r\n            <LongTextContainer bold>{ipfsLink}</LongTextContainer>\r\n          </Link>\r\n        </Flex>\r\n      )}\r\n      {count && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\" mr=\"4px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n            {t('Supply Count')}\r\n          </Text>\r\n          <LongTextContainer bold>{formatNumber(count, 0, 0)}</LongTextContainer>\r\n        </Flex>\r\n      )}\r\n      {rarity && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mr=\"4px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n            {t('Rarity')}\r\n          </Text>\r\n          <LongTextContainer bold>{`${formatNumber(rarity, 0, 2)}%`}</LongTextContainer>\r\n        </Flex>\r\n      )}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Details')} icon={<SearchIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default DetailsCard\r\n","import React, { useState, useEffect, useMemo } from 'react'\r\nimport shuffle from 'lodash/shuffle'\r\nimport styled from 'styled-components'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport SwiperCore from 'swiper'\r\nimport { ArrowBackIcon, ArrowForwardIcon, Box, IconButton, Text, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { isAddress } from 'utils'\r\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\r\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\r\nimport { useAppDispatch } from 'state'\r\nimport { pancakeBunniesAddress } from '../../../constants'\r\nimport { CollectibleLinkCard } from '../../../components/CollectibleCard'\r\nimport useAllPancakeBunnyNfts from '../../../hooks/useAllPancakeBunnyNfts'\r\n\r\nimport 'swiper/swiper-bundle.css'\r\n\r\nconst INITIAL_SLIDE = 4\r\n\r\nconst SwiperCircle = styled.div<{ isActive }>`\r\n  background-color: ${({ theme, isActive }) => (isActive ? theme.colors.secondary : theme.colors.textDisabled)};\r\n  width: 12px;\r\n  height: 12px;\r\n  margin-right: 8px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n`\r\n\r\nconst StyledSwiper = styled.div`\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    .swiper-wrapper {\r\n      max-height: 390px;\r\n    }\r\n  }\r\n`\r\n\r\ninterface MoreFromThisCollectionProps {\r\n  collectionAddress: string\r\n  currentTokenName?: string\r\n  title?: string\r\n}\r\n\r\nconst MoreFromThisCollection: React.FC<MoreFromThisCollectionProps> = ({\r\n  collectionAddress,\r\n  currentTokenName = '',\r\n  title = 'More from this collection',\r\n}) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const [swiperRef, setSwiperRef] = useState<SwiperCore>(null)\r\n  const [activeIndex, setActiveIndex] = useState(1)\r\n  const { isMobile, isMd, isLg } = useMatchBreakpoints()\r\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(collectionAddress)\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n\r\n  const isPBCollection = isAddress(collectionAddress) === pancakeBunniesAddress\r\n\r\n  useEffect(() => {\r\n    if (!isPBCollection && !collectionNfts) {\r\n      dispatch(\r\n        fetchNftsFromCollections({\r\n          collectionAddress: isAddress(collectionAddress) || collectionAddress,\r\n          page: 1,\r\n          size: 100,\r\n        }),\r\n      )\r\n    }\r\n  }, [collectionNfts, collectionAddress, dispatch, isPBCollection])\r\n\r\n  let nftsToShow = useMemo(() => {\r\n    return shuffle(\r\n      allPancakeBunnyNfts\r\n        ? allPancakeBunnyNfts.filter((nft) => nft.name !== currentTokenName)\r\n        : collectionNfts?.filter((nft) => nft.name !== currentTokenName && nft.marketData?.isTradable),\r\n    )\r\n  }, [allPancakeBunnyNfts, collectionNfts, currentTokenName])\r\n\r\n  if (!nftsToShow || nftsToShow.length === 0) {\r\n    return null\r\n  }\r\n\r\n  let slidesPerView = 4\r\n  let maxPageIndex = 3\r\n\r\n  if (isMd) {\r\n    slidesPerView = 2\r\n    maxPageIndex = 6\r\n  }\r\n\r\n  if (isLg) {\r\n    slidesPerView = 3\r\n    maxPageIndex = 4\r\n  }\r\n\r\n  if (isPBCollection) {\r\n    // PancakeBunnies should display 1 card per bunny id\r\n    nftsToShow = nftsToShow.reduce((nftArray, current) => {\r\n      const bunnyId = current.attributes[0].value\r\n      if (!nftArray.find((nft) => nft.attributes[0].value === bunnyId)) {\r\n        nftArray.push(current)\r\n      }\r\n      return nftArray\r\n    }, [])\r\n  }\r\n  nftsToShow = nftsToShow.slice(0, 12)\r\n\r\n  const nextSlide = () => {\r\n    if (activeIndex < maxPageIndex - 1) {\r\n      setActiveIndex((index) => index + 1)\r\n      swiperRef.slideNext()\r\n    }\r\n  }\r\n\r\n  const previousSlide = () => {\r\n    if (activeIndex > 0) {\r\n      setActiveIndex((index) => index - 1)\r\n      swiperRef.slidePrev()\r\n    }\r\n  }\r\n\r\n  const goToSlide = (index: number) => {\r\n    setActiveIndex(index / slidesPerView)\r\n    swiperRef.slideTo(index)\r\n  }\r\n\r\n  const updateActiveIndex = ({ activeIndex: newActiveIndex }) => {\r\n    if (newActiveIndex !== undefined) setActiveIndex(Math.ceil(newActiveIndex / slidesPerView))\r\n  }\r\n\r\n  return (\r\n    <Box pt=\"56px\" mb=\"52px\">\r\n      {title && (\r\n        <Text bold mb=\"24px\">\r\n          {t(title)}\r\n        </Text>\r\n      )}\r\n      {isMobile ? (\r\n        <StyledSwiper>\r\n          <Swiper spaceBetween={16} slidesPerView={1.5}>\r\n            {nftsToShow.map((nft) => (\r\n              <SwiperSlide key={nft.tokenId}>\r\n                <CollectibleLinkCard nft={nft} />\r\n              </SwiperSlide>\r\n            ))}\r\n          </Swiper>\r\n        </StyledSwiper>\r\n      ) : (\r\n        <StyledSwiper>\r\n          <Swiper\r\n            onSwiper={setSwiperRef}\r\n            onActiveIndexChange={updateActiveIndex}\r\n            spaceBetween={16}\r\n            slidesPerView={slidesPerView}\r\n            slidesPerGroup={slidesPerView}\r\n            initialSlide={INITIAL_SLIDE}\r\n          >\r\n            {nftsToShow.map((nft) => (\r\n              <SwiperSlide key={nft.tokenId}>\r\n                <CollectibleLinkCard\r\n                  nft={nft}\r\n                  currentAskPrice={isPBCollection ? null : parseFloat(nft.marketData?.currentAskPrice)}\r\n                />\r\n              </SwiperSlide>\r\n            ))}\r\n          </Swiper>\r\n          <Flex mt=\"16px\" alignItems=\"center\" justifyContent=\"center\">\r\n            <IconButton variant=\"text\" onClick={previousSlide}>\r\n              <ArrowBackIcon />\r\n            </IconButton>\r\n            {[...Array(maxPageIndex).keys()].map((index) => (\r\n              <SwiperCircle\r\n                key={index}\r\n                onClick={() => goToSlide(index * slidesPerView)}\r\n                isActive={activeIndex === index}\r\n              />\r\n            ))}\r\n            <IconButton variant=\"text\" onClick={nextSlide}>\r\n              <ArrowForwardIcon />\r\n            </IconButton>\r\n          </Flex>\r\n        </StyledSwiper>\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MoreFromThisCollection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { Button, Grid, Text, Flex, Box, BinanceIcon, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport BuyModal from 'views/Nft/market/components/BuySellModals/BuyModal'\r\nimport SellModal from 'views/Nft/market/components/BuySellModals/SellModal'\r\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\r\nimport { ButtonContainer } from '../../shared/styles'\r\n\r\nconst OwnersTableRow = styled(Grid)`\r\n  grid-template-columns: 2fr 2fr 1fr;\r\n  grid-row-gap: 16px;\r\n  margin-top: 16px;\r\n  & > div {\r\n    padding-bottom: 16px;\r\n    border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\r\n  }\r\n`\r\n\r\ninterface RowProps {\r\n  t: ContextApi['t']\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  account: string\r\n}\r\n\r\nconst Row: React.FC<RowProps> = ({ t, nft, bnbBusdPrice, account }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData.currentAskPrice))\r\n\r\n  const ownNft = account ? nft.marketData.currentSeller === account.toLowerCase() : false\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\r\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={nft} />)\r\n\r\n  return (\r\n    <>\r\n      <Box pl=\"24px\">\r\n        <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\r\n          <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n          <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 5)}</Text>\r\n        </Flex>\r\n        {bnbBusdPrice ? (\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\r\n          </Text>\r\n        ) : (\r\n          <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\r\n        )}\r\n      </Box>\r\n      <Box>\r\n        <Flex width=\"max-content\" alignItems=\"center\">\r\n          <ProfileCell accountAddress={nft.marketData.currentSeller} />\r\n        </Flex>\r\n      </Box>\r\n      <ButtonContainer>\r\n        {ownNft ? (\r\n          <Button scale=\"sm\" variant=\"danger\" maxWidth=\"128px\" onClick={onPresentAdjustPriceModal}>\r\n            {t('Edit')}\r\n          </Button>\r\n        ) : (\r\n          <Button scale=\"sm\" variant=\"secondary\" maxWidth=\"128px\" onClick={onPresentBuyModal}>\r\n            {t('Buy')}\r\n          </Button>\r\n        )}\r\n      </ButtonContainer>\r\n    </>\r\n  )\r\n}\r\n\r\ninterface ForSaleTableRowsProps {\r\n  nftsForSale: NftToken[]\r\n}\r\n\r\nconst ForSaleTableRow: React.FC<ForSaleTableRowsProps> = ({ nftsForSale }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  return (\r\n    <OwnersTableRow>\r\n      {nftsForSale.map((nft) => (\r\n        <Row key={nft.tokenId} t={t} nft={nft} bnbBusdPrice={bnbBusdPrice} account={account} />\r\n      ))}\r\n    </OwnersTableRow>\r\n  )\r\n}\r\n\r\nexport default ForSaleTableRow\r\n","import { Spinner, Text } from '@pancakeswap/uikit'\r\nimport React from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\nconst countdownAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0px;\r\n  }\r\n  to {\r\n    stroke-dashoffset: 113px;\r\n  }\r\n`\r\n\r\nconst CountdownContainer = styled.div`\r\n  position: relative;\r\n  margin: auto;\r\n  height: 40px;\r\n  width: 40px;\r\n  text-align: center;\r\n\r\n  & svg {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    width: 40px;\r\n    height: 40px;\r\n    transform: rotateY(-180deg) rotateZ(-90deg);\r\n\r\n    & circle {\r\n      stroke-dasharray: 113px;\r\n      stroke-dashoffset: 0px;\r\n      stroke-linecap: round;\r\n      stroke-width: 2px;\r\n      stroke: ${({ theme }) => theme.colors.primaryBright};\r\n      fill: none;\r\n      animation: ${countdownAnimation} 10s linear infinite forwards;\r\n    }\r\n  }\r\n`\r\n\r\ninterface CountdownCircleProps {\r\n  secondsRemaining: number\r\n  isUpdating: boolean\r\n}\r\n\r\nconst CountdownCircle: React.FC<CountdownCircleProps> = ({ secondsRemaining, isUpdating }) => {\r\n  if (secondsRemaining < 1 || isUpdating) {\r\n    return <Spinner size={42} />\r\n  }\r\n  return (\r\n    <CountdownContainer>\r\n      <Text color=\"textSubtle\" lineHeight=\"40px\" display=\"inline-block\">\r\n        {secondsRemaining}\r\n      </Text>\r\n      <svg>\r\n        <circle r=\"18\" cx=\"20\" cy=\"20\" />\r\n      </svg>\r\n    </CountdownContainer>\r\n  )\r\n}\r\n\r\nexport default CountdownCircle\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, useTooltip } from '@pancakeswap/uikit'\r\nimport { useLoadingState } from 'state/nftMarket/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CountdownCircle from './CountdownCircle'\r\n\r\nconst UpdateIndicator = () => {\r\n  const { t } = useTranslation()\r\n  const [secondsRemaining, setSecondsRemaining] = useState(10)\r\n  const { isUpdatingPancakeBunnies: isFetchingMorePancakeBunnies } = useLoadingState()\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(t('Items in the table update every 10 seconds'), {\r\n    placement: 'auto',\r\n  })\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setSecondsRemaining((prev) => prev - 1)\r\n    }, 1000)\r\n\r\n    return () => {\r\n      clearInterval(intervalId)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!isFetchingMorePancakeBunnies) {\r\n      setSecondsRemaining(10)\r\n    }\r\n  }, [isFetchingMorePancakeBunnies])\r\n\r\n  return (\r\n    <Flex justifyContent=\"center\" ref={targetRef}>\r\n      <CountdownCircle secondsRemaining={secondsRemaining} isUpdating={isFetchingMorePancakeBunnies} />\r\n      {tooltipVisible && tooltip}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UpdateIndicator\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Flex,\r\n  Card,\r\n  Grid,\r\n  SellIcon,\r\n  Text,\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  useMatchBreakpoints,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n  Button,\r\n  Spinner,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport ForSaleTableRows from './ForSaleTableRows'\r\nimport { StyledSortButton, TableHeading } from '../../shared/styles'\r\nimport UpdateIndicator from './UpdateIndicator'\r\nimport { Arrow, PageButtons } from '../../../../components/PaginationButtons'\r\n\r\nconst ITEMS_PER_PAGE_DESKTOP = 10\r\nconst ITEMS_PER_PAGE_MOBILE = 5\r\n\r\nconst StyledCard = styled(Card)<{ hasManyPages: boolean }>`\r\n  width: 100%;\r\n  & > div:first-child {\r\n    ${({ hasManyPages }) => (hasManyPages ? 'min-height: 480px;' : null)}\r\n    display: flex;\r\n    flex-direction: column;\r\n    ${({ theme }) => theme.mediaQueries.md} {\r\n      ${({ hasManyPages }) => (hasManyPages ? 'min-height: 850px;' : null)}\r\n    }\r\n  }\r\n`\r\n\r\ninterface ForSaleTableCardProps {\r\n  nftsForSale: NftToken[]\r\n  bunnyId: string\r\n  totalForSale: number\r\n  priceSort: 'asc' | 'desc'\r\n  isFetchingMoreNfts: boolean\r\n  togglePriceSort: () => void\r\n  loadMore: (orderDirection: 'asc' | 'desc') => void\r\n}\r\n\r\nconst ForSaleTableCard: React.FC<ForSaleTableCardProps> = ({\r\n  nftsForSale,\r\n  bunnyId,\r\n  totalForSale,\r\n  loadMore,\r\n  isFetchingMoreNfts,\r\n  priceSort,\r\n  togglePriceSort,\r\n}) => {\r\n  const [page, setPage] = useState(1)\r\n  const { isMobile } = useMatchBreakpoints()\r\n  const itemsPerPage = isMobile ? ITEMS_PER_PAGE_MOBILE : ITEMS_PER_PAGE_DESKTOP\r\n\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  useEffect(() => {\r\n    // If user clicks on other NFT at the bottom of the page - load new NFT table starting on page 1\r\n    // Same for reversing sorting direction\r\n    setPage(1)\r\n  }, [bunnyId, priceSort])\r\n\r\n  const needsExtraPage = nftsForSale.length % itemsPerPage !== 0\r\n  let maxPage = Math.floor(nftsForSale.length / itemsPerPage)\r\n  if (needsExtraPage) {\r\n    maxPage += 1\r\n  }\r\n\r\n  const nftsOnCurrentPage = nftsForSale.slice((page - 1) * itemsPerPage, page * itemsPerPage)\r\n\r\n  const switchPage = (pageNumber: number) => {\r\n    setPage(pageNumber)\r\n  }\r\n\r\n  const loadMoreHandler = () => {\r\n    loadMore(priceSort)\r\n  }\r\n\r\n  const loadMoreButton = isFetchingMoreNfts ? (\r\n    <Flex width=\"96px\" justifyContent=\"center\">\r\n      <Spinner size={32} />\r\n    </Flex>\r\n  ) : (\r\n    <Button variant=\"primary\" scale=\"xs\" ml=\"12px\" onClick={loadMoreHandler}>\r\n      {t('Load more')}\r\n    </Button>\r\n  )\r\n\r\n  return (\r\n    <StyledCard hasManyPages={maxPage > 1}>\r\n      <Grid\r\n        flex=\"0 1 auto\"\r\n        gridTemplateColumns=\"34px 1fr 48px\"\r\n        alignItems=\"center\"\r\n        height=\"72px\"\r\n        px=\"24px\"\r\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\r\n      >\r\n        <SellIcon width=\"24px\" height=\"24px\" />\r\n        <Text bold>{t('For Sale (%num%)', { num: totalForSale.toLocaleString() })}</Text>\r\n        <UpdateIndicator />\r\n      </Grid>\r\n      {nftsOnCurrentPage.length > 0 ? (\r\n        <>\r\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\r\n            <StyledSortButton type=\"button\" onClick={togglePriceSort}>\r\n              <Flex alignItems=\"center\">\r\n                <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\r\n                  {t('Price')}\r\n                </Text>\r\n                {priceSort === 'asc' ? <ArrowUpIcon color=\"textSubtle\" /> : <ArrowDownIcon color=\"textSubtle\" />}\r\n              </Flex>\r\n            </StyledSortButton>\r\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\r\n              {t('Owner')}\r\n            </Text>\r\n          </TableHeading>\r\n          <Flex flex=\"1 1 auto\" flexDirection=\"column\" justifyContent=\"space-between\" height=\"100%\">\r\n            <ForSaleTableRows nftsForSale={nftsOnCurrentPage} />\r\n            <PageButtons>\r\n              <Arrow\r\n                onClick={() => {\r\n                  switchPage(page === 1 ? page : page - 1)\r\n                }}\r\n              >\r\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n              {page === maxPage ? (\r\n                loadMoreButton\r\n              ) : (\r\n                <Arrow\r\n                  onClick={() => {\r\n                    switchPage(page === maxPage ? page : page + 1)\r\n                  }}\r\n                >\r\n                  <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n                </Arrow>\r\n              )}\r\n            </PageButtons>\r\n          </Flex>\r\n        </>\r\n      ) : (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\r\n          <Text>{t('No items for sale')}</Text>\r\n        </Flex>\r\n      )}\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default ForSaleTableCard\r\n","import React, { useState, useEffect, useMemo } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFetchByBunnyIdAndUpdate, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\r\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useFastFresh } from 'hooks/useRefresh'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { PANCAKE_BUNNIES_UPDATE_FREQUENCY } from 'config'\r\nimport { useGetCollectionDistributionPB } from 'views/Nft/market/hooks/useGetCollectionDistribution'\r\nimport MainPancakeBunnyCard from './MainPancakeBunnyCard'\r\nimport ManagePancakeBunniesCard from './ManagePancakeBunniesCard'\r\nimport PropertiesCard from '../shared/PropertiesCard'\r\nimport DetailsCard from '../shared/DetailsCard'\r\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\r\nimport ForSaleTableCard from './ForSaleTableCard'\r\nimport { pancakeBunniesAddress } from '../../../constants'\r\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\r\nimport { SortType } from '../../../types'\r\nimport { TwoColumnsContainer } from '../shared/styles'\r\nimport usePrevious from '../../../../../../hooks/usePreviousValue'\r\n\r\ninterface IndividualPancakeBunnyPageProps {\r\n  bunnyId: string\r\n}\r\n\r\nconst IndividualPancakeBunnyPage: React.FC<IndividualPancakeBunnyPageProps> = ({ bunnyId }) => {\r\n  const { account } = useWeb3React()\r\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\r\n  const allBunnies = useGetAllBunniesByBunnyId(bunnyId)\r\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\r\n  const previousPriceSort = usePreviousValue(priceSort)\r\n  const { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies } =\r\n    useFetchByBunnyIdAndUpdate(bunnyId)\r\n  const fastRefresh = useFastFresh()\r\n  const isWindowVisible = useIsWindowVisible()\r\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\r\n  const allBunniesFromOtherSellers = account\r\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\r\n    : bunniesSortedByPrice\r\n  const cheapestBunny = bunniesSortedByPrice[0]\r\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\r\n  const prevBunnyId = usePrevious(bunnyId)\r\n\r\n  const {\r\n    data: distributionData,\r\n    total: totalBunnyCount,\r\n    isFetching: isFetchingDistribution,\r\n  } = useGetCollectionDistributionPB()\r\n\r\n  useEffect(() => {\r\n    // Fetch first 30 NFTs on page load\r\n    // And then query every FETCH_NEW_NFTS_INTERVAL_MS in case some new (cheaper) NFTs were listed\r\n    const msSinceLastUpdate = Date.now() - latestPancakeBunniesUpdateAt\r\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\r\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\r\n    // Since fastRefresh is 10 seconds and FETCH_NEW_NFTS_INTERVAL_MS is 8 seconds it fires every 10 seconds\r\n    // The difference in 2 seconds is just to prevent some edge cases when request takes too long\r\n    if (\r\n      prevBunnyId !== bunnyId ||\r\n      (msSinceLastUpdate > PANCAKE_BUNNIES_UPDATE_FREQUENCY && !isUpdatingPancakeBunnies && isWindowVisible)\r\n    ) {\r\n      fetchMorePancakeBunnies(priceSort)\r\n    }\r\n  }, [\r\n    bunnyId,\r\n    prevBunnyId,\r\n    priceSort,\r\n    fetchMorePancakeBunnies,\r\n    isUpdatingPancakeBunnies,\r\n    latestPancakeBunniesUpdateAt,\r\n    fastRefresh,\r\n    isWindowVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    // Fetch most expensive items if user selects other sorting\r\n    if (previousPriceSort && previousPriceSort !== priceSort) {\r\n      fetchMorePancakeBunnies(priceSort)\r\n    }\r\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\r\n\r\n  useEffect(() => {\r\n    const fetchBasicBunnyData = async () => {\r\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      setNothingForSaleBunny({\r\n        // In this case tokenId doesn't matter, this token can't be bought\r\n        tokenId: data[bunnyId].name,\r\n        name: data[bunnyId].name,\r\n        description: data[bunnyId].description,\r\n        collectionName: data[bunnyId].collection.name,\r\n        collectionAddress: pancakeBunniesAddress,\r\n        image: data[bunnyId].image,\r\n        attributes: [\r\n          {\r\n            traitType: 'bunnyId',\r\n            value: bunnyId,\r\n            displayType: null,\r\n          },\r\n        ],\r\n      })\r\n    }\r\n    // If bunny id has no listings on the market - get basic bunny info\r\n    if (!cheapestBunny) {\r\n      fetchBasicBunnyData()\r\n    }\r\n  }, [cheapestBunny, bunnyId])\r\n\r\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\r\n\r\n  if (!cheapestBunny && !nothingForSaleBunny) {\r\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\r\n    // That would require tracking loading states and stuff...\r\n\r\n    // For now this if is used to show loading spinner while we're getting the data\r\n    return <PageLoader />\r\n  }\r\n\r\n  const togglePriceSort = () => {\r\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\r\n  }\r\n\r\n  const getBunnyIdCount = () => {\r\n    if (distributionData && !isFetchingDistribution) {\r\n      return distributionData[bunnyId].tokenCount\r\n    }\r\n    return null\r\n  }\r\n\r\n  const getBunnyIdRarity = () => {\r\n    if (distributionData && !isFetchingDistribution) {\r\n      return (distributionData[bunnyId].tokenCount / totalBunnyCount) * 100\r\n    }\r\n    return null\r\n  }\r\n\r\n  const properties = cheapestBunny?.attributes || nothingForSaleBunny?.attributes\r\n\r\n  const propertyRarity = { bunnyId: getBunnyIdRarity() }\r\n\r\n  return (\r\n    <Page>\r\n      <MainPancakeBunnyCard\r\n        cheapestNft={cheapestBunny}\r\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\r\n        nothingForSaleBunny={nothingForSaleBunny}\r\n      />\r\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\r\n        <Flex flexDirection=\"column\" width=\"100%\">\r\n          <ManagePancakeBunniesCard bunnyId={bunnyId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\r\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\r\n          <DetailsCard\r\n            contractAddress={pancakeBunniesAddress}\r\n            ipfsJson={cheapestBunny?.marketData?.metadataUrl}\r\n            rarity={propertyRarity?.bunnyId}\r\n            count={getBunnyIdCount()}\r\n          />\r\n        </Flex>\r\n        <ForSaleTableCard\r\n          nftsForSale={sortedNfts}\r\n          bunnyId={bunnyId}\r\n          totalForSale={allBunnies.length}\r\n          loadMore={fetchMorePancakeBunnies}\r\n          priceSort={priceSort}\r\n          togglePriceSort={togglePriceSort}\r\n          isFetchingMoreNfts={isUpdatingPancakeBunnies}\r\n        />\r\n      </TwoColumnsContainer>\r\n      <MoreFromThisCollection\r\n        collectionAddress={pancakeBunniesAddress}\r\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\r\n      />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default IndividualPancakeBunnyPage\r\n","type sortBuilder = {\r\n  priceSort: string\r\n}\r\n\r\nexport const sortNFTsByPriceBuilder =\r\n  ({ priceSort }: sortBuilder) =>\r\n  (nftA, nftB) => {\r\n    const nftPriceA = Number(nftA.marketData.currentAskPrice) ?? 0\r\n    const nftPriceB = Number(nftB.marketData.currentAskPrice) ?? 0\r\n\r\n    return priceSort === 'asc' ? nftPriceA - nftPriceB : nftPriceB - nftPriceA\r\n  }\r\n","import { BinanceIcon, Box, Button, Card, CardBody, Flex, Skeleton, Text, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport React from 'react'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport NFTMedia from 'views/Nft/market/components/NFTMedia'\r\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\r\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport { nftsBaseUrl } from '../../../constants'\r\nimport { CollectionLink, Container } from '../shared/styles'\r\n\r\ninterface MainNFTCardProps {\r\n  nft: NftToken\r\n  isOwnNft: boolean\r\n  nftIsProfilePic: boolean\r\n}\r\n\r\nconst MainNFTCard: React.FC<MainNFTCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\r\n  const { t } = useTranslation()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const currentAskPriceAsNumber = nft.marketData?.currentAskPrice ? parseFloat(nft.marketData.currentAskPrice) : 0\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, currentAskPriceAsNumber)\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\r\n  const [onPresentSellModal] = useModal(\r\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\r\n  )\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  const ownerButtons = (\r\n    <Flex flexDirection={['column', 'column', 'row']}>\r\n      <Button\r\n        disabled={nftIsProfilePic}\r\n        minWidth=\"168px\"\r\n        mr=\"16px\"\r\n        width={['100%', null, 'max-content']}\r\n        mt=\"24px\"\r\n        onClick={onPresentSellModal}\r\n      >\r\n        {nft.marketData?.isTradable ? t('Adjust price') : t('List for sale')}\r\n      </Button>\r\n      {!nft.marketData?.isTradable && (\r\n        <Button\r\n          minWidth=\"168px\"\r\n          variant=\"secondary\"\r\n          width={['100%', null, 'max-content']}\r\n          mt=\"24px\"\r\n          onClick={onEditProfileModal}\r\n        >\r\n          {nftIsProfilePic ? t('Change Profile Pic') : t('Set as Profile Pic')}\r\n        </Button>\r\n      )}\r\n    </Flex>\r\n  )\r\n\r\n  return (\r\n    <Card mb=\"40px\">\r\n      <CardBody>\r\n        <Container flexDirection={['column-reverse', null, 'row']}>\r\n          <Flex flex=\"2\">\r\n            <Box>\r\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nft.collectionAddress}`}>\r\n                {nft.collectionName}\r\n              </CollectionLink>\r\n              <Text fontSize=\"40px\" bold mt=\"12px\">\r\n                {nft.name}\r\n              </Text>\r\n              {nft.description && <Text mt={['16px', '16px', '48px']}>{t(nft.description)}</Text>}\r\n              <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\r\n                {t('Price')}\r\n              </Text>\r\n              {currentAskPriceAsNumber > 0 ? (\r\n                <Flex alignItems=\"center\" mt=\"8px\">\r\n                  <BinanceIcon width={18} height={18} mr=\"4px\" />\r\n                  <Text fontSize=\"24px\" bold mr=\"4px\">\r\n                    {formatNumber(currentAskPriceAsNumber, 0, 5)}\r\n                  </Text>\r\n                  {bnbBusdPrice ? (\r\n                    <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\r\n                      minimumFractionDigits: 2,\r\n                      maximumFractionDigits: 2,\r\n                    })} USD)`}</Text>\r\n                  ) : (\r\n                    <Skeleton width=\"64px\" />\r\n                  )}\r\n                </Flex>\r\n              ) : (\r\n                <Text>{t('Not for sale')}</Text>\r\n              )}\r\n              {nftIsProfilePic && (\r\n                <Text color=\"failure\">\r\n                  {t(\r\n                    'This NFT is your profile picture, you must change it to some other NFT if you want to sell this one.',\r\n                  )}\r\n                </Text>\r\n              )}\r\n              {isOwnNft && ownerButtons}\r\n              {!isOwnNft && (\r\n                <Button\r\n                  minWidth=\"168px\"\r\n                  disabled={!nft.marketData?.isTradable}\r\n                  mr=\"16px\"\r\n                  width={['100%', null, 'max-content']}\r\n                  mt=\"24px\"\r\n                  onClick={onPresentBuyModal}\r\n                >\r\n                  {t('Buy')}\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          </Flex>\r\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\" maxWidth={440}>\r\n            <NFTMedia key={nft.tokenId} nft={nft} width={440} height={440} />\r\n          </Flex>\r\n        </Container>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default MainNFTCard\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  Text,\r\n  CogIcon,\r\n  SellIcon,\r\n  WalletFilledIcon,\r\n  CameraIcon,\r\n  BinanceIcon,\r\n  Skeleton,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableCard from '../shared/ExpandableCard'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport ProfileNftModal from '../../../components/ProfileNftModal'\r\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\r\n\r\nconst LocationColors = {\r\n  [NftLocation.FORSALE]: 'failure',\r\n  [NftLocation.WALLET]: 'secondary',\r\n  [NftLocation.PROFILE]: 'textSubtle',\r\n}\r\n\r\nconst LocationIcons = {\r\n  [NftLocation.FORSALE]: SellIcon,\r\n  [NftLocation.WALLET]: WalletFilledIcon,\r\n  [NftLocation.PROFILE]: CameraIcon,\r\n}\r\n\r\ninterface CollectibleRowProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft }) => {\r\n  const { t } = useTranslation()\r\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\r\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\r\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\r\n  return (\r\n    <CollectibleRowContainer\r\n      gridTemplateColumns=\"96px 1fr\"\r\n      px=\"16px\"\r\n      pb=\"8px\"\r\n      my=\"16px\"\r\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\r\n    >\r\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\r\n      <Grid gridTemplateColumns=\"1fr 1fr\">\r\n        <Text bold>{nft.name}</Text>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n          {nft.collectionName}\r\n        </Text>\r\n        {nft.location === NftLocation.FORSALE ? (\r\n          <>\r\n            <Text small color=\"textSubtle\">\r\n              {t('Your price')}\r\n            </Text>\r\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\r\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\r\n              <Text small>{nft.marketData.currentAskPrice}</Text>\r\n            </Flex>\r\n          </>\r\n        ) : (\r\n          <Text small color=\"textDisabled\">\r\n            {t('Not on sale')}\r\n          </Text>\r\n        )}\r\n      </Grid>\r\n    </CollectibleRowContainer>\r\n  )\r\n}\r\n\r\ninterface CollectibleByLocationProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst CollectibleByLocation: React.FC<CollectibleByLocationProps> = ({ nft }) => {\r\n  const { t } = useTranslation()\r\n  const IconComponent = LocationIcons[nft.location]\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\r\n        <IconComponent color={LocationColors[nft.location]} width=\"24px\" height=\"24px\" />\r\n        <Text display=\"inline\" bold color={LocationColors[nft.location]}>\r\n          {t(nft.location)}\r\n        </Text>\r\n      </Grid>\r\n      <CollectibleRow key={nft.tokenId} nft={nft} />\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface ManageNFTsCardProps {\r\n  nft?: NftToken\r\n  isLoading: boolean\r\n  isOwnNft: boolean\r\n}\r\n\r\nconst ManageNFTsCard: React.FC<ManageNFTsCardProps> = ({ nft, isLoading, isOwnNft }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const hasThisNft = isOwnNft && nft\r\n\r\n  const content = (\r\n    <Box pt=\"16px\">\r\n      {!account && (\r\n        <Flex mb=\"16px\" justifyContent=\"center\">\r\n          <ConnectWalletButton />\r\n        </Flex>\r\n      )}\r\n      {account && isLoading && (\r\n        <Box px=\"16px\" pb=\"8px\">\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n        </Box>\r\n      )}\r\n      {!isLoading && !hasThisNft && (\r\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\r\n          {t('You don’t have this item.')}\r\n        </Text>\r\n      )}\r\n      {!isLoading && hasThisNft && <CollectibleByLocation nft={nft} />}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default ManageNFTsCard\r\n","import { useEffect, useState } from 'react'\r\nimport { useErc721CollectionContract } from 'hooks/useContract'\r\nimport { NftToken } from 'state/nftMarket/types'\r\n\r\nconst NOT_ON_SALE_SELLER = '0x0000000000000000000000000000000000000000'\r\n\r\nconst useNftOwner = (nft: NftToken) => {\r\n  const [owner, setOwner] = useState(null)\r\n  const [isLoadingOwner, setIsLoadingOwner] = useState(true)\r\n  const collectionContract = useErc721CollectionContract(nft.collectionAddress, false)\r\n  const currentSeller = nft.marketData?.currentSeller\r\n  const { tokenId } = nft\r\n\r\n  useEffect(() => {\r\n    const getOwner = async () => {\r\n      try {\r\n        const tokenOwner = await collectionContract.ownerOf(tokenId)\r\n        setOwner(tokenOwner)\r\n      } catch (error) {\r\n        setOwner(null)\r\n      } finally {\r\n        setIsLoadingOwner(false)\r\n      }\r\n    }\r\n\r\n    if (currentSeller && currentSeller !== NOT_ON_SALE_SELLER) {\r\n      setOwner(currentSeller)\r\n      setIsLoadingOwner(false)\r\n    } else {\r\n      getOwner()\r\n    }\r\n  }, [currentSeller, collectionContract, tokenId])\r\n\r\n  return { owner, isLoadingOwner }\r\n}\r\n\r\nexport default useNftOwner\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Card, Grid, SellIcon, Text, useModal, Box, BinanceIcon, Skeleton, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useNftOwner from 'views/Nft/market/hooks/useNftOwner'\r\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport ProfileCell from '../../../components/ProfileCell'\r\nimport { ButtonContainer, TableHeading } from '../shared/styles'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n  & > div:first-child {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nconst OwnerRow = styled(Grid)`\r\n  grid-template-columns: 2fr 2fr 1fr;\r\n  grid-row-gap: 16px;\r\n  margin-top: 16px;\r\n  margin-bottom: 8px;\r\n  align-items: center;\r\n`\r\n\r\ninterface OwnerCardProps {\r\n  nft: NftToken\r\n  isOwnNft: boolean\r\n  nftIsProfilePic: boolean\r\n}\r\n\r\nconst OwnerCard: React.FC<OwnerCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const { owner, isLoadingOwner } = useNftOwner(nft)\r\n\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData?.currentAskPrice))\r\n\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\r\n  const [onPresentAdjustPriceModal] = useModal(\r\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\r\n  )\r\n\r\n  return (\r\n    <StyledCard>\r\n      <Grid\r\n        flex=\"0 1 auto\"\r\n        gridTemplateColumns=\"34px 1fr\"\r\n        alignItems=\"center\"\r\n        height=\"72px\"\r\n        px=\"24px\"\r\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\r\n      >\r\n        <SellIcon width=\"24px\" height=\"24px\" />\r\n        <Text bold>{t('Owner')}</Text>\r\n      </Grid>\r\n      {owner && (\r\n        <>\r\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\r\n            <Flex alignItems=\"center\">\r\n              <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\r\n                {t('Price')}\r\n              </Text>\r\n            </Flex>\r\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\r\n              {t('Owner')}\r\n            </Text>\r\n          </TableHeading>\r\n          <OwnerRow>\r\n            <Box pl=\"24px\">\r\n              {nft.marketData?.isTradable ? (\r\n                <>\r\n                  <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\r\n                    <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n                    <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 5)}</Text>\r\n                  </Flex>\r\n                  {bnbBusdPrice ? (\r\n                    <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                      {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\r\n                    </Text>\r\n                  ) : (\r\n                    <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <Flex alignItems=\"center\" height=\"100%\">\r\n                  <Text>{t('Not for sale')}</Text>\r\n                </Flex>\r\n              )}\r\n            </Box>\r\n            <Box>\r\n              <Flex width=\"max-content\" alignItems=\"center\">\r\n                <ProfileCell accountAddress={owner.toLowerCase()} />\r\n              </Flex>\r\n            </Box>\r\n            <ButtonContainer>\r\n              {isOwnNft ? (\r\n                <Button\r\n                  disabled={nftIsProfilePic}\r\n                  scale=\"sm\"\r\n                  variant=\"secondary\"\r\n                  maxWidth=\"128px\"\r\n                  onClick={onPresentAdjustPriceModal}\r\n                >\r\n                  {nft.marketData?.isTradable ? t('Manage') : t('Sell')}\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  disabled={!nft.marketData?.isTradable}\r\n                  scale=\"sm\"\r\n                  variant=\"secondary\"\r\n                  maxWidth=\"128px\"\r\n                  onClick={onPresentBuyModal}\r\n                >\r\n                  {t('Buy')}\r\n                </Button>\r\n              )}\r\n            </ButtonContainer>\r\n          </OwnerRow>\r\n        </>\r\n      )}\r\n      {isLoadingOwner && <Skeleton />}\r\n      {!isLoadingOwner && !owner && (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" padding=\"24px\">\r\n          <Text>{t('Owner information is not available for this item')}</Text>\r\n        </Flex>\r\n      )}\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default OwnerCard\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Card, Text, useMatchBreakpoints, Table, Th, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { useAppDispatch } from '../../../../../../state'\r\nimport NoNftsImage from '../../../components/Activity/NoNftsImage'\r\nimport TableLoader from '../../../../../../components/TableLoader'\r\nimport { Arrow, PageButtons } from '../../../components/PaginationButtons'\r\nimport { getTokenActivity } from '../../../../../../state/nftMarket/helpers'\r\nimport { sortActivity } from '../../../ActivityHistory/utils/sortActivity'\r\nimport ActivityRow from '../../../components/Activity/ActivityRow'\r\n\r\ninterface ActivityCardProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst MAX_PER_PAGE = 5\r\n\r\nconst ActivityCard: React.FC<ActivityCardProps> = ({ nft }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [maxPage, setMaxPages] = useState(1)\r\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\r\n  const [sortedTokenActivities, setSortedTokenActivities] = useState<Activity[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  useEffect(() => {\r\n    const fetchTokenActivity = async () => {\r\n      try {\r\n        const tokenActivity = await getTokenActivity(nft.tokenId, nft.collectionAddress.toLowerCase())\r\n        setSortedTokenActivities(sortActivity(tokenActivity))\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        console.error('Failed to fetch address activity', error)\r\n      }\r\n    }\r\n\r\n    fetchTokenActivity()\r\n  }, [nft, dispatch])\r\n\r\n  useEffect(() => {\r\n    const getMaxPages = () => {\r\n      const max = Math.ceil(sortedTokenActivities.length / MAX_PER_PAGE)\r\n      setMaxPages(max)\r\n    }\r\n\r\n    if (sortedTokenActivities.length > 0) {\r\n      getMaxPages()\r\n    }\r\n\r\n    return () => {\r\n      setActivitiesSlice([])\r\n      setMaxPages(1)\r\n      setCurrentPage(1)\r\n    }\r\n  }, [sortedTokenActivities])\r\n\r\n  useEffect(() => {\r\n    const getActivitySlice = () => {\r\n      const slice = sortedTokenActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\r\n      setActivitiesSlice(slice)\r\n    }\r\n    if (sortedTokenActivities.length > 0) {\r\n      getActivitySlice()\r\n    }\r\n  }, [sortedTokenActivities, currentPage])\r\n\r\n  return (\r\n    <Card>\r\n      {sortedTokenActivities.length === 0 && activitiesSlice.length === 0 && !isLoading ? (\r\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n          <NoNftsImage />\r\n          <Text pt=\"8px\" bold>\r\n            {t('No NFT market history found')}\r\n          </Text>\r\n        </Flex>\r\n      ) : (\r\n        <>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th textAlign=\"center\"> {t('Event')}</Th>\r\n                {isXs || isSm ? null : (\r\n                  <>\r\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\r\n                    <Th textAlign=\"center\"> {t('From')}</Th>\r\n                    <Th textAlign=\"center\"> {t('To')}</Th>\r\n                  </>\r\n                )}\r\n                <Th textAlign=\"center\"> {t('Date')}</Th>\r\n                {isXs || isSm ? null : <Th />}\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {isLoading ? (\r\n                <TableLoader />\r\n              ) : (\r\n                activitiesSlice.map((activity) => {\r\n                  return (\r\n                    <ActivityRow\r\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\r\n                      activity={activity}\r\n                      nft={nft}\r\n                      bnbBusdPrice={bnbBusdPrice}\r\n                      isNftActivity\r\n                    />\r\n                  )\r\n                })\r\n              )}\r\n            </tbody>\r\n          </Table>\r\n          <Flex\r\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\r\n            pt=\"24px\"\r\n            flexDirection=\"column\"\r\n            justifyContent=\"space-between\"\r\n            height=\"100%\"\r\n          >\r\n            <PageButtons>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\r\n                }}\r\n              >\r\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\r\n                }}\r\n              >\r\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n            </PageButtons>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ActivityCard\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport sum from 'lodash/sum'\r\nimport Page from 'components/Layout/Page'\r\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport MainNFTCard from './MainNFTCard'\r\nimport ManageNFTsCard from './ManageNFTsCard'\r\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\r\nimport { TwoColumnsContainer } from '../shared/styles'\r\nimport PropertiesCard from '../shared/PropertiesCard'\r\nimport DetailsCard from '../shared/DetailsCard'\r\nimport useGetCollectionDistribution from '../../../hooks/useGetCollectionDistribution'\r\nimport OwnerCard from './OwnerCard'\r\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\r\nimport ActivityCard from './ActivityCard'\r\n\r\ninterface IndividualNFTPageProps {\r\n  collectionAddress: string\r\n  tokenId: string\r\n}\r\n\r\nconst OwnerActivityContainer = styled(Flex)`\r\n  gap: 22px;\r\n`\r\n\r\nconst IndividualNFTPage: React.FC<IndividualNFTPageProps> = ({ collectionAddress, tokenId }) => {\r\n  const [nft, setNft] = useState<NftToken>(null)\r\n  const [isOwnNft, setIsOwnNft] = useState(false)\r\n\r\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistribution(collectionAddress)\r\n\r\n  const { account } = useWeb3React()\r\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\r\n  useFetchUserNfts()\r\n\r\n  useEffect(() => {\r\n    const fetchNftData = async () => {\r\n      setIsOwnNft(false)\r\n      const metadata = await getNftApi(collectionAddress, tokenId)\r\n      const [marketData] = await getNftsMarketData({ collection: collectionAddress.toLowerCase(), tokenId }, 1)\r\n      setNft({\r\n        tokenId,\r\n        collectionAddress,\r\n        collectionName: metadata.collection.name,\r\n        name: metadata.name,\r\n        description: metadata.description,\r\n        image: metadata.image,\r\n        attributes: metadata.attributes,\r\n        marketData,\r\n      })\r\n    }\r\n    if (!account) {\r\n      fetchNftData()\r\n    } else if (userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\r\n      const nftOwnedByConnectedUser = userNfts.find(\r\n        (userNft) =>\r\n          userNft.collectionAddress.toLowerCase() === collectionAddress.toLowerCase() && userNft.tokenId === tokenId,\r\n      )\r\n      if (nftOwnedByConnectedUser) {\r\n        // If user is the owner we already have all needed data available\r\n        setNft(nftOwnedByConnectedUser)\r\n        setIsOwnNft(true)\r\n      } else {\r\n        // Get metadata and market data separately if connected user is not the owner\r\n        fetchNftData()\r\n      }\r\n    }\r\n  }, [userNfts, collectionAddress, tokenId, userNftsInitializationState, account])\r\n\r\n  if (!nft) {\r\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\r\n    // That would require tracking loading states and stuff...\r\n\r\n    // For now this if is used to show loading spinner while we're getting the data\r\n    return <PageLoader />\r\n  }\r\n\r\n  const properties = nft.attributes\r\n\r\n  const userProfilePicture = userNfts.find((userNft) => userNft.location === NftLocation.PROFILE)\r\n  const nftIsProfilePic = userProfilePicture\r\n    ? nft.tokenId === userProfilePicture.tokenId && nft.collectionAddress === userProfilePicture.collectionAddress\r\n    : false\r\n\r\n  const getAttributesRarity = () => {\r\n    if (distributionData && !isFetchingDistribution) {\r\n      return Object.keys(distributionData).reduce((rarityMap, traitType) => {\r\n        const total = sum(Object.values(distributionData[traitType]))\r\n        const nftAttributeValue = nft.attributes.find((attribute) => attribute.traitType === traitType)?.value\r\n        const count = distributionData[traitType][nftAttributeValue]\r\n        const rarity = (count / total) * 100\r\n        return {\r\n          ...rarityMap,\r\n          [traitType]: rarity,\r\n        }\r\n      }, {})\r\n    }\r\n    return {}\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <MainNFTCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\r\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\r\n        <Flex flexDirection=\"column\" width=\"100%\">\r\n          <ManageNFTsCard\r\n            nft={nft}\r\n            isOwnNft={isOwnNft}\r\n            isLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\r\n          />\r\n          <PropertiesCard properties={properties} rarity={getAttributesRarity()} />\r\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={nft?.marketData?.metadataUrl} />\r\n        </Flex>\r\n        <OwnerActivityContainer flexDirection=\"column\" width=\"100%\">\r\n          <OwnerCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\r\n          <ActivityCard nft={nft} />\r\n        </OwnerActivityContainer>\r\n      </TwoColumnsContainer>\r\n      <MoreFromThisCollection collectionAddress={collectionAddress} currentTokenName={nft.name} />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default IndividualNFTPage\r\n","import React from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport IndividualPancakeBunnyPage from './PancakeBunnyPage'\r\nimport IndividualNFTPage from './OneOfAKindNftPage'\r\n\r\nconst IndividualNFTPageRouter = () => {\r\n  // For PancakeBunnies tokenId in url is really bunnyId\r\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\r\n\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n  if (isPBCollection) {\r\n    return <IndividualPancakeBunnyPage bunnyId={tokenId} />\r\n  }\r\n\r\n  return <IndividualNFTPage collectionAddress={collectionAddress} tokenId={tokenId} />\r\n}\r\n\r\nexport default IndividualNFTPageRouter\r\n","import { useEffect, useState } from 'react'\r\nimport { getCollectionDistributionApi, getNftsFromCollectionApi } from 'state/nftMarket/helpers'\r\nimport sum from 'lodash/sum'\r\nimport { ApiCollectionDistribution, ApiResponseCollectionTokens, ApiSingleTokenData } from 'state/nftMarket/types'\r\nimport { getPancakeRabbitsAddress } from 'utils/addressHelpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport pancakeRabbitsAbi from 'config/abi/pancakeRabbits.json'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\ninterface State {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistribution['data']\r\n}\r\n\r\nconst useGetCollectionDistribution = (collectionAddress: string) => {\r\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setState])\r\n\r\n  return state\r\n}\r\n\r\ninterface StatePB {\r\n  isFetching: boolean\r\n  total: number\r\n  data: Record<string, ApiSingleTokenData & { tokenCount: number }>\r\n}\r\n\r\nexport const useGetCollectionDistributionPB = () => {\r\n  const [state, setState] = useState<StatePB>({ isFetching: false, total: 0, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      let apiResponse: ApiResponseCollectionTokens\r\n      try {\r\n        apiResponse = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      } catch (error) {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n        return\r\n      }\r\n      // Use on chain data to get most updated totalSupply and bunnyCount data. Nft Api Data not updated frequently.\r\n      const tokenIds = Object.keys(apiResponse.attributesDistribution)\r\n      const totalCountCall = {\r\n        address: getPancakeRabbitsAddress(),\r\n        name: 'totalSupply',\r\n      }\r\n      const bunnyCountCalls = tokenIds.map((tokenId) => ({\r\n        address: getPancakeRabbitsAddress(),\r\n        name: 'bunnyCount',\r\n        params: [tokenId],\r\n      }))\r\n      const bunnyContractCalls = [totalCountCall].concat(bunnyCountCalls)\r\n      try {\r\n        const response = await multicallv2(pancakeRabbitsAbi, bunnyContractCalls)\r\n        const tokenListResponse = response.slice(1).reduce((obj, tokenCount, index) => {\r\n          return {\r\n            ...obj,\r\n            [tokenIds[index]]: { ...apiResponse.data[index], tokenCount: tokenCount[0].toNumber() },\r\n          }\r\n        }, {})\r\n        setState({\r\n          isFetching: false,\r\n          total: response[0][0].toNumber(),\r\n          data: tokenListResponse,\r\n        })\r\n      } catch (error) {\r\n        // Use nft api data if on chain multicall fails\r\n        const total = sum(Object.values(apiResponse.attributesDistribution))\r\n        const tokenListResponse = Object.entries(apiResponse.data).reduce((obj, [tokenId, tokenData]) => {\r\n          return {\r\n            ...obj,\r\n            [tokenId]: { ...tokenData, tokenCount: apiResponse.attributesDistribution[tokenId] },\r\n          }\r\n        }, {})\r\n        setState({ isFetching: false, total, data: tokenListResponse })\r\n      }\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetCollectionDistribution\r\n","import { ethers } from 'ethers'\r\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\r\n\r\nexport const sortActivity = ({\r\n  askOrders = [],\r\n  transactions = [],\r\n}: {\r\n  askOrders?: AskOrder[]\r\n  transactions?: Transaction[]\r\n}): Activity[] => {\r\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\r\n    switch (orderType) {\r\n      case AskOrderType.CANCEL:\r\n        return MarketEvent.CANCEL\r\n      case AskOrderType.MODIFY:\r\n        return MarketEvent.MODIFY\r\n      case AskOrderType.NEW:\r\n        return MarketEvent.NEW\r\n      default:\r\n        return MarketEvent.MODIFY\r\n    }\r\n  }\r\n\r\n  const transformTransactions = (transactionsHistory: Transaction[]): Activity[] => {\r\n    const transformedTransactions = transactionsHistory.map((transactionHistory) => {\r\n      const marketEvent = MarketEvent.SELL\r\n      const { timestamp, nft } = transactionHistory\r\n      const price = transactionHistory.askPrice\r\n      const tx = transactionHistory.id\r\n      const buyer = transactionHistory.buyer.id\r\n      const seller = transactionHistory.seller.id\r\n      return { marketEvent, price, timestamp, nft, tx, buyer, seller }\r\n    })\r\n\r\n    return transformedTransactions\r\n  }\r\n\r\n  const transformAskOrders = (askOrdersHistory: AskOrder[]): Activity[] => {\r\n    const transformedAskOrders = askOrdersHistory.map((askOrderHistory) => {\r\n      const marketEvent = getAskOrderEvent(askOrderHistory.orderType)\r\n      const price = askOrderHistory.askPrice\r\n      const { timestamp, nft } = askOrderHistory\r\n      const tx = askOrderHistory.id\r\n      const seller = askOrderHistory?.seller.id\r\n      return { marketEvent, price, timestamp, nft, tx, seller }\r\n    })\r\n\r\n    return transformedAskOrders\r\n  }\r\n\r\n  const allActivity = [...transformAskOrders(askOrders), ...transformTransactions(transactions)]\r\n  if (allActivity.length > 0) {\r\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\r\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\r\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\r\n      return timestamp2.sub(timestamp1).toNumber()\r\n    })\r\n\r\n    return sortedByMostRecent\r\n  }\r\n  return []\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport {\r\n  getAllPancakeBunniesLowestPrice,\r\n  getAllPancakeBunniesRecentUpdatedAt,\r\n  getNftsFromCollectionApi,\r\n} from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\r\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\r\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\r\n\r\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\r\n\r\n  useEffect(() => {\r\n    const fetchPancakeBunnies = async () => {\r\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\r\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\r\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\r\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\r\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      const bunnyIds = Object.keys(data)\r\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\r\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\r\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\r\n        return {\r\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\r\n          tokenId: data[bunnyId].name,\r\n          name: data[bunnyId].name,\r\n          description: data[bunnyId].description,\r\n          collectionAddress: pancakeBunniesAddress,\r\n          collectionName: data[bunnyId].collection.name,\r\n          image: data[bunnyId].image,\r\n          attributes: [\r\n            {\r\n              traitType: 'bunnyId',\r\n              value: bunnyId,\r\n              displayType: null,\r\n            },\r\n          ],\r\n          meta: {\r\n            currentAskPrice: lowestPrices[bunnyId],\r\n            updatedAt: latestUpdates[bunnyId],\r\n          },\r\n        }\r\n      })\r\n      setAllPancakeBunnyNfts(allBunnies)\r\n    }\r\n    if (isPBCollection && !allPancakeBunnyNfts) {\r\n      fetchPancakeBunnies()\r\n    }\r\n  }, [isPBCollection, allPancakeBunnyNfts])\r\n\r\n  return allPancakeBunnyNfts\r\n}\r\n\r\nexport default useAllPancakeBunnyNfts\r\n"],"sourceRoot":""}