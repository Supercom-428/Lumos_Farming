{"version":3,"sources":["views/Pools/components/CakeVaultCard/RecentCakeProfitBalance.tsx","views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx","hooks/useApproveConfirmTransaction.tsx","components/ApproveConfirmButtons.tsx","views/Ifos/hooks/v2/useGetPublicIfoData.ts","views/Ifos/hooks/v3/useGetWalletIfoData.ts","views/Ifos/hooks/useIfoAllowance.ts","views/Ifos/hooks/helpers.ts","views/Swap/SwapBasic.tsx","views/Ifos/hooks/v1/useGetPublicIfoData.ts","views/Ifos/hooks/v1/useGetWalletIfoData.ts","views/Ifos/hooks/v2/useGetWalletIfoData.ts"],"names":["RecentCakeProfitBalance","cakeToDisplay","dollarValueToDisplay","dateStringToDisplay","t","useTranslation","useTooltip","Balance","fontSize","value","decimals","bold","unit","prefix","placement","targetRef","tooltip","tooltipVisible","ref","small","RecentCakeProfitCountdownRow","vaultKey","account","useWeb3React","useVaultPoolByKey","pricePerFullShare","userData","cakeAtLastUserAction","userShares","lastUserActionTime","cakePriceBusd","usePriceCakeBusd","getCakeVaultEarnings","toNumber","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","parseInt","Date","toLocaleString","alignItems","justifyContent","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","useReducer","dispatch","handlePreApprove","useRef","useToast","toastSuccess","toastError","useEffect","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","hasApproveFailed","hasConfirmFailed","handleApprove","a","tx","txHash","hash","wait","receipt","status","logError","handleConfirm","params","ButtonArrangement","StyledApproveConfirmButtonRow","styled","div","theme","mediaQueries","md","Button","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","disabled","onClick","endIcon","undefined","isLoading","id","TAX_PRECISION","ethers","FixedNumber","from","formatPool","pool","raisingAmountPool","BigNumber","toString","BIG_ZERO","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","cakePriceUsd","lpTokenPriceInUsd","useLpTokenPrice","currency","symbol","currencyPriceInUSD","tokens","cake","useState","isInitialized","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","thresholdPoints","startBlockNum","endBlockNum","numberPoints","setState","fetchIfoData","useCallback","currentBlock","multicallv2","ifoV2Abi","name","startBlock","endBlock","poolBasicFormatted","poolUnlimitedFormatted","taxRateNum","divUnsafe","toUnsafeFloat","getStatus","totalBlocks","prev","BSC_BLOCK_TIME","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","useGetWalletIfoData","useAppDispatch","credit","useIfoPoolCredit","contract","useIfoV2Contract","currencyContract","useERC20","allowance","useIfoAllowance","ifoCalls","map","method","fetchIfoPoolUserAndCredit","userInfo","amounts","prevState","resetIfoData","creditLeftWithNegative","minus","ifoCredit","creditLeft","maximum","setPendingTx","poolId","setIsClaimed","tokenContract","spenderAddress","dependency","setAllowance","res","console","error","fetch","Label","Text","SwitchIconButton","IconButton","SwapBasic","history","loadedUrlParams","useDefaultsFromURLSearch","isMobile","useMatchBreakpoints","isChartExpanded","useExchangeChartManager","userChartPreference","setUserChartPreference","isChartDisplayed","useCurrency","inputCurrencyId","outputCurrencyId","loadedInputCurrency","loadedOutputCurrency","urlLoadedTokens","useMemo","filter","c","Token","defaultTokens","useAllTokens","importTokensNotInDefault","token","useActiveWeb3React","useExpertModeManager","isExpertMode","useUserSlippageTolerance","allowedSlippage","useSwapState","independentField","typedValue","recipient","useDerivedSwapInfo","v2Trade","currencyBalances","parsedAmount","currencies","swapInputError","inputError","Field","INPUT","currencyId","OUTPUT","useWrapCallback","wrapType","onWrap","execute","wrapInputError","showWrap","WrapType","NOT_APPLICABLE","trade","parsedAmounts","useSingleTokenSwapInfo","inputAmount","outputAmount","useSwapActionHandlers","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","handleTypeOutput","tradeToConfirm","attemptingTxn","swapErrorMessage","setSwapState","formattedAmounts","toExact","toSignificant","route","userHasSpecifiedInputOutput","Boolean","greaterThan","JSBI","BigInt","noRoute","useApproveCallbackFromTrade","approval","approveCallback","approvalSubmitted","setApprovalSubmitted","ApprovalState","PENDING","maxAmountInput","maxAmountSpend","atMaxAmountInput","equalTo","useSwapCallback","swapCallback","callback","swapCallbackError","priceImpactWithoutFee","computeTradePriceBreakdown","useUserSingleHopOnly","singleHopOnly","handleSwap","confirmPriceImpactWithoutFee","catch","message","showInverted","setShowInverted","priceImpactSeverity","warningSeverity","showApproveFlow","NOT_APPROVED","APPROVED","handleConfirmDismiss","handleAcceptChanges","swapWarningCurrency","setSwapWarningCurrency","useModal","swapCurrency","onPresentSwapWarningModal","shouldShowSwapWarning","isWarningToken","Object","entries","SwapWarningTokens","find","warningTokenConfig","warningTokenData","handleInputSelect","inputCurrency","showSwapWarning","handleMaxInput","handleOutputSelect","outputCurrency","swapIsUnsupported","useIsTransactionUnsupported","onCancel","push","onPresentImportTokenWarningModal","length","originalTrade","onAcceptChanges","customOnDismiss","onPresentConfirmModal","removePadding","hideFooterOnDesktop","className","position","flexDirection","$isChartExpanded","mt","gap","label","showMaxButton","onMax","onCurrencySelect","otherCurrency","justify","style","padding","variant","scale","clickable","onChange","align","price","executionPrice","INITIAL_ALLOWED_SLIPPAGE","mb","WRAP","UNWRAP","textAlign","stroke","asset","marginTop","steps","display","height","PoolIds","ifoV1Abi","raisingAmount","totalAmount","useIfoV1Contract","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","amount","claimed"],"mappings":"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","file":"static/js/3.b4c1e406.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Balance from 'components/Balance'\r\n\r\ninterface RecentCakeProfitBalanceProps {\r\n  cakeToDisplay: number\r\n  dollarValueToDisplay: number\r\n  dateStringToDisplay: string\r\n}\r\n\r\nconst RecentCakeProfitBalance: React.FC<RecentCakeProfitBalanceProps> = ({\r\n  cakeToDisplay,\r\n  dollarValueToDisplay,\r\n  dateStringToDisplay,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <>\r\n      <Balance fontSize=\"16px\" value={cakeToDisplay} decimals={3} bold unit=\" CAKE\" />\r\n      <Balance fontSize=\"16px\" value={dollarValueToDisplay} decimals={2} bold prefix=\"~$\" />\r\n      {t('Earned since your last action')}\r\n      <Text>{dateStringToDisplay}</Text>\r\n    </>,\r\n    {\r\n      placement: 'bottom-end',\r\n    },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {tooltipVisible && tooltip}\r\n      <TooltipText ref={targetRef} small>\r\n        <Balance fontSize=\"14px\" value={cakeToDisplay} />\r\n      </TooltipText>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitBalance\r\n","import React from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useVaultPoolByKey } from 'state/pools/hooks'\r\nimport { VaultKey } from 'state/types'\r\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\r\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\r\n\r\nconst RecentCakeProfitCountdownRow = ({ vaultKey }: { vaultKey: VaultKey }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const {\r\n    pricePerFullShare,\r\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\r\n  } = useVaultPoolByKey(vaultKey)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\r\n    account,\r\n    cakeAtLastUserAction,\r\n    userShares,\r\n    pricePerFullShare,\r\n    cakePriceBusd.toNumber(),\r\n  )\r\n\r\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\r\n  const dateTimeLastAction = new Date(lastActionInMs)\r\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Text fontSize=\"14px\">{`${t('Recent QBANKX profit')}:`}</Text>\r\n      {hasAutoEarnings && (\r\n        <RecentCakeProfitBalance\r\n          cakeToDisplay={autoCakeToDisplay}\r\n          dollarValueToDisplay={autoUsdToDisplay}\r\n          dateStringToDisplay={dateStringToDisplay}\r\n        />\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default RecentCakeProfitCountdownRow\r\n","import React, { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { logError } from 'utils/sentry'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        logError(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        logError(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import BigNumber from 'bignumber.js'\r\nimport { useState, useCallback } from 'react'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport tokens from 'config/constants/tokens'\r\nimport { Ifo, IfoStatus } from 'config/constants/types'\r\nimport { ethers } from 'ethers'\r\nimport { useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\r\n// 1,000,000,000 / 100\r\nconst TAX_PRECISION = ethers.FixedNumber.from(10000000000)\r\n\r\nconst formatPool = (pool) => ({\r\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\r\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\r\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\r\n  hasTax: pool ? pool[3] : false,\r\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\r\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO,\r\n})\r\n\r\n/**\r\n * Gets all public data of an IFO\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const currencyPriceInUSD = ifo.currency === tokens.cake ? cakePriceUsd : lpTokenPriceInUsd\r\n\r\n  const [state, setState] = useState({\r\n    isInitialized: false,\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    poolBasic: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO,\r\n      limitPerUserInLP: BIG_ZERO,\r\n      taxRate: 0,\r\n      totalAmountPool: BIG_ZERO,\r\n      sumTaxesOverflow: BIG_ZERO,\r\n    },\r\n    poolUnlimited: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO,\r\n      limitPerUserInLP: BIG_ZERO,\r\n      taxRate: 0,\r\n      totalAmountPool: BIG_ZERO,\r\n      sumTaxesOverflow: BIG_ZERO,\r\n    },\r\n    thresholdPoints: undefined,\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: 0,\r\n  })\r\n\r\n  const fetchIfoData = useCallback(\r\n    async (currentBlock: number) => {\r\n      const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints, thresholdPoints] =\r\n        await multicallv2(ifoV2Abi, [\r\n          {\r\n            address,\r\n            name: 'startBlock',\r\n          },\r\n          {\r\n            address,\r\n            name: 'endBlock',\r\n          },\r\n          {\r\n            address,\r\n            name: 'viewPoolInformation',\r\n            params: [0],\r\n          },\r\n          {\r\n            address,\r\n            name: 'viewPoolInformation',\r\n            params: [1],\r\n          },\r\n          {\r\n            address,\r\n            name: 'viewPoolTaxRateOverflow',\r\n            params: [1],\r\n          },\r\n          {\r\n            address,\r\n            name: 'numberPoints',\r\n          },\r\n          {\r\n            address,\r\n            name: 'thresholdPoints',\r\n          },\r\n        ])\r\n\r\n      const poolBasicFormatted = formatPool(poolBasic)\r\n      const poolUnlimitedFormatted = formatPool(poolUnlimited)\r\n\r\n      const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n      const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n      const taxRateNum = taxRate ? ethers.FixedNumber.from(taxRate[0]).divUnsafe(TAX_PRECISION).toUnsafeFloat() : 0\r\n\r\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n      const totalBlocks = endBlockNum - startBlockNum\r\n      const blocksRemaining = endBlockNum - currentBlock\r\n\r\n      // Calculate the total progress until finished or until start\r\n      const progress =\r\n        currentBlock > startBlockNum\r\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n      setState((prev) => ({\r\n        ...prev,\r\n        isInitialized: true,\r\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n        poolBasic: { ...poolBasicFormatted, taxRate: 0 },\r\n        poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRateNum },\r\n        status,\r\n        progress,\r\n        blocksRemaining,\r\n        startBlockNum,\r\n        endBlockNum,\r\n        thresholdPoints: thresholdPoints && thresholdPoints[0],\r\n        numberPoints: numberPoints ? numberPoints[0].toNumber() : 0,\r\n      }))\r\n    },\r\n    [releaseBlockNumber, address],\r\n  )\r\n\r\n  return { ...state, currencyPriceInUSD, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n","import { useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport { useIfoPoolCredit } from 'state/pools/hooks'\r\nimport { fetchIfoPoolUserAndCredit } from 'state/pools'\r\nimport { useAppDispatch } from 'state'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\nconst initialState = {\r\n  isInitialized: false,\r\n  poolBasic: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n  },\r\n  poolUnlimited: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n  },\r\n}\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>(initialState)\r\n  const dispatch = useAppDispatch()\r\n  const credit = useIfoPoolCredit()\r\n\r\n  const { address, currency } = ifo\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV2Contract(address)\r\n  const currencyContract = useERC20(currency.address, false)\r\n  const allowance = useIfoAllowance(currencyContract, address)\r\n\r\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = (poolId: PoolIds) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account, [0, 1]],\r\n    }))\r\n\r\n    dispatch(fetchIfoPoolUserAndCredit({ account }))\r\n\r\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isInitialized: true,\r\n      poolBasic: {\r\n        ...prevState.poolBasic,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\r\n        hasClaimed: userInfo[1][0],\r\n      },\r\n      poolUnlimited: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\r\n        hasClaimed: userInfo[1][1],\r\n      },\r\n    }))\r\n  }, [account, address, dispatch])\r\n\r\n  const resetIfoData = useCallback(() => {\r\n    setState({ ...initialState })\r\n  }, [])\r\n\r\n  const creditLeftWithNegative = credit\r\n    .minus(state.poolBasic.amountTokenCommittedInLP)\r\n    .minus(state.poolUnlimited.amountTokenCommittedInLP)\r\n\r\n  const ifoCredit = {\r\n    credit,\r\n    creditLeft: BigNumber.maximum(BIG_ZERO, creditLeftWithNegative),\r\n  }\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData, ifoCredit }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'ethers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\n// Retrieve IFO allowance\r\nconst useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\r\n  const { account } = useWeb3React()\r\n  const [allowance, setAllowance] = useState(BIG_ZERO)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.allowance(account, spenderAddress)\r\n        setAllowance(new BigNumber(res.toString()))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetch()\r\n    }\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n\r\nexport default useIfoAllowance\r\n","import { IfoStatus } from 'config/constants/types'\r\n\r\nexport const getStatus = (currentBlock: number, startBlock: number, endBlock: number): IfoStatus => {\r\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\r\n  // making the UI change to an inaccurate status\r\n  if (currentBlock === 0) {\r\n    return 'idle'\r\n  }\r\n\r\n  if (currentBlock < startBlock) {\r\n    return 'coming_soon'\r\n  }\r\n\r\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\r\n    return 'live'\r\n  }\r\n\r\n  if (currentBlock > endBlock) {\r\n    return 'finished'\r\n  }\r\n\r\n  return 'idle'\r\n}\r\n\r\nexport default null\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport \"./styles/newswap.css\";\r\nimport styled from 'styled-components'\r\nimport { CurrencyAmount, JSBI, Token, Trade } from '@pancakeswap/sdk'\r\nimport {\r\n  Button,\r\n  Text,\r\n  ArrowDownIcon,\r\n  Box,\r\n  useModal,\r\n  Flex,\r\n  IconButton,\r\n  BottomDrawer,\r\n  useMatchBreakpoints,\r\n  ArrowUpDownIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\r\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\r\nimport Footer from 'components/Menu/Footer'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport SwapWarningTokens from 'config/constants/swapWarningTokens'\r\nimport AddressInputPanel from './components/AddressInputPanel'\r\nimport { GreyCard } from '../../components/Card'\r\nimport Column, { AutoColumn } from '../../components/Layout/Column'\r\nimport ConfirmSwapModal from './components/ConfirmSwapModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { AutoRow, RowBetween } from '../../components/Layout/Row'\r\nimport AdvancedSwapDetailsDropdown from './components/AdvancedSwapDetailsDropdown'\r\nimport confirmPriceImpactWithoutFee from './components/confirmPriceImpactWithoutFee'\r\nimport { ArrowWrapper, SwapCallbackError, Wrapper } from './components/styleds'\r\nimport TradePrice from './components/TradePrice'\r\nimport ImportTokenWarningModal from './components/ImportTokenWarningModal'\r\nimport ProgressSteps from './components/ProgressSteps'\r\nimport { AppBody } from '../../components/App'\r\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\r\nimport ViewBalance from \"./components/Balance\"\r\n\r\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../config/constants'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport { useCurrency, useAllTokens } from '../../hooks/Tokens'\r\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../hooks/useApproveCallback'\r\nimport { useSwapCallback } from '../../hooks/useSwapCallback'\r\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\r\nimport { Field } from '../../state/swap/actions'\r\nimport {\r\n  useDefaultsFromURLSearch,\r\n  useDerivedSwapInfo,\r\n  useSwapActionHandlers,\r\n  useSwapState,\r\n  useSingleTokenSwapInfo,\r\n} from '../../state/swap/hooks'\r\nimport {\r\n  useExpertModeManager,\r\n  useUserSlippageTolerance,\r\n  useUserSingleHopOnly,\r\n  useExchangeChartManager,\r\n} from '../../state/user/hooks'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport { computeTradePriceBreakdown, warningSeverity } from '../../utils/prices'\r\nimport CircleLoader from '../../components/Loader/CircleLoader'\r\nimport Page from '../Page'\r\nimport SwapWarningModal from './components/SwapWarningModal'\r\nimport PriceChartContainer from './components/Chart/PriceChartContainer'\r\nimport { StyledInputCurrencyWrapper, StyledSwapContainer } from './styles'\r\nimport Navegation from '../../components/Navegation'\r\nimport CurrencyInputHeader from './components/CurrencyInputHeader'\r\n\r\n\r\nconst Label = styled(Text)`\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  color: white;\r\n`\r\n\r\nconst SwitchIconButton = styled(IconButton)`\r\n  box-shadow: inset 0px -2px 0px rgba(0, 0, 0, 0.1);\r\n  background-color:  rgba(255,255,255,0.1);\r\n  .icon-up-down {\r\n    display: none;\r\n  }\r\n  &:hover {\r\n    background-color:  rgba(255,255,255,0.1);\r\n    .icon-down {\r\n      display: none;\r\n      fill: white;\r\n    }\r\n    .icon-up-down {\r\n      display: block;\r\n      fill: white;\r\n    }\r\n  }\r\n`\r\n\r\nexport default function SwapBasic({ history }: RouteComponentProps) {\r\n  const loadedUrlParams = useDefaultsFromURLSearch()\r\n  const { t } = useTranslation()\r\n  const { isMobile } = useMatchBreakpoints()\r\n  const [isChartExpanded, setIsChartExpanded] = useState(false)\r\n  const [userChartPreference, setUserChartPreference] = useExchangeChartManager(isMobile)\r\n  const [isChartDisplayed, setIsChartDisplayed] = useState(userChartPreference)\r\n\r\n  useEffect(() => {\r\n    setUserChartPreference(isChartDisplayed)\r\n  }, [isChartDisplayed, setUserChartPreference])\r\n\r\n  // token warning stuff\r\n  const [loadedInputCurrency, loadedOutputCurrency] = [\r\n    useCurrency(loadedUrlParams?.inputCurrencyId),\r\n    useCurrency(loadedUrlParams?.outputCurrencyId),\r\n  ]\r\n  const urlLoadedTokens: Token[] = useMemo(\r\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c instanceof Token) ?? [],\r\n    [loadedInputCurrency, loadedOutputCurrency],\r\n  )\r\n\r\n  // dismiss warning if all imported tokens are in active lists\r\n  const defaultTokens = useAllTokens()\r\n  const importTokensNotInDefault =\r\n    urlLoadedTokens &&\r\n    urlLoadedTokens.filter((token: Token) => {\r\n      return !(token.address in defaultTokens)\r\n    })\r\n\r\n  const { account } = useActiveWeb3React()\r\n\r\n  // for expert mode\r\n  const [isExpertMode] = useExpertModeManager()\r\n\r\n  // get custom setting values for user\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  // swap state\r\n  const { independentField, typedValue, recipient } = useSwapState()\r\n  const { v2Trade, currencyBalances, parsedAmount, currencies, inputError: swapInputError } = useDerivedSwapInfo()\r\n\r\n  // Price data\r\n  const {\r\n    [Field.INPUT]: { currencyId: inputCurrencyId },\r\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\r\n  } = useSwapState()\r\n\r\n  const {\r\n    wrapType,\r\n    execute: onWrap,\r\n    inputError: wrapInputError,\r\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue)\r\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\r\n  const trade = showWrap ? undefined : v2Trade\r\n\r\n  const singleTokenPrice = useSingleTokenSwapInfo()\r\n\r\n  const parsedAmounts = showWrap\r\n    ? {\r\n        [Field.INPUT]: parsedAmount,\r\n        [Field.OUTPUT]: parsedAmount,\r\n      }\r\n    : {\r\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\r\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\r\n      }\r\n\r\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\r\n  const isValid = !swapInputError\r\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n\r\n  const handleTypeInput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.INPUT, value)\r\n    },\r\n    [onUserInput],\r\n  )\r\n  const handleTypeOutput = useCallback(\r\n    (value: string) => {\r\n      onUserInput(Field.OUTPUT, value)\r\n    },\r\n    [onUserInput],\r\n  )\r\n\r\n  // modal and loading\r\n  const [{ tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\r\n    tradeToConfirm: Trade | undefined\r\n    attemptingTxn: boolean\r\n    swapErrorMessage: string | undefined\r\n    txHash: string | undefined\r\n  }>({\r\n    tradeToConfirm: undefined,\r\n    attemptingTxn: false,\r\n    swapErrorMessage: undefined,\r\n    txHash: undefined,\r\n  })\r\n\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: showWrap\r\n      ? parsedAmounts[independentField]?.toExact() ?? ''\r\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  const route = trade?.route\r\n  const userHasSpecifiedInputOutput = Boolean(\r\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0)),\r\n  )\r\n  const noRoute = !route\r\n\r\n  // check whether the user has approved the router on the input token\r\n  const [approval, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage)\r\n\r\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\r\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\r\n\r\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\r\n  useEffect(() => {\r\n    if (approval === ApprovalState.PENDING) {\r\n      setApprovalSubmitted(true)\r\n    }\r\n  }, [approval, approvalSubmitted])\r\n\r\n  const maxAmountInput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\r\n  const atMaxAmountInput = Boolean(maxAmountInput && parsedAmounts[Field.INPUT]?.equalTo(maxAmountInput))\r\n\r\n  // the callback to execute the swap\r\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(trade, allowedSlippage, recipient)\r\n\r\n  const { priceImpactWithoutFee } = computeTradePriceBreakdown(trade)\r\n\r\n  const [singleHopOnly] = useUserSingleHopOnly()\r\n\r\n  const handleSwap = useCallback(() => {\r\n    if (priceImpactWithoutFee && !confirmPriceImpactWithoutFee(priceImpactWithoutFee, t)) {\r\n      return\r\n    }\r\n    if (!swapCallback) {\r\n      return\r\n    }\r\n    setSwapState({ attemptingTxn: true, tradeToConfirm, swapErrorMessage: undefined, txHash: undefined })\r\n    swapCallback()\r\n      .then((hash) => {\r\n        setSwapState({ attemptingTxn: false, tradeToConfirm, swapErrorMessage: undefined, txHash: hash })\r\n      })\r\n      .catch((error) => {\r\n        setSwapState({\r\n          attemptingTxn: false,\r\n          tradeToConfirm,\r\n          swapErrorMessage: error.message,\r\n          txHash: undefined,\r\n        })\r\n      })\r\n  }, [priceImpactWithoutFee, swapCallback, tradeToConfirm, t])\r\n\r\n  // errors\r\n  const [showInverted, setShowInverted] = useState<boolean>(false)\r\n\r\n  // warnings on slippage\r\n  const priceImpactSeverity = warningSeverity(priceImpactWithoutFee)\r\n\r\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\r\n  // never show if price impact is above threshold in non expert mode\r\n  const showApproveFlow =\r\n    !swapInputError &&\r\n    (approval === ApprovalState.NOT_APPROVED ||\r\n      approval === ApprovalState.PENDING ||\r\n      (approvalSubmitted && approval === ApprovalState.APPROVED)) &&\r\n    !(priceImpactSeverity > 3 && !isExpertMode)\r\n\r\n  const handleConfirmDismiss = useCallback(() => {\r\n    setSwapState({ tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onUserInput(Field.INPUT, '')\r\n    }\r\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\r\n\r\n  const handleAcceptChanges = useCallback(() => {\r\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn })\r\n  }, [attemptingTxn, swapErrorMessage, trade, txHash])\r\n\r\n  // swap warning state\r\n  const [swapWarningCurrency, setSwapWarningCurrency] = useState(null)\r\n  const [onPresentSwapWarningModal] = useModal(<SwapWarningModal swapCurrency={swapWarningCurrency} />)\r\n\r\n  const shouldShowSwapWarning = (swapCurrency) => {\r\n    const isWarningToken = Object.entries(SwapWarningTokens).find((warningTokenConfig) => {\r\n      const warningTokenData = warningTokenConfig[1]\r\n      return swapCurrency.address === warningTokenData.address\r\n    })\r\n    return Boolean(isWarningToken)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (swapWarningCurrency) {\r\n      onPresentSwapWarningModal()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [swapWarningCurrency])\r\n\r\n  const handleInputSelect = useCallback(\r\n    (inputCurrency) => {\r\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n      onCurrencySelection(Field.INPUT, inputCurrency)\r\n      const showSwapWarning = shouldShowSwapWarning(inputCurrency)\r\n      if (showSwapWarning) {\r\n        setSwapWarningCurrency(inputCurrency)\r\n      } else {\r\n        setSwapWarningCurrency(null)\r\n      }\r\n    },\r\n    [onCurrencySelection],\r\n  )\r\n\r\n  const handleMaxInput = useCallback(() => {\r\n    if (maxAmountInput) {\r\n      onUserInput(Field.INPUT, maxAmountInput.toExact())\r\n    }\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n  const handleOutputSelect = useCallback(\r\n    (outputCurrency) => {\r\n      onCurrencySelection(Field.OUTPUT, outputCurrency)\r\n      const showSwapWarning = shouldShowSwapWarning(outputCurrency)\r\n      if (showSwapWarning) {\r\n        setSwapWarningCurrency(outputCurrency)\r\n      } else {\r\n        setSwapWarningCurrency(null)\r\n      }\r\n    },\r\n\r\n    [onCurrencySelection],\r\n  )\r\n\r\n  const swapIsUnsupported = useIsTransactionUnsupported(currencies?.INPUT, currencies?.OUTPUT)\r\n\r\n  const [onPresentImportTokenWarningModal] = useModal(\r\n    <ImportTokenWarningModal tokens={importTokensNotInDefault} onCancel={() => history.push('/swap')} />,\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (importTokensNotInDefault.length > 0) {\r\n      onPresentImportTokenWarningModal()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [importTokensNotInDefault.length])\r\n\r\n  const [onPresentConfirmModal] = useModal(\r\n    <ConfirmSwapModal\r\n      trade={trade}\r\n      originalTrade={tradeToConfirm}\r\n      onAcceptChanges={handleAcceptChanges}\r\n      attemptingTxn={attemptingTxn}\r\n      txHash={txHash}\r\n      recipient={recipient}\r\n      allowedSlippage={allowedSlippage}\r\n      onConfirm={handleSwap}\r\n      swapErrorMessage={swapErrorMessage}\r\n      customOnDismiss={handleConfirmDismiss}\r\n    />,\r\n    true,\r\n    true,\r\n    'confirmSwapModal',\r\n  )\r\n\r\n  return (\r\n      \r\n   <>\r\n   \r\n      <Page removePadding={isChartExpanded} hideFooterOnDesktop={isChartExpanded} className='transparent'>\r\n      <Flex width=\"100%\" justifyContent=\"center\" position=\"relative\">\r\n        <Flex flexDirection=\"column\">\r\n          <StyledSwapContainer $isChartExpanded={isChartExpanded} >\r\n            <StyledInputCurrencyWrapper mt={isChartExpanded ? '24px' : '0'}>\r\n              <div className='glass' >\r\n\r\n                <Wrapper id=\"swap-page\" className='transparent'>\r\n                  <AutoColumn gap=\"md\">\r\n                    <CurrencyInputPanel\r\n                      label={\r\n                        independentField === Field.OUTPUT && !showWrap && trade ? t('From (estimated)') : t('From')\r\n                      }\r\n                      value={formattedAmounts[Field.INPUT]}\r\n                      showMaxButton={!atMaxAmountInput}\r\n                      currency={currencies[Field.INPUT]}\r\n                      onUserInput={handleTypeInput}\r\n                      onMax={handleMaxInput}\r\n                      onCurrencySelect={handleInputSelect}\r\n                      otherCurrency={currencies[Field.OUTPUT]}\r\n                      id=\"swap-currency-input\"\r\n                    />\r\n\r\n                    <AutoColumn justify=\"space-between\">\r\n                      <AutoRow justify={isExpertMode ? 'space-between' : 'center'} style={{ padding: '0 1rem' }}>\r\n                        <SwitchIconButton\r\n                          variant=\"light\"\r\n                          scale=\"sm\"\r\n                          onClick={() => {\r\n                            setApprovalSubmitted(false) // reset 2 step UI for approvals\r\n                            onSwitchTokens()\r\n                          }}\r\n                        >\r\n                          <ArrowDownIcon\r\n                            className=\"icon-down white\"\r\n                            // color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? 'primary' : 'text'}\r\n\r\n                          />\r\n                          <ArrowUpDownIcon\r\n                            className=\"icon-up-down white\"\r\n                            // color={currencies[Field.INPUT] && currencies[Field.OUTPUT] ? 'primary' : 'text'}\r\n                          />\r\n                        </SwitchIconButton>\r\n                        {recipient === null && !showWrap && isExpertMode ? (\r\n                          <Button variant=\"text\" id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\r\n                            {t('+ Add a send (optional)')}\r\n                          </Button>\r\n                        ) : null}\r\n                      </AutoRow>\r\n                    </AutoColumn>\r\n                    <CurrencyInputPanel\r\n                      value={formattedAmounts[Field.OUTPUT]}\r\n                      onUserInput={handleTypeOutput}\r\n                      label={independentField === Field.INPUT && !showWrap && trade ? t('To (estimated)') : t('To')}\r\n                      showMaxButton={false}\r\n                      currency={currencies[Field.OUTPUT]}\r\n                      onCurrencySelect={handleOutputSelect}\r\n                      otherCurrency={currencies[Field.INPUT]}\r\n                      id=\"swap-currency-output1\"\r\n                      \r\n                    />\r\n\r\n                    {isExpertMode && recipient !== null && !showWrap ? (\r\n                      <>\r\n                        <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\r\n                          <ArrowWrapper clickable={false}>\r\n                            <ArrowDownIcon width=\"16px\" />\r\n                          </ArrowWrapper>\r\n                          <Button variant=\"text\" id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\r\n                            {t('- Remove send')}\r\n                          </Button>\r\n                        </AutoRow>\r\n                        <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\r\n                      </>\r\n                    ) : null}\r\n\r\n                    {showWrap ? null : (\r\n                      <AutoColumn gap=\"8px\" style={{ padding: '0 16px' }}>\r\n                        {Boolean(trade) && (\r\n                          <RowBetween align=\"center\">\r\n                            <Label className=\"white\">{t('Price')}</Label>\r\n                            <TradePrice\r\n                              price={trade?.executionPrice}\r\n                              showInverted={showInverted}\r\n                              setShowInverted={setShowInverted}\r\n                            />\r\n                          </RowBetween>\r\n                        )}\r\n                        {allowedSlippage !== INITIAL_ALLOWED_SLIPPAGE && (\r\n                          <RowBetween align=\"center\">\r\n                            {/* <Label>{t('Slippage Tolerance')}</Label>\r\n                            <Text bold color=\"primary\">\r\n                              {allowedSlippage / 100}%\r\n                            </Text> */}\r\n                          </RowBetween>\r\n                        )}\r\n                      </AutoColumn>\r\n                    )}\r\n                  </AutoColumn>\r\n                  <Box mt=\"1rem\" >\r\n                    {swapIsUnsupported ? (\r\n                      <Button width=\"100%\" disabled mb=\"4px\">\r\n                        {t('Unsupported Asset')}\r\n                      </Button>\r\n                    ) : !account ? (\r\n                      <ConnectWalletButton width=\"100%\" />\r\n                    ) : showWrap ? (\r\n                      <Button width=\"100%\" disabled={Boolean(wrapInputError)} onClick={onWrap}>\r\n                        {wrapInputError ??\r\n                          (wrapType === WrapType.WRAP ? 'Wrap' : wrapType === WrapType.UNWRAP ? 'Unwrap' : null)}\r\n                      </Button>\r\n                    ) : noRoute && userHasSpecifiedInputOutput ? (\r\n                      <GreyCard style={{ textAlign: 'center' }}>\r\n                        <Text className='white' color=\"textSubtle\" mb=\"4px\">\r\n                          {t('Insufficient liquidity for this trade.')}\r\n                        </Text>\r\n                        {singleHopOnly && (\r\n                          <Text color=\"textSubtle\" mb=\"4px\">\r\n                            {t('Try enabling multi-hop trades.')}\r\n                          </Text>\r\n                        )}\r\n                      </GreyCard>\r\n                    ) : showApproveFlow ? (\r\n                      <RowBetween>\r\n                        <Button\r\n                          variant={approval === ApprovalState.APPROVED ? 'success' : 'primary'}\r\n                          onClick={approveCallback}\r\n                          disabled={approval !== ApprovalState.NOT_APPROVED || approvalSubmitted}\r\n                          width=\"48%\"\r\n                        >\r\n                          {approval === ApprovalState.PENDING ? (\r\n                            <AutoRow gap=\"6px\" justify=\"center\">\r\n                              {t('Enabling')} <CircleLoader stroke=\"white\" />\r\n                            </AutoRow>\r\n                          ) : approvalSubmitted && approval === ApprovalState.APPROVED ? (\r\n                            t('Enabled')\r\n                          ) : (\r\n                            t('Enable %asset%', { asset: currencies[Field.INPUT]?.symbol ?? '' })\r\n                          )}\r\n                        </Button>\r\n                        <Button\r\n                          variant={isValid && priceImpactSeverity > 2 ? 'danger' : 'primary'}\r\n                          onClick={() => {\r\n                            if (isExpertMode) {\r\n                              handleSwap()\r\n                            } else {\r\n                              setSwapState({\r\n                                tradeToConfirm: trade,\r\n                                attemptingTxn: false,\r\n                                swapErrorMessage: undefined,\r\n                                txHash: undefined,\r\n                              })\r\n                              onPresentConfirmModal()\r\n                            }\r\n                          }}\r\n                          width=\"48%\"\r\n                          id=\"swap-button\"\r\n                          \r\n                          disabled={\r\n                            !isValid ||\r\n                            approval !== ApprovalState.APPROVED ||\r\n                            (priceImpactSeverity > 3 && !isExpertMode)\r\n                          }\r\n                        >\r\n                          {priceImpactSeverity > 3 && !isExpertMode\r\n                            ? t('Price Impact High')\r\n                            : priceImpactSeverity > 2\r\n                            ? t('Swap Anyway')\r\n                            : t('Swap')}\r\n                        </Button>\r\n                      </RowBetween>\r\n                    ) : (\r\n                      <Button\r\n                        className='button-swap'\r\n                        variant={isValid && priceImpactSeverity > 2 && !swapCallbackError ? 'danger' : 'secondary'}\r\n                        onClick={() => {\r\n                          if (isExpertMode) {\r\n                            handleSwap()\r\n                          } else {\r\n                            setSwapState({\r\n                              tradeToConfirm: trade,\r\n                              attemptingTxn: false,\r\n                              swapErrorMessage: undefined,\r\n                              txHash: undefined,\r\n                            })\r\n                            onPresentConfirmModal()\r\n                          }\r\n                        }}\r\n                        id=\"swap-button\"\r\n                        width=\"100%\"\r\n                        disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\r\n                      >\r\n                        {swapInputError ||\r\n                          (priceImpactSeverity > 3 && !isExpertMode\r\n                            ? t('Price Impact Too High')\r\n                            : priceImpactSeverity > 2\r\n                            ? t('Swap Anyway')\r\n                            : t('Swap'))}\r\n                      </Button>\r\n                    )}\r\n                    {showApproveFlow && (\r\n                      <Column style={{ marginTop: '1rem' }}>\r\n                        <ProgressSteps steps={[approval === ApprovalState.APPROVED]} />\r\n                      </Column>\r\n                    )}\r\n                    {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\r\n                  </Box>\r\n                </Wrapper>\r\n              </div>\r\n              {!swapIsUnsupported ? (\r\n                trade && <AdvancedSwapDetailsDropdown trade={trade} />\r\n              ) : (\r\n                <UnsupportedCurrencyFooter currencies={[currencies.INPUT, currencies.OUTPUT]} />\r\n              )}\r\n            </StyledInputCurrencyWrapper>\r\n          </StyledSwapContainer>\r\n          {isChartExpanded && (\r\n            <Box display={['none', null, null, 'block']} width=\"100%\" height=\"100%\">\r\n              <Footer variant=\"side\" />\r\n            </Box>\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n    </Page>\r\n  )\r\n  </>\r\n  )\r\n}","import { useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BSC_BLOCK_TIME } from 'config'\r\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { PublicIfoData } from '../../types'\r\nimport { getStatus } from '../helpers'\r\n\r\n/**\r\n * Gets all public data of an IFO\r\n */\r\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\r\n  const { address, releaseBlockNumber } = ifo\r\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\r\n  const [state, setState] = useState({\r\n    isInitialized: false,\r\n    status: 'idle' as IfoStatus,\r\n    blocksRemaining: 0,\r\n    secondsUntilStart: 0,\r\n    progress: 5,\r\n    secondsUntilEnd: 0,\r\n    startBlockNum: 0,\r\n    endBlockNum: 0,\r\n    numberPoints: null,\r\n    thresholdPoints: undefined,\r\n    [PoolIds.poolUnlimited]: {\r\n      raisingAmountPool: BIG_ZERO,\r\n      totalAmountPool: BIG_ZERO,\r\n      offeringAmountPool: BIG_ZERO, // Not know\r\n      limitPerUserInLP: BIG_ZERO, //  Not used\r\n      taxRate: 0, //  Not used\r\n      sumTaxesOverflow: BIG_ZERO, //  Not used\r\n    },\r\n  })\r\n  const fetchIfoData = useCallback(\r\n    async (currentBlock: number) => {\r\n      const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\r\n        address,\r\n        name: method,\r\n      }))\r\n\r\n      const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n\r\n      const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\r\n      const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\r\n\r\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\r\n      const totalBlocks = endBlockNum - startBlockNum\r\n      const blocksRemaining = endBlockNum - currentBlock\r\n\r\n      // Calculate the total progress until finished or until start\r\n      const progress =\r\n        currentBlock > startBlockNum\r\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\r\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\r\n\r\n      setState((prev) => ({\r\n        ...prev,\r\n        isInitialized: true,\r\n        status,\r\n        blocksRemaining,\r\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\r\n        progress,\r\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\r\n        startBlockNum,\r\n        endBlockNum,\r\n        [PoolIds.poolUnlimited]: {\r\n          ...prev.poolUnlimited,\r\n          raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\r\n          totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\r\n        },\r\n      }))\r\n    },\r\n    [address, releaseBlockNumber],\r\n  )\r\n\r\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\r\n}\r\n\r\nexport default useGetPublicIfoData\r\n","import { useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\ninterface UserInfo {\r\n  amount: BigNumber\r\n  claimed: boolean\r\n}\r\n\r\nconst initialState = {\r\n  isInitialized: false,\r\n  [PoolIds.poolUnlimited]: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO, // Not used\r\n  },\r\n}\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>(initialState)\r\n\r\n  const { address, currency } = ifo\r\n  const { poolUnlimited } = state\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV1Contract(address)\r\n  const currencyContract = useERC20(currency.address)\r\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\r\n\r\n  const setPendingTx = (status: boolean) =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account],\r\n    }))\r\n\r\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\r\n    const parsedUserInfo: UserInfo = userInfoResponse\r\n      ? {\r\n          amount: new BigNumber(userInfoResponse.amount.toString()),\r\n          claimed: userInfoResponse.claimed,\r\n        }\r\n      : { amount: BIG_ZERO, claimed: false }\r\n\r\n    setState((prevState) => ({\r\n      isInitialized: true,\r\n      [PoolIds.poolUnlimited]: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: parsedUserInfo.amount,\r\n        hasClaimed: parsedUserInfo.claimed,\r\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\r\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  const resetIfoData = useCallback(() => {\r\n    setState(initialState)\r\n  }, [])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n","import { useState, useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Ifo, PoolIds } from 'config/constants/types'\r\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport useIfoAllowance from '../useIfoAllowance'\r\nimport { WalletIfoState, WalletIfoData } from '../../types'\r\n\r\nconst initialState = {\r\n  isInitialized: false,\r\n  poolBasic: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n  },\r\n  poolUnlimited: {\r\n    amountTokenCommittedInLP: BIG_ZERO,\r\n    offeringAmountInToken: BIG_ZERO,\r\n    refundingAmountInLP: BIG_ZERO,\r\n    taxAmountInLP: BIG_ZERO,\r\n    hasClaimed: false,\r\n    isPendingTx: false,\r\n  },\r\n}\r\n\r\n/**\r\n * Gets all data from an IFO related to a wallet\r\n */\r\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\r\n  const [state, setState] = useState<WalletIfoState>(initialState)\r\n\r\n  const { address, currency } = ifo\r\n\r\n  const { account } = useWeb3React()\r\n  const contract = useIfoV2Contract(address)\r\n  const currencyContract = useERC20(currency.address)\r\n  const allowance = useIfoAllowance(currencyContract, address)\r\n\r\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        isPendingTx: status,\r\n      },\r\n    }))\r\n\r\n  const setIsClaimed = (poolId: PoolIds) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [poolId]: {\r\n        ...prevState[poolId],\r\n        hasClaimed: true,\r\n      },\r\n    }))\r\n  }\r\n\r\n  const fetchIfoData = useCallback(async () => {\r\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\r\n      address,\r\n      name: method,\r\n      params: [account, [0, 1]],\r\n    }))\r\n\r\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isInitialized: true,\r\n      poolBasic: {\r\n        ...prevState.poolBasic,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\r\n        hasClaimed: userInfo[1][0],\r\n      },\r\n      poolUnlimited: {\r\n        ...prevState.poolUnlimited,\r\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\r\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\r\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\r\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\r\n        hasClaimed: userInfo[1][1],\r\n      },\r\n    }))\r\n  }, [account, address])\r\n\r\n  const resetIfoData = useCallback(() => {\r\n    setState({ ...initialState })\r\n  }, [])\r\n\r\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData, resetIfoData }\r\n}\r\n\r\nexport default useGetWalletIfoData\r\n"],"sourceRoot":""}