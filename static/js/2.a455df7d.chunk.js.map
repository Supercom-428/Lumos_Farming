{"version":3,"sources":["views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","hooks/useApproveConfirmTransaction.tsx","views/Nft/market/components/BuySellModals/shared/styles.tsx","components/ApproveConfirmButtons.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/BuySellModals/SellModal/types.ts","views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","views/Nft/market/components/BuySellModals/SellModal/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","views/Nft/market/components/BuySellModals/SellModal/index.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/Profile/components/EditProfileModal/reducer.ts","views/Nft/market/Profile/hooks/useGetProfileCosts.ts","components/ProfileAvatarWithTeam.tsx","views/Nft/market/Profile/components/EditProfileModal/StartView.tsx","views/Nft/market/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Nft/market/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Nft/market/Profile/components/EditProfileModal/ApproveCakeView.tsx","views/Nft/market/Profile/components/EditProfileModal/index.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/components/ProfileNftModal.tsx"],"names":["ApproveAndConfirmStage","variant","isApproved","isApproving","isConfirming","handleApprove","handleConfirm","t","useTranslation","p","flexDirection","mb","alignItems","success","fontSize","bold","color","mt","maxWidth","small","flex","width","size","disabled","onClick","TransactionConfirmed","txHash","onDismiss","chainId","useActiveWeb3React","justifyContent","height","href","getBscScanLink","px","pb","ConfirmStage","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","account","useWeb3React","useReducer","dispatch","handlePreApprove","useRef","useToast","toastSuccess","toastError","useEffect","current","then","result","isConfirmed","hasApproveFailed","hasConfirmFailed","a","tx","hash","wait","receipt","status","logError","params","RoundedImage","styled","Image","theme","radii","Divider","div","colors","cardBorder","HorizontalDivider","StepIndicator","Flex","secondary","textDisabled","ButtonArrangement","StyledApproveConfirmButtonRow","mediaQueries","md","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","endIcon","undefined","isLoading","id","NoNftsImage","SellingStage","SellStage","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","hasProfile","useProfile","itemPageUrlId","collectionAddress","toLowerCase","pancakeBunniesAddress","attributes","value","tokenId","useModal","EditProfileModal","onEditProfileModal","src","image","thumbnail","mr","gridTemplateColumns","name","textAlign","collectionName","toLocaleString","minimumFractionDigits","maximumFractionDigits","as","Link","external","nftsBaseUrl","getBscScanLinkForNft","stagesWithBackButton","SET_PRICE","ADJUST_PRICE","APPROVE_AND_CONFIRM_SELL","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","StyledModal","Modal","stage","includes","textSubtle","GreyedOutContainer","Box","dropdown","RightAlignedInput","Input","BnbAmountCell","bnbAmount","bnbBusdPrice","useBNBBusdPrice","usdAmount","multiplyPriceByAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","SetPriceStage","currentPrice","price","setPrice","inputRef","adjustedPriceIsTheSame","parseFloat","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceAsFloat","priceInUsd","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","focus","textTransform","scale","inputMode","ref","isWarning","onChange","e","target","minPrice","maxPrice","alignSelf","EditStage","continueToAdjustPriceStage","continueToRemoveFromMarketStage","marketData","currentAskPrice","RemoveStage","TransferStage","transferAddress","setTransferAddress","isInvalidTransferAddress","transferAddressEqualsConnectedAddress","pt","placeholder","length","modalTitles","SELL","EDIT","TX_CONFIRMED","getToastText","SellModal","useState","setStage","confirmedTxHash","setConfirmedTxHash","useTheme","callWithGasPrice","useCallWithGasPrice","collectionContract","useErc721CollectionContract","nftMarketContract","useNftMarketContract","useAppDispatch","isAddress","useGetLowestPriceFromNft","dispatchSuccessAction","updateUserNft","location","NftLocation","WALLET","removeUserNft","FORSALE","isApprovedForAll","address","approvedForContract","Toast","transactionHash","methodName","askPrice","parseUnits","showBackButton","title","onBack","headerBackground","gradients","cardHeader","useFetchUserNfts","profile","isProfileInitialized","isInitialized","isProfileLoading","userNftsInitializationState","useUserNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","Label","label","isDisabled","Body","Children","StyledBackgroundImage","SelectionCard","isChecked","children","props","isSuccess","checked","style","PageButtons","Arrow","primary","Avatar","img","StyledFlex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","nft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","FetchStatus","Fetched","to","display","lineHeight","truncateHash","Views","action","currentView","view","previousView","useEditProfile","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","setIsLoading","numberCakeToReactivate","ethers","BigNumber","from","numberCakeToRegister","numberCakeToUpdate","costs","setCosts","calls","map","method","getPancakeProfileAddress","multicallv2","profileABI","fetchCosts","TeamAvatar","card","background","sm","AvatarWrapper","bg","AvatarInactive","NoProfileAvatarIcon","ProfileAvatarWithTeam","isActive","team","images","alt","DangerOutline","failure","StartPage","cakeContract","useCake","useGetCakeBalance","cakeBalance","balance","fetchStatus","isProfileCostsLoading","needsApproval","setNeedsApproval","minimumCakeRequired","hasMinimumCakeRequired","gte","allowance","response","lt","checkApprovalStatus","minimum","formatBigNumber","PauseProfilePage","isAcknowledged","setIsAcknowledged","setIsConfirming","pancakeProfileContract","useProfileContract","handleDeactivateProfile","fetchProfile","cost","htmlFor","cursor","marginBottom","ml","ChangeProfilePicPage","selectedNft","setSelectedNft","nfts","profileContract","library","nftsInWallet","filter","contract","getErc721Contract","getSigner","maxHeight","overflowY","walletNft","ApproveCakePage","setIsApproving","approve","mul","viewTitle","isStartView","handleBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveCakeView","GridItem","LoadingRow","useMatchBreakpoints","isXs","isSm","TableLoader","ActivityEventText","marketEvent","events","MarketEvent","NEW","text","CANCEL","MODIFY","BUY","MobileModal","activity","localeTimestamp","isUserActivity","NFTMedia","otherParty","seller","buyer","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","onPresentMobileModal","isPBCollection","find","attribute","traitType","event","stopPropagation","RouterLink","TextWrapper","ProfileNftModal","py"],"mappings":"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","file":"static/js/2.a455df7d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { StepIndicator } from './styles'\r\n\r\ninterface ApproveAndConfirmStageProps {\r\n  variant: 'buy' | 'sell'\r\n  isApproved: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  handleApprove: () => void\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown if user wants to pay with WBNB and contract isn't approved yet\r\n// Sell Flow:\r\n// Shown the first time user puts NFT for sale\r\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\r\n  variant,\r\n  isApproved,\r\n  isApproving,\r\n  isConfirming,\r\n  handleApprove,\r\n  handleConfirm,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex mb=\"8px\" alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <StepIndicator success={isApproved}>\r\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\r\n                1\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\r\n              {isApproved ? t('Enabled') : t('Enable')}\r\n            </Text>\r\n          </Flex>\r\n          {!isApproved && (\r\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\r\n              {variant === 'buy'\r\n                ? t('Please enable WBNB spending in your wallet')\r\n                : t('Please enable your NFT to be sent to the market')}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isApproving && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      {!isApproved && (\r\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\r\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\r\n        </Button>\r\n      )}\r\n      <Flex alignItems=\"center\" mt=\"8px\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\" mt=\"16px\">\r\n            <StepIndicator success={!!0} disabled={!isApproved}>\r\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\r\n                2\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveAndConfirmStage\r\n","import React from 'react'\r\nimport { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { Divider } from './styles'\r\n\r\ninterface TransactionConfirmedProps {\r\n  txHash: string\r\n  onDismiss: () => void\r\n}\r\n\r\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\r\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\r\n        <Text bold>{t('Transaction Confirmed')}</Text>\r\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on BscScan')}</LinkExternal>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\r\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransactionConfirmed\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ConfirmStageProps {\r\n  isConfirming: boolean\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown in case user wants to pay with BNB\r\n// or if user wants to pay with WBNB and it is already approved\r\n// Sell Flow:\r\n// Shown if user adjusts the price or removes NFT from the market\r\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <Text fontSize=\"20px\" bold color=\"secondary\">\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ConfirmStage\r\n","import React, { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { logError } from 'utils/sentry'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        logError(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        logError(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n","import styled from 'styled-components'\r\nimport { Flex, Image } from '@pancakeswap/uikit'\r\n\r\nexport const RoundedImage = styled(Image)`\r\n  border-radius: ${({ theme }) => theme.radii.small};\r\n  overflow: hidden;\r\n`\r\n\r\nexport const Divider = styled.div`\r\n  margin: 16px 0;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const HorizontalDivider = styled.div`\r\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\r\n  border-radius: 50%;\r\n  background-color: ${({ theme, success, disabled }) => {\r\n    if (disabled) {\r\n      return 'none'\r\n    }\r\n    return success ? theme.colors.success : theme.colors.secondary\r\n  }};\r\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\r\n  height: 32px;\r\n  width: 32px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 8px;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import styled from 'styled-components'\r\n\r\nconst NoNftsImage = styled.div`\r\n  background: url('/images/nfts/no-profile-md.png');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default NoNftsImage\r\n","export enum SellingStage {\r\n  // Sell flow\r\n  SELL,\r\n  SET_PRICE,\r\n  APPROVE_AND_CONFIRM_SELL,\r\n  // Adjust price flow\r\n  EDIT,\r\n  ADJUST_PRICE,\r\n  CONFIRM_ADJUST_PRICE,\r\n  // Remove from market flow\r\n  REMOVE_FROM_MARKET,\r\n  CONFIRM_REMOVE_FROM_MARKET,\r\n  // Transfer flow\r\n  TRANSFER,\r\n  CONFIRM_TRANSFER,\r\n  // Common\r\n  TX_CONFIRMED,\r\n}\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface SellStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToNextStage: () => void\r\n  continueToTransferStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\r\nconst SellStage: React.FC<SellStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToNextStage,\r\n  continueToTransferStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { hasProfile } = useProfile()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>\r\n                  {lowestPrice.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 3,\r\n                    maximumFractionDigits: 3,\r\n                  })}\r\n                </Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Sell')}\r\n        </Button>\r\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\r\n          {t('Transfer')}\r\n        </Button>\r\n        {hasProfile && (\r\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\r\n            {t('Set as Profile Pic')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SellStage\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { SellingStage } from './types'\r\n\r\nexport const stagesWithBackButton = [\r\n  SellingStage.SET_PRICE,\r\n  SellingStage.ADJUST_PRICE,\r\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\r\n  SellingStage.CONFIRM_ADJUST_PRICE,\r\n  SellingStage.REMOVE_FROM_MARKET,\r\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\r\n  SellingStage.TRANSFER,\r\n  SellingStage.CONFIRM_TRANSFER,\r\n]\r\n\r\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\r\n  width: 360px;\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n  & h2:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n  & svg:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n`\r\n\r\nexport const GreyedOutContainer = styled(Box)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  padding: 16px;\r\n`\r\n\r\nexport const RightAlignedInput = styled(Input)`\r\n  text-align: right;\r\n`\r\n\r\ninterface BnbAmountCellProps {\r\n  bnbAmount: number\r\n}\r\n\r\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        {`($${usdAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface FeeAmountCellProps {\r\n  bnbAmount: number\r\n  creatorFee: number\r\n  tradingFee: number\r\n}\r\n\r\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  const totalFee = creatorFee + tradingFee\r\n  const totalFeeAsDecimal = totalFee / 100\r\n  const feeAmount = bnbAmount * totalFeeAsDecimal\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 6,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        ({totalFee}%)\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { Divider } from '../shared/styles'\r\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\r\n\r\ninterface SetPriceStageProps {\r\n  nftToSell: NftToken\r\n  variant: 'set' | 'adjust'\r\n  currentPrice?: string\r\n  lowestPrice?: number\r\n  price: string\r\n  setPrice: React.Dispatch<React.SetStateAction<string>>\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst MIN_PRICE = 0.005\r\nconst MAX_PRICE = 10000\r\n\r\n// Stage where user puts price for NFT they're about to put on sale\r\n// Also shown when user wants to adjust the price of already listed NFT\r\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\r\n  nftToSell,\r\n  variant,\r\n  lowestPrice,\r\n  currentPrice,\r\n  price,\r\n  setPrice,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const inputRef = useRef<HTMLInputElement>()\r\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\r\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\r\n\r\n  const { creatorFee, tradingFee } = useGetCollection(nftToSell.collectionAddress)\r\n  const creatorFeeAsNumber = parseFloat(creatorFee)\r\n  const tradingFeeAsNumber = parseFloat(tradingFee)\r\n  const bnbPrice = useBNBBusdPrice()\r\n  const priceAsFloat = parseFloat(price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\r\n\r\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\r\n\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\r\n        )}\r\n      </Text>\r\n      {creatorFeeAsNumber > 0 && (\r\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\r\n      )}\r\n      <Text>{t('%percentage%% trading fee will be used to buy & burn CAKE', { percentage: tradingFee })}</Text>\r\n    </>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (inputRef && inputRef.current) {\r\n      inputRef.current.focus()\r\n    }\r\n  }, [inputRef])\r\n\r\n  const getButtonText = () => {\r\n    if (variant === 'adjust') {\r\n      if (adjustedPriceIsTheSame || priceIsValid) {\r\n        return t('Input New Sale Price')\r\n      }\r\n      return t('Confirm')\r\n    }\r\n    return t('Enable Listing')\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold p=\"16px\">\r\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\r\n      </Text>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Set Price')}\r\n        </Text>\r\n        <Flex>\r\n          <Flex flex=\"1\" alignItems=\"center\">\r\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\r\n            <Text bold>WBNB</Text>\r\n          </Flex>\r\n          <Flex flex=\"2\">\r\n            <RightAlignedInput\r\n              scale=\"sm\"\r\n              type=\"number\"\r\n              inputMode=\"decimal\"\r\n              value={price}\r\n              ref={inputRef}\r\n              isWarning={priceIsOutOfRange}\r\n              onChange={(e) => setPrice(e.target.value)}\r\n            />\r\n          </Flex>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\r\n          {!Number.isNaN(priceInUsd) && (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        {priceIsOutOfRange && (\r\n          <Text fontSize=\"12px\" color=\"failure\">\r\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\r\n              minPrice: MIN_PRICE,\r\n              maxPrice: MAX_PRICE,\r\n            })}\r\n          </Text>\r\n        )}\r\n        <Flex mt=\"8px\">\r\n          <Text small color=\"textSubtle\" mr=\"8px\">\r\n            {t('Seller pays %percentage%% platform fee on sale', {\r\n              percentage: creatorFeeAsNumber + tradingFeeAsNumber,\r\n            })}\r\n          </Text>\r\n          <span ref={targetRef}>\r\n            <ErrorIcon />\r\n          </span>\r\n          {tooltipVisible && tooltip}\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Platform fee if sold')}\r\n          </Text>\r\n          <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\r\n        </Flex>\r\n        {lowestPrice && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Lowest price on market')}\r\n            </Text>\r\n            <BnbAmountCell bnbAmount={lowestPrice} />\r\n          </Flex>\r\n        )}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Box>\r\n          <Text small color=\"textSubtle\">\r\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with PancakeSwap.')}\r\n          </Text>\r\n        </Box>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\r\n        >\r\n          {getButtonText()}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SetPriceStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface EditStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToAdjustPriceStage: () => void\r\n  continueToRemoveFromMarketStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\r\nconst EditStage: React.FC<EditStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToAdjustPriceStage,\r\n  continueToRemoveFromMarketStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Text small color=\"textSubtle\">\r\n            {t('Your price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n            <Text small>{nftToSell.marketData.currentAskPrice}</Text>\r\n          </Flex>\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\r\n          {t('Adjust Sale Price')}\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\r\n          {t('Remove from Market')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditStage\r\n","import React from 'react'\r\nimport { Flex, Box, Text, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Divider } from '../shared/styles'\r\n\r\ninterface RemoveStageProps {\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Box p=\"16px\" maxWidth=\"360px\">\r\n        <Text fontSize=\"24px\" bold>\r\n          {t('Remove from Market')}\r\n        </Text>\r\n        <Text mt=\"24px\" color=\"textSubtle\">\r\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\r\n        </Text>\r\n        <Text mt=\"16px\" color=\"textSubtle\">\r\n          {t('Continue?')}\r\n        </Text>\r\n      </Box>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RemoveStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { Divider, RoundedImage } from '../shared/styles'\r\nimport { GreyedOutContainer } from './styles'\r\n\r\ninterface TransferStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  transferAddress: string\r\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\r\n  isInvalidTransferAddress: boolean\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst TransferStage: React.FC<TransferStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  transferAddress,\r\n  setTransferAddress,\r\n  isInvalidTransferAddress,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\r\n  const getErrorText = () => {\r\n    if (isInvalidTransferAddress) {\r\n      return t('That’s not a Binance Smart Chain wallet address.')\r\n    }\r\n    if (transferAddressEqualsConnectedAddress) {\r\n      return t('This address is the one that is currently connected')\r\n    }\r\n    return null\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\r\n        {t('Transfer to New Wallet')}\r\n      </Text>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Receiving address')}\r\n        </Text>\r\n        <Input\r\n          scale=\"sm\"\r\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\r\n          placeholder={t('Paste BSC address')}\r\n          value={transferAddress}\r\n          onChange={(e) => setTransferAddress(e.target.value)}\r\n        />\r\n        {isInvalidTransferAddress ||\r\n          (transferAddressEqualsConnectedAddress && (\r\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\r\n              {getErrorText()}\r\n            </Text>\r\n          ))}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Text small color=\"textSubtle\">\r\n          {t('This action will send your NFT to the address you have indicated above. Make sure it’s the correct')}\r\n        </Text>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransferStage\r\n","import React, { useState } from 'react'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { isAddress } from 'utils'\r\nimport { useErc721CollectionContract, useNftMarketContract } from 'hooks/useContract'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\r\nimport SellStage from './SellStage'\r\nimport SetPriceStage from './SetPriceStage'\r\nimport EditStage from './EditStage'\r\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\r\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\r\nimport { StyledModal, stagesWithBackButton } from './styles'\r\nimport { SellingStage } from './types'\r\nimport ConfirmStage from '../shared/ConfirmStage'\r\nimport RemoveStage from './RemoveStage'\r\nimport TransferStage from './TransferStage'\r\n\r\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\r\n  switch (stage) {\r\n    // Sell flow\r\n    case SellingStage.SELL:\r\n      return t('Details')\r\n    case SellingStage.SET_PRICE:\r\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n      return t('Back')\r\n    // Adjust price flow\r\n    case SellingStage.EDIT:\r\n      return t('Details')\r\n    case SellingStage.ADJUST_PRICE:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_ADJUST_PRICE:\r\n      return t('Confirm transaction')\r\n    // Remove from market flow\r\n    case SellingStage.REMOVE_FROM_MARKET:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n      return t('Confirm transaction')\r\n    // Transfer flow\r\n    case SellingStage.TRANSFER:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_TRANSFER:\r\n      return t('Confirm transaction')\r\n    // Common\r\n    case SellingStage.TX_CONFIRMED:\r\n      return t('Transaction Confirmed')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\r\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n    return t('Your NFT has been returned to your wallet')\r\n  }\r\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n    return t('Your NFT has been transferred to another wallet')\r\n  }\r\n  if (variant === 'sell') {\r\n    return t('Your NFT has been listed for sale!')\r\n  }\r\n  return t('Your NFT listing has been changed.')\r\n}\r\n\r\ninterface SellModalProps extends InjectedModalProps {\r\n  variant: 'sell' | 'edit'\r\n  nftToSell: NftToken\r\n}\r\n\r\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\r\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\r\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\r\n  const [transferAddress, setTransferAddress] = useState('')\r\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { account } = useWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { toastSuccess } = useToast()\r\n  const collectionContract = useErc721CollectionContract(nftToSell.collectionAddress)\r\n  const nftMarketContract = useNftMarketContract()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\r\n\r\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\r\n\r\n  const goBack = () => {\r\n    switch (stage) {\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setPrice(nftToSell.marketData.currentAskPrice)\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_ADJUST_PRICE:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        setStage(SellingStage.TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToNextStage = () => {\r\n    switch (stage) {\r\n      case SellingStage.SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\r\n        break\r\n      case SellingStage.EDIT:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.CONFIRM_TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToRemoveFromMarketStage = () => {\r\n    setStage(SellingStage.REMOVE_FROM_MARKET)\r\n  }\r\n\r\n  const continueToTransferStage = () => {\r\n    setStage(SellingStage.TRANSFER)\r\n  }\r\n\r\n  const dispatchSuccessAction = () => {\r\n    switch (stage) {\r\n      // Remove from sale\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.WALLET,\r\n          }),\r\n        )\r\n        break\r\n      // Transfer NFT\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        dispatch(\r\n          removeUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n          }),\r\n        )\r\n        break\r\n      default:\r\n        // Modify listing OR list for sale\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.FORSALE,\r\n          }),\r\n        )\r\n        break\r\n    }\r\n  }\r\n\r\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\r\n    onRequiresApproval: async () => {\r\n      try {\r\n        const approvedForContract = await collectionContract.isApprovedForAll(account, nftMarketContract.address)\r\n        return approvedForContract\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    },\r\n    onApprove: () => {\r\n      return callWithGasPrice(collectionContract, 'setApprovalForAll', [nftMarketContract.address, true])\r\n    },\r\n    onApproveSuccess: async ({ receipt }) => {\r\n      toastSuccess(\r\n        t('Contract approved - you can now put your NFT for sale!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n    onConfirm: () => {\r\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\r\n      }\r\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n        return callWithGasPrice(collectionContract, 'safeTransferFrom(address,address,uint256)', [\r\n          account,\r\n          transferAddress,\r\n          nftToSell.tokenId,\r\n        ])\r\n      }\r\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\r\n      const askPrice = parseUnits(price)\r\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\r\n    },\r\n    onSuccess: async ({ receipt }) => {\r\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      dispatchSuccessAction()\r\n      setConfirmedTxHash(receipt.transactionHash)\r\n      setStage(SellingStage.TX_CONFIRMED)\r\n    },\r\n  })\r\n\r\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\r\n\r\n  return (\r\n    <StyledModal\r\n      title={modalTitles(stage, t)}\r\n      stage={stage}\r\n      onDismiss={onDismiss}\r\n      onBack={showBackButton ? goBack : null}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stage === SellingStage.SELL && (\r\n        <SellStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          continueToTransferStage={continueToTransferStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.SET_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"set\"\r\n          continueToNextStage={continueToNextStage}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\r\n        <ApproveAndConfirmStage\r\n          variant=\"sell\"\r\n          isApproved={isApproved}\r\n          isApproving={isApproving}\r\n          isConfirming={isConfirming}\r\n          handleApprove={handleApprove}\r\n          handleConfirm={handleConfirm}\r\n        />\r\n      )}\r\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\r\n      {stage === SellingStage.EDIT && (\r\n        <EditStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToAdjustPriceStage={continueToNextStage}\r\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.ADJUST_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"adjust\"\r\n          continueToNextStage={continueToNextStage}\r\n          currentPrice={nftToSell.marketData.currentAskPrice}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\r\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.TRANSFER && (\r\n        <TransferStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          transferAddress={transferAddress}\r\n          setTransferAddress={setTransferAddress}\r\n          isInvalidTransferAddress={isInvalidTransferAddress}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_TRANSFER && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default SellModal\r\n","import { useEffect, useMemo } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\r\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst useFetchUserNfts = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\r\n  const { userNftsInitializationState } = useUserNfts()\r\n  const collections = useGetCollections()\r\n\r\n  const hasProfileNft = profile?.tokenId\r\n  const profileNftTokenId = profile?.tokenId?.toString()\r\n  const profileNftCollectionAddress = profile?.collectionAddress\r\n\r\n  const profileNftWithCollectionAddress = useMemo(() => {\r\n    if (hasProfileNft) {\r\n      return {\r\n        tokenId: profileNftTokenId,\r\n        collectionAddress: profileNftCollectionAddress,\r\n        nftLocation: NftLocation.PROFILE,\r\n      }\r\n    }\r\n    return null\r\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\r\n\r\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\r\n\r\n  // Fetch on first load when profile fetch is resolved\r\n  const shouldFetch =\r\n    account &&\r\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\r\n    isProfileInitialized &&\r\n    !isProfileLoading\r\n\r\n  // Fetch on account / profile change, once profile fetch is resolved\r\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\r\n\r\n  useEffect(() => {\r\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\r\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\r\n    }\r\n  }, [\r\n    dispatch,\r\n    account,\r\n    shouldFetch,\r\n    hasAccountSwitched,\r\n    profileNftTokenId,\r\n    collections,\r\n    profileNftWithCollectionAddress,\r\n  ])\r\n}\r\n\r\nexport default useFetchUserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Radio } from '@pancakeswap/uikit'\r\n\r\ninterface SelectionCardProps {\r\n  name: string\r\n  value: string | number\r\n  isChecked?: boolean\r\n  onChange: (val: any) => void\r\n  image: string\r\n  disabled?: boolean\r\n}\r\n\r\nconst Label = styled.label<{ isDisabled: boolean }>`\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\r\n`\r\n\r\nconst Body = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  height: 80px;\r\n  padding: 8px 16px;\r\n`\r\n\r\nconst Children = styled.div`\r\n  margin-left: 16px;\r\n`\r\n\r\nconst StyledBackgroundImage = styled.div<{ src: string }>`\r\n  align-self: stretch;\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 80px;\r\n`\r\n\r\nconst SelectionCard: React.FC<SelectionCardProps> = ({\r\n  name,\r\n  value,\r\n  isChecked = false,\r\n  image,\r\n  onChange,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\r\n      <Label isDisabled={disabled}>\r\n        <Body>\r\n          <Radio\r\n            name={name}\r\n            checked={isChecked}\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            disabled={disabled}\r\n            style={{ flex: 'none' }}\r\n          />\r\n          <Children>{children}</Children>\r\n        </Body>\r\n        <StyledBackgroundImage src={image} />\r\n      </Label>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SelectionCard\r\n","import styled from 'styled-components'\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport { Link } from 'react-router-dom'\r\nimport { nftsBaseUrl } from '../constants'\r\n\r\nconst Avatar = styled.img`\r\n  margin-right: 4px;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-right: 12px;\r\n  }\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  align-items: center;\r\n  transition: opacity 200ms ease-in;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\r\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\r\n  const profileName = username || '-'\r\n\r\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n  if (avatarFetchStatus === FetchStatus.Fetched) {\r\n    if (profileNft?.image?.thumbnail) {\r\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\r\n    } else {\r\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\r\n      <StyledFlex>\r\n        {sellerProfilePicComponent}\r\n        <Box display=\"inline\">\r\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\r\n          {usernameFetchStatus !== FetchStatus.Fetched ? <Skeleton /> : <Text lineHeight=\"1.25\">{profileName}</Text>}\r\n        </Box>\r\n      </StyledFlex>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default ProfileCell\r\n","import { useReducer } from 'react'\r\n\r\nexport enum Views {\r\n  START = 'start',\r\n  CHANGE = 'change',\r\n  REMOVE = 'remove',\r\n  APPROVE = 'approve',\r\n}\r\n\r\nexport type Actions =\r\n  | {\r\n      type: 'set_view'\r\n      view: Views\r\n    }\r\n  | {\r\n      type: 'go_previous'\r\n    }\r\n\r\nexport interface State {\r\n  currentView: Views\r\n  previousView: Views | null\r\n}\r\n\r\nconst reducer = (state: State, action: Actions): State => {\r\n  switch (action.type) {\r\n    case 'set_view':\r\n      return {\r\n        ...state,\r\n        currentView: action.view,\r\n        previousView: state.currentView,\r\n      }\r\n    case 'go_previous':\r\n      return {\r\n        ...state,\r\n        currentView: state.previousView,\r\n        previousView: state.currentView,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport interface UseEditProfileResponse extends State {\r\n  goToStart: () => void\r\n  goToChange: () => void\r\n  goToApprove: () => void\r\n  goToRemove: () => void\r\n  goPrevious: () => void\r\n}\r\n\r\nconst useEditProfile = (): UseEditProfileResponse => {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    currentView: Views.START,\r\n    previousView: null,\r\n  })\r\n\r\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\r\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\r\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\r\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\r\n  const goPrevious = () => dispatch({ type: 'go_previous' })\r\n\r\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\r\n}\r\n\r\nexport default useEditProfile\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst useGetProfileCosts = () => {\r\n  const { t } = useTranslation()\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [costs, setCosts] = useState({\r\n    numberCakeToReactivate: ethers.BigNumber.from(0),\r\n    numberCakeToRegister: ethers.BigNumber.from(0),\r\n    numberCakeToUpdate: ethers.BigNumber.from(0),\r\n  })\r\n  const { toastError } = useToast()\r\n\r\n  useEffect(() => {\r\n    const fetchCosts = async () => {\r\n      try {\r\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\r\n          address: getPancakeProfileAddress(),\r\n          name: method,\r\n        }))\r\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2<\r\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\r\n        >(profileABI, calls)\r\n\r\n        setCosts({\r\n          numberCakeToReactivate,\r\n          numberCakeToRegister,\r\n          numberCakeToUpdate,\r\n        })\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\r\n      }\r\n    }\r\n\r\n    fetchCosts()\r\n  }, [setCosts, toastError, t])\r\n\r\n  return { costs, isLoading }\r\n}\r\n\r\nexport default useGetProfileCosts\r\n","import React from 'react'\r\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\r\nimport { Profile } from 'state/types'\r\nimport styled from 'styled-components'\r\n\r\nexport interface ProfileAvatarProps {\r\n  profile: Profile\r\n}\r\n\r\nconst TeamAvatar = styled.img`\r\n  border: 1px solid ${({ theme }) => theme.card.background};\r\n  border-radius: 50%;\r\n  bottom: 0px;\r\n  position: absolute;\r\n  right: 0px;\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  width: 37.5%;\r\n  height: 37.5%;\r\n  z-index: 5;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    border-width: 2px;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div<{ bg: string }>`\r\n  background: url('${({ bg }) => bg}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n// TODO: replace with no profile avatar icon\r\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst ProfileAvatarWithTeam: React.FC<ProfileAvatarProps> = ({ profile }) => {\r\n  return (\r\n    <AvatarWrapper bg={profile.nft?.image.thumbnail}>\r\n      {!profile.isActive && <AvatarInactive />}\r\n      <TeamAvatar src={`/images/teams/${profile.team.images.alt}`} alt={profile.team.name} />\r\n    </AvatarWrapper>\r\n  )\r\n}\r\n\r\nexport default ProfileAvatarWithTeam\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { useCake } from 'hooks/useContract'\r\nimport { useGetCakeBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport ProfileAvatarWithTeam from 'components/ProfileAvatarWithTeam'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface StartPageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n  goToRemove: UseEditProfileResponse['goToRemove']\r\n  goToApprove: UseEditProfileResponse['goToApprove']\r\n}\r\n\r\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\r\n  border-color: ${({ theme }) => theme.colors.failure};\r\n  color: ${({ theme }) => theme.colors.failure};\r\n  margin-bottom: 24px;\r\n\r\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\r\n    border-color: ${({ theme }) => theme.colors.failure};\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div`\r\n  height: 64px;\r\n  width: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 128px;\r\n    width: 128px;\r\n  }\r\n`\r\n\r\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const { profile } = useProfile()\r\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n    isLoading: isProfileCostsLoading,\r\n  } = useGetProfileCosts()\r\n  const [needsApproval, setNeedsApproval] = useState(null)\r\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.Fetched && cakeBalance.gte(minimumCakeRequired)\r\n\r\n  /**\r\n   * Check if the wallet has the required CAKE allowance to change their profile pic or reactivate\r\n   * If they don't, we send them to the approval screen first\r\n   */\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      const response = await cakeContract.allowance(account, getPancakeProfileAddress())\r\n      setNeedsApproval(response.lt(minimumCakeRequired))\r\n    }\r\n\r\n    if (account && !isProfileCostsLoading) {\r\n      checkApprovalStatus()\r\n    }\r\n  }, [account, minimumCakeRequired, setNeedsApproval, cakeContract, isProfileCostsLoading])\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n      <AvatarWrapper>\r\n        <ProfileAvatarWithTeam profile={profile} />\r\n      </AvatarWrapper>\r\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\r\n        <Text as=\"p\" color=\"failure\">\r\n          {!isProfileCostsLoading &&\r\n            !hasMinimumCakeRequired &&\r\n            t('%minimum% CAKE required to change profile pic', { minimum: formatBigNumber(minimumCakeRequired) })}\r\n        </Text>\r\n      </Flex>\r\n      {profile.isActive ? (\r\n        <>\r\n          <Button\r\n            width=\"100%\"\r\n            mb=\"8px\"\r\n            onClick={needsApproval === true ? goToApprove : goToChange}\r\n            disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n          >\r\n            {t('Change Profile Pic')}\r\n          </Button>\r\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\r\n            {t('Remove Profile Pic')}\r\n          </DangerOutline>\r\n        </>\r\n      ) : (\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={needsApproval === true ? goToApprove : goToChange}\r\n          disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n        >\r\n          {t('Reactivate Profile')}\r\n        </Button>\r\n      )}\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StartPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useToast from 'hooks/useToast'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { useProfileContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ntype PauseProfilePageProps = InjectedModalProps\r\n\r\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\r\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { profile } = useProfile()\r\n  const {\r\n    costs: { numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const { t } = useTranslation()\r\n  const pancakeProfileContract = useProfileContract()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\r\n\r\n  const handleDeactivateProfile = async () => {\r\n    const tx = await callWithGasPrice(pancakeProfileContract, 'pauseProfile')\r\n    toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      // Re-fetch profile\r\n      await dispatch(fetchProfile(account))\r\n      toastSuccess(t('Profile Paused!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      onDismiss()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t(\r\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\r\n        )}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Cost to reactivate in the future: %cost% CAKE', { cost: formatBigNumber(numberCakeToReactivate) })}\r\n      </Text>\r\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\r\n        <Flex alignItems=\"center\">\r\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\r\n          <Text ml=\"8px\">{t('I understand')}</Text>\r\n        </Flex>\r\n      </label>\r\n      <Button\r\n        width=\"100%\"\r\n        isLoading={isConfirming}\r\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        disabled={!isAcknowledged || isConfirming}\r\n        onClick={handleDeactivateProfile}\r\n        mb=\"8px\"\r\n      >\r\n        {t('Confirm')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PauseProfilePage\r\n","import React, { useState } from 'react'\r\nimport { Button, Box, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { useProfileContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport SelectionCard from 'views/ProfileCreation/SelectionCard'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation } from 'state/nftMarket/types'\r\n\r\ntype ChangeProfilePicPageProps = InjectedModalProps\r\n\r\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\r\n  const [selectedNft, setSelectedNft] = useState({\r\n    tokenId: null,\r\n    collectionAddress: null,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { nfts } = useUserNfts()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const profileContract = useProfileContract()\r\n  const { account, library } = useWeb3React()\r\n  const { toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const nftsInWallet = nfts.filter((nft) => nft.location === NftLocation.WALLET)\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onApprove: () => {\r\n        const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\r\n        return callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\r\n      },\r\n      onConfirm: () => {\r\n        if (!profile.isActive) {\r\n          return callWithGasPrice(profileContract, 'reactivateProfile', [\r\n            selectedNft.collectionAddress,\r\n            selectedNft.tokenId,\r\n          ])\r\n        }\r\n\r\n        return callWithGasPrice(profileContract, 'updateProfile', [selectedNft.collectionAddress, selectedNft.tokenId])\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        // Re-fetch profile\r\n        await dispatch(fetchProfile(account))\r\n        toastSuccess(t('Profile Updated!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Choose a new Collectible to use as your profile pic.')}\r\n      </Text>\r\n      <Box maxHeight=\"300px\" overflowY=\"scroll\">\r\n        {nftsInWallet.map((walletNft) => {\r\n          const handleChange = () => {\r\n            setSelectedNft({\r\n              tokenId: walletNft.tokenId,\r\n              collectionAddress: walletNft.collectionAddress,\r\n            })\r\n          }\r\n          return (\r\n            <SelectionCard\r\n              name=\"profilePicture\"\r\n              key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\r\n              value={walletNft.tokenId}\r\n              image={walletNft.image.thumbnail}\r\n              isChecked={walletNft.tokenId === selectedNft.tokenId}\r\n              onChange={handleChange}\r\n              disabled={isApproving || isConfirming || isConfirmed}\r\n            >\r\n              <Text bold>{walletNft.name}</Text>\r\n            </SelectionCard>\r\n          )\r\n        })}\r\n      </Box>\r\n      {nfts.length === 0 && (\r\n        <>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\r\n          </Text>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\r\n          </Text>\r\n        </>\r\n      )}\r\n      <ApproveConfirmButtons\r\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\r\n        isApproving={isApproving}\r\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\r\n        isConfirming={isConfirming}\r\n        onApprove={handleApprove}\r\n        onConfirm={handleConfirm}\r\n      />\r\n      <Button mt=\"8px\" variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChangeProfilePicPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface ApproveCakePageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n}\r\n\r\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\r\n  const [isApproving, setIsApproving] = useState(false)\r\n  const { profile } = useProfile()\r\n  const { t } = useTranslation()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const cakeContract = useCake()\r\n  const { toastError } = useToast()\r\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.mul(2).toString())\r\n    setIsApproving(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      goToChange()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsApproving(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\r\n        <Text>{formatBigNumber(cost)} CAKE</Text>\r\n      </Flex>\r\n      <Button\r\n        disabled={isApproving}\r\n        isLoading={isApproving}\r\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        width=\"100%\"\r\n        mb=\"8px\"\r\n        onClick={handleApprove}\r\n      >\r\n        {t('Enable')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveCakePage\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport useEditProfile, { Views } from './reducer'\r\nimport StartView from './StartView'\r\nimport PauseProfileView from './PauseProfileView'\r\nimport ChangeProfilePicView from './ChangeProfilePicView'\r\nimport ApproveCakeView from './ApproveCakeView'\r\n\r\ntype EditProfileModalProps = InjectedModalProps\r\n\r\nconst viewTitle = (t: ContextApi['t'], currentView: Views) => {\r\n  switch (currentView) {\r\n    case Views.START:\r\n      return t('Edit Profile')\r\n    case Views.CHANGE:\r\n      return t('Change Profile Pic')\r\n    case Views.REMOVE:\r\n      return t('Remove Profile Pic')\r\n    case Views.APPROVE:\r\n      return t('Enable CAKE')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\r\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\r\n  const { t } = useTranslation()\r\n\r\n  const isStartView = currentView === Views.START\r\n  const handleBack = isStartView ? null : () => goPrevious()\r\n\r\n  return (\r\n    <Modal title={viewTitle(t, currentView)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\r\n      <div style={{ maxWidth: '400px' }}>\r\n        {currentView === Views.START && (\r\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\r\n        )}\r\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\r\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\r\n        {currentView === Views.APPROVE && <ApproveCakeView goToChange={goToChange} onDismiss={onDismiss} />}\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EditProfileModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\r\n\r\nconst GridItem = styled(Flex)`\r\n  align-items: center;\r\n`\r\n\r\nconst LoadingRow: React.FC = () => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <tr>\r\n      <Td>\r\n        <GridItem>\r\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\r\n        </GridItem>\r\n      </Td>\r\n      <Td>\r\n        <GridItem justifyContent=\"flex-end\">\r\n          <Skeleton height={[66, null, 24]} width={64} />\r\n        </GridItem>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={42} width={64} />\r\n            </GridItem>\r\n          </Td>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={48} width={124} />\r\n            </GridItem>\r\n          </Td>\r\n        </>\r\n      )}\r\n      <Td>\r\n        <GridItem justifyContent=\"center\">\r\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\r\n        </GridItem>\r\n      </Td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst TableLoader: React.FC = () => (\r\n  <>\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n  </>\r\n)\r\n\r\nexport default TableLoader\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\r\n\r\ninterface ActivityEventTextProps extends TextProps {\r\n  marketEvent: MarketEvent\r\n}\r\n\r\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const events = {\r\n    [MarketEvent.NEW]: {\r\n      text: t('Listed'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.CANCEL]: {\r\n      text: t('Delisted'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.MODIFY]: {\r\n      text: t('Modified'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.BUY]: {\r\n      text: t('Bought'),\r\n      color: 'success',\r\n    },\r\n    [MarketEvent.SELL]: {\r\n      text: t('Sold'),\r\n      color: 'failure',\r\n    },\r\n  }\r\n\r\n  return (\r\n    <Text {...props} color={events[marketEvent].color}>\r\n      {events[marketEvent].text}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default ActivityEventText\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, Link, BinanceIcon, Box } from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { LightGreyCard } from 'components/Card'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { getBscScanLink } from 'utils'\r\nimport ActivityEventText from './ActivityEventText'\r\nimport NFTMedia from '../NFTMedia'\r\n\r\ninterface MobileModalProps extends InjectedModalProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  localeTimestamp: string\r\n  isUserActivity?: boolean\r\n}\r\n\r\nconst MobileModal: React.FC<MobileModalProps> = ({\r\n  nft,\r\n  activity,\r\n  bnbBusdPrice,\r\n  localeTimestamp,\r\n  onDismiss,\r\n  isUserActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\r\n\r\n  return (\r\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\r\n          <Box width={68} mr=\"16px\">\r\n            <NFTMedia nft={nft} width={68} height={68} />\r\n          </Box>\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            <Text bold textAlign=\"right\">\r\n              {nft.name}\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <LightGreyCard p=\"16px\">\r\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\r\n            {priceAsFloat ? (\r\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\r\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n                <Text mr=\"4px\" bold>\r\n                  {priceAsFloat}\r\n                </Text>\r\n                <Text color=\"textSubtle\">\r\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })})`}\r\n                </Text>\r\n              </Flex>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </Flex>\r\n          {isUserActivity ? (\r\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('From/To')}\r\n              </Text>\r\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\r\n            </Flex>\r\n          ) : (\r\n            <>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('From')}\r\n                </Text>\r\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\r\n              </Flex>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('To')}\r\n                </Text>\r\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text fontSize=\"14px\" color=\"textSubtle\">\r\n              {t('Date')}\r\n            </Text>\r\n            <Text>{localeTimestamp}</Text>\r\n          </Flex>\r\n        </LightGreyCard>\r\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\r\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            {t('View on BscScan')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default MobileModal\r\n","import React from 'react'\r\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\n\r\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n      {price ? (\r\n        <>\r\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\r\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n            <Text maxWidth=\"80px\" bold>\r\n              {price.toLocaleString(undefined, {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 5,\r\n              })}\r\n            </Text>\r\n          </Flex>\r\n          {priceInUsd ? (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2,\r\n              })})`}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"18px\" width=\"42px\" />\r\n          )}\r\n        </>\r\n      ) : (\r\n        '-'\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ActivityPrice\r\n","import React from 'react'\r\nimport { Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal, Box } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\r\nimport MobileModal from './MobileModal'\r\nimport ActivityPrice from './ActivityPrice'\r\nimport ActivityEventText from './ActivityEventText'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\r\nimport NFTMedia from '../NFTMedia'\r\n\r\ninterface ActivityRowProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  isUserActivity?: boolean\r\n  isNftActivity?: boolean\r\n}\r\n\r\nconst ActivityRow: React.FC<ActivityRowProps> = ({\r\n  activity,\r\n  bnbBusdPrice,\r\n  nft,\r\n  isUserActivity = false,\r\n  isNftActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\r\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n  })\r\n  const [onPresentMobileModal] = useModal(\r\n    <MobileModal\r\n      nft={nft}\r\n      activity={activity}\r\n      localeTimestamp={localeTimestamp}\r\n      bnbBusdPrice={bnbBusdPrice}\r\n      isUserActivity={isUserActivity}\r\n    />,\r\n  )\r\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\r\n  const tokenId =\r\n    nft && isPBCollection\r\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\r\n      : nft\r\n      ? nft.tokenId\r\n      : null\r\n\r\n  return (\r\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })} data-test=\"nft-activity-row\">\r\n      {!isNftActivity ? (\r\n        <Td\r\n          {...((isXs || isSm) && {\r\n            onClick: (event) => {\r\n              event.stopPropagation()\r\n            },\r\n          })}\r\n        >\r\n          <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\r\n            <Box width={64} height={64} mr={[0, null, '16px']} mb={['8px', null, 0]}>\r\n              <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\r\n                <NFTMedia nft={nft} width={64} height={64} />\r\n              </RouterLink>\r\n            </Box>\r\n            <Flex flexDirection=\"column\">\r\n              <Text\r\n                as={RouterLink}\r\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}` : ``}\r\n                textAlign={['center', null, 'left']}\r\n                color=\"textSubtle\"\r\n                fontSize=\"14px\"\r\n              >\r\n                {nft?.collectionName}\r\n              </Text>\r\n              <Text\r\n                as={RouterLink}\r\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}\r\n                textAlign={['center', null, 'left']}\r\n                bold\r\n              >\r\n                {nft?.name}\r\n              </Text>\r\n            </Flex>\r\n          </Flex>\r\n        </Td>\r\n      ) : null}\r\n      <Td>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <ActivityEventText marketEvent={activity.marketEvent} />\r\n        </Flex>\r\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\r\n          </Td>\r\n          {isUserActivity ? (\r\n            <Td>\r\n              <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\r\n              </Flex>\r\n            </Td>\r\n          ) : (\r\n            <>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      <Td>\r\n        <Flex justifyContent=\"center\">\r\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\r\n            {localeTimestamp}\r\n          </Text>\r\n        </Flex>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <Td>\r\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Td>\r\n      )}\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ActivityRow\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\r\nimport EditProfileModal from '../Profile/components/EditProfileModal'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../constants'\r\n\r\nexport const StyledModal = styled(Modal)`\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst TextWrapper = styled(Flex)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\ninterface ProfileNftModalProps extends InjectedModalProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss }) => {\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  const itemPageUrlId = nft.collectionAddress === pancakeBunniesAddress ? nft.attributes[0].value : nft.tokenId\r\n\r\n  return (\r\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex p=\"16px\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n            <Text bold>{nft.name}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            {/* TODO: Add lowestPrice when available */}\r\n          </Grid>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\r\n          <Flex flex=\"2\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Token ID: %id%', { id: nft.tokenId })}\r\n            </Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\" flex=\"3\">\r\n            <Button\r\n              as={Link}\r\n              p=\"0px\"\r\n              height=\"16px\"\r\n              external\r\n              variant=\"text\"\r\n              href={`${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\r\n            >\r\n              {t('View Item')}\r\n            </Button>\r\n            <HorizontalDivider />\r\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\r\n              BscScan\r\n            </LinkExternal>\r\n          </Flex>\r\n        </Flex>\r\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\r\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\r\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\r\n            {t(\r\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\r\n            )}\r\n          </Text>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {t('Go to your profile page to continue.')}\r\n          </Text>\r\n        </TextWrapper>\r\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\r\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\r\n            {t('Remove Profile Pic')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default ProfileNftModal\r\n"],"sourceRoot":""}