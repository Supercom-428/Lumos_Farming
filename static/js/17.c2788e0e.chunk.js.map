{"version":3,"sources":["views/ProfileCreation/UserName.tsx","views/ProfileCreation/config.ts","views/ProfileCreation/contexts/ProfileCreationProvider.tsx","views/ProfileCreation/Header.tsx","views/ProfileCreation/WalletNotConnected.tsx","views/ProfileCreation/NextStepButton.tsx","views/ProfileCreation/contexts/hook.ts","views/ProfileCreation/Mint.tsx","views/ProfileCreation/ProfilePicture.tsx","views/ProfileCreation/TeamSelection.tsx","state/teams/hooks.ts","utils/fetchWithTimeout.ts","views/ProfileCreation/ConfirmProfileCreationModal.tsx","views/ProfileCreation/Steps.tsx","views/ProfileCreation/index.tsx","state/nftMarket/hooks.ts","hooks/useApproveConfirmTransaction.tsx","components/ApproveConfirmButtons.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx"],"names":["ExistingUserState","MINT_COST","parseUnits","REGISTER_COST","STARTER_NFT_BUNNY_IDS","totalCost","add","allowance","mul","initialState","isInitialized","currentStep","teamId","selectedNft","collectionAddress","tokenId","userName","minimumCakeRequired","reducer","state","action","type","step","ProfileCreationContext","createContext","ProfileCreationProvider","children","useReducer","dispatch","account","useWeb3React","useEffect","isSubscribed","a","bunnyFactoryContract","getBunnyFactoryContract","canMint","fetchData","actions","useMemo","nextStep","setTeamId","setSelectedNft","setUserName","Provider","value","Wrapper","styled","div","theme","colors","textSubtle","steps","Header","t","useTranslation","useContext","as","scale","color","mb","id","href","nftsBaseUrl","variant","map","translationKey","index","WalletNotConnected","ConnectWalletButton","NextStepButton","props","endIcon","useProfileCreation","Mint","useState","selectedBunnyId","setSelectedBunnyId","starterNfts","setStarterNfts","collections","useGetCollections","toastSuccess","useToast","useAppDispatch","cakeContract","useCake","useBunnyFactory","useGetCakeBalance","cakeBalance","balance","hasMinimumCakeRequired","fetchStatus","FetchStatus","Fetched","gte","callWithGasPrice","useCallWithGasPrice","getStarterNfts","getNftsFromCollectionApi","pancakeBunniesAddress","allPbTokens","data","nfts","bunnyId","length","useApproveConfirmTransaction","onRequiresApproval","address","response","onApprove","toString","onConfirm","onApproveSuccess","onSuccess","fetchUserNfts","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","fontSize","bold","num","formatUnits","nft","SelectionCard","name","image","thumbnail","isChecked","onChange","disabled","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","onClick","Link","RouterLink","primary","NftWrapper","ProfilePicture","library","setIsApproved","setIsApproving","userProfileCreationNfts","setUserProfileCreationNfts","profileContract","useProfileContract","useUserNfts","userNftsInitializationState","fetchUserPancakeCollectibles","nftsByCollection","Array","from","reduce","acc","Set","NFT_ROLE","nftRole","collectionsNftRoleCalls","params","multicall","profileABI","collectionRolesRaw","collectionRoles","flat","filter","indexOf","console","error","UserNftInitializationState","INITIALIZED","toastError","contract","getErc721Contract","getSigner","getPancakeProfileAddress","tx","Toast","txHash","hash","wait","status","to","style","marginLeft","walletNft","location","NftLocation","WALLET","width","height","isLoading","spin","undefined","Team","currentTeamId","teams","useSelector","fetchTeams","useTeams","handleTeamSelection","parseInt","teamValues","shuffle","Object","values","team","images","md","isJoinable","mr","users","toLocaleString","fetchWithTimeout","url","options","timeout","fetchOptions","Promise","race","fetch","_","reject","setTimeout","Error","ConfirmProfileCreationModal","onDismiss","toJSON","receipt","fetchProfile","transactionHash","title","justifyContent","InputWrap","Input","UIKitInput","Indicator","Flex","UserName","isAcknowledged","setIsAcknowledged","useWeb3Provider","connector","IDLE","existingUserState","setExistingUserState","isValid","setIsValid","setIsLoading","message","setMessage","fetchAbortSignal","useRef","useModal","onPresentConfirmProfileCreation","isUserCreated","CREATED","usernameToCheck","setUsernameToCheck","debouncedUsernameToCheck","useDebounce","fetchUsernameToCheck","abortSignal","current","API_PROFILE","method","signal","res","ok","json","abort","AbortController","signMessage","signature","headers","body","JSON","stringify","username","dateCreated","formatDistance","parseISO","created_at","Date","NEW","fetchUser","event","target","isWarning","isSuccess","minLength","maxLength","placeholder","py","minHeight","htmlFor","display","cursor","marginBottom","alignItems","flex","checked","ml","mt","Steps","TeamSelection","ProfileCreation","useProfile","hasProfile","useFetchUserNfts","useFetchCollections","PageLoader","toLowerCase","Page","fetchCollections","useFetchCollection","fetchCollection","useFetchByBunnyIdAndUpdate","nftMarket","loadingState","latestPancakeBunniesUpdateAt","isUpdatingPancakeBunnies","existingBunniesInState","useGetAllBunniesByBunnyId","existingTokensWithBunnyId","allPancakeBunnies","useNftsFromCollection","allExistingPBTokenIds","firstBunny","existingMetadata","description","collection","collectionName","fetchMorePancakeBunnies","orderDirection","fetchNewPBAndUpdateExisting","useLoadingState","useGetCollection","checksummedCollectionAddress","isAddress","attributes","marketData","isTradable","useGetNFTInitializationState","initializationState","user","useGetNftFilters","collectionFilter","filters","activeFilters","useGetNftFilterLoadingState","Idle","useGetNftOrdering","ordering","field","direction","useGetNftShowOnlyOnSale","showOnlyOnSale","useGetNftActivityFilters","activityFilters","typeFilters","collectionFilters","approvalState","confirmState","noop","handlePreApprove","then","result","hasApproveFailed","hasConfirmFailed","logError","ButtonArrangement","StyledApproveConfirmButtonRow","mediaQueries","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","profile","isProfileInitialized","isProfileLoading","hasProfileNft","profileNftTokenId","profileNftCollectionAddress","profileNftWithCollectionAddress","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UNINITIALIZED","hasAccountSwitched","isEmpty","Label","label","isDisabled","Body","Children","StyledBackgroundImage","src","e"],"mappings":"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","file":"static/js/17.c2788e0e.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Text,\r\n  Input as UIKitInput,\r\n  Button,\r\n  AutoRenewIcon,\r\n  CheckmarkIcon,\r\n  Flex,\r\n  WarningIcon,\r\n  useModal,\r\n  Skeleton,\r\n  Checkbox,\r\n} from '@pancakeswap/uikit'\r\nimport { parseISO, formatDistance } from 'date-fns'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { formatUnits } from '@ethersproject/units'\r\nimport { API_PROFILE } from 'config/constants/endpoints'\r\nimport useToast from 'hooks/useToast'\r\nimport { useGetCakeBalance } from 'hooks/useTokenBalance'\r\nimport { signMessage } from 'utils/web3React'\r\nimport fetchWithTimeout from 'utils/fetchWithTimeout'\r\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport ConfirmProfileCreationModal from './ConfirmProfileCreationModal'\r\nimport useProfileCreation from './contexts/hook'\r\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\r\nimport useDebounce from '../../hooks/useDebounce'\r\n\r\nenum ExistingUserState {\r\n  IDLE = 'idle', // initial state\r\n  CREATED = 'created', // username has already been created\r\n  NEW = 'new', // username has not been created\r\n}\r\n\r\nconst InputWrap = styled.div`\r\n  position: relative;\r\n  max-width: 240px;\r\n`\r\n\r\nconst Input = styled(UIKitInput)`\r\n  padding-right: 40px;\r\n`\r\n\r\nconst Indicator = styled(Flex)`\r\n  align-items: center;\r\n  height: 24px;\r\n  justify-content: center;\r\n  margin-top: -12px;\r\n  position: absolute;\r\n  right: 16px;\r\n  top: 50%;\r\n  width: 24px;\r\n`\r\n\r\nconst UserName: React.FC = () => {\r\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\r\n  const { teamId, selectedNft, userName, actions, minimumCakeRequired, allowance } = useProfileCreation()\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { toastError } = useToast()\r\n  const { library, connector } = useWeb3Provider()\r\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.IDLE)\r\n  const [isValid, setIsValid] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [message, setMessage] = useState('')\r\n  const fetchAbortSignal = useRef<AbortController>(null)\r\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\r\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.Fetched && cakeBalance.gte(REGISTER_COST)\r\n  const [onPresentConfirmProfileCreation] = useModal(\r\n    <ConfirmProfileCreationModal\r\n      userName={userName}\r\n      selectedNft={selectedNft}\r\n      account={account}\r\n      teamId={teamId}\r\n      minimumCakeRequired={minimumCakeRequired}\r\n      allowance={allowance}\r\n    />,\r\n    false,\r\n  )\r\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\r\n\r\n  const [usernameToCheck, setUsernameToCheck] = useState<string>(undefined)\r\n  const debouncedUsernameToCheck = useDebounce(usernameToCheck, 200)\r\n\r\n  useEffect(() => {\r\n    const fetchUsernameToCheck = async (abortSignal) => {\r\n      try {\r\n        setIsLoading(true)\r\n        if (!debouncedUsernameToCheck) {\r\n          setIsValid(false)\r\n          setMessage('')\r\n          fetchAbortSignal.current = null\r\n        } else {\r\n          const res = await fetchWithTimeout(`${API_PROFILE}/api/users/valid/${debouncedUsernameToCheck}`, {\r\n            method: 'get',\r\n            signal: abortSignal,\r\n            timeout: 30000,\r\n          })\r\n\r\n          fetchAbortSignal.current = null\r\n\r\n          if (res.ok) {\r\n            setIsValid(true)\r\n            setMessage('')\r\n          } else {\r\n            const data = await res.json()\r\n            setIsValid(false)\r\n            setMessage(data?.error?.message)\r\n          }\r\n        }\r\n      } catch (e) {\r\n        setIsValid(false)\r\n        if (e instanceof Error && e.name !== 'AbortError') {\r\n          setMessage(t('Error fetching data'))\r\n          console.error(e)\r\n        }\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    if (fetchAbortSignal.current) {\r\n      fetchAbortSignal.current.abort()\r\n    }\r\n\r\n    fetchAbortSignal.current = new AbortController()\r\n\r\n    fetchUsernameToCheck(fetchAbortSignal.current.signal)\r\n  }, [debouncedUsernameToCheck, t])\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target\r\n    actions.setUserName(value)\r\n    setUsernameToCheck(value)\r\n  }\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      setIsLoading(true)\r\n\r\n      const signature = await signMessage(connector, library, account, userName)\r\n      const response = await fetch(`${API_PROFILE}/api/users/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          address: account,\r\n          username: userName,\r\n          signature,\r\n        }),\r\n      })\r\n\r\n      if (response.ok) {\r\n        setExistingUserState(ExistingUserState.CREATED)\r\n      } else {\r\n        const data = await response.json()\r\n        toastError(t('Error'), data?.error?.message)\r\n      }\r\n    } catch (error) {\r\n      toastError(error instanceof Error && error?.message ? error.message : JSON.stringify(error))\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged)\r\n\r\n  // Perform an initial check to see if the wallet has already created a username\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      try {\r\n        const response = await fetch(`${API_PROFILE}/api/users/${account}`)\r\n        const data = await response.json()\r\n\r\n        if (response.ok) {\r\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date())\r\n          setMessage(t('Created %dateCreated% ago', { dateCreated }))\r\n\r\n          actions.setUserName(data.username)\r\n          setExistingUserState(ExistingUserState.CREATED)\r\n          setIsValid(true)\r\n        } else {\r\n          setExistingUserState(ExistingUserState.NEW)\r\n        }\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Unable to verify username'))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchUser()\r\n    }\r\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError, t])\r\n\r\n  return (\r\n    <>\r\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\r\n        {t('Step %num%', { num: 4 })}\r\n      </Text>\r\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\r\n        {t('Set Your Name')}\r\n      </Heading>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This name will be shown in team leaderboards and search results as long as your profile is active.')}\r\n      </Text>\r\n      <Card mb=\"24px\">\r\n        <CardBody>\r\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\r\n            {t('Set Your Name')}\r\n          </Heading>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t(\r\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You can’t change this once you click Confirm.',\r\n            )}\r\n          </Text>\r\n          {existingUserState === ExistingUserState.IDLE ? (\r\n            <Skeleton height=\"40px\" width=\"240px\" />\r\n          ) : (\r\n            <InputWrap>\r\n              <Input\r\n                onChange={handleChange}\r\n                isWarning={userName && !isValid}\r\n                isSuccess={userName && isValid}\r\n                minLength={USERNAME_MIN_LENGTH}\r\n                maxLength={USERNAME_MAX_LENGTH}\r\n                disabled={isUserCreated}\r\n                placeholder={t('Enter your name...')}\r\n                value={userName}\r\n              />\r\n              <Indicator>\r\n                {isLoading && <AutoRenewIcon spin />}\r\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\r\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\r\n              </Indicator>\r\n            </InputWrap>\r\n          )}\r\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\r\n            {message}\r\n          </Text>\r\n          <Text as=\"p\" color=\"failure\" mb=\"8px\">\r\n            {t(\r\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\r\n            )}\r\n          </Text>\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknowledge} />\r\n              </div>\r\n              <Text ml=\"8px\">{t('I understand that people can view my wallet if they know my username')}</Text>\r\n            </Flex>\r\n          </label>\r\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\r\n            {t('Confirm')}\r\n          </Button>\r\n        </CardBody>\r\n      </Card>\r\n      <Button\r\n        onClick={onPresentConfirmProfileCreation}\r\n        disabled={!isValid || !isUserCreated}\r\n        id=\"completeProfileCreation\"\r\n      >\r\n        {t('Complete Profile')}\r\n      </Button>\r\n      {!hasMinimumCakeRequired && (\r\n        <Text color=\"failure\" mt=\"16px\">\r\n          {t('A minimum of %num% CAKE is required', { num: formatUnits(REGISTER_COST) })}\r\n        </Text>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserName\r\n","import { parseUnits } from '@ethersproject/units'\r\n\r\nexport const MINT_COST = parseUnits('1')\r\nexport const REGISTER_COST = parseUnits('0.5')\r\nexport const ALLOWANCE_MULTIPLIER = 5\r\nexport const STARTER_NFT_BUNNY_IDS = ['5', '6', '7', '8', '9'] // 'sleepy', 'dollop', 'twinkle', 'churro', 'sunny'\r\nexport const USERNAME_MIN_LENGTH = 3\r\nexport const USERNAME_MAX_LENGTH = 15\r\n","import React, { createContext, useEffect, useMemo, useReducer } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBunnyFactoryContract } from 'utils/contractHelpers'\r\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config'\r\nimport { Actions, State, ContextType } from './types'\r\n\r\nconst totalCost = MINT_COST.add(REGISTER_COST)\r\nconst allowance = totalCost.mul(ALLOWANCE_MULTIPLIER)\r\n\r\nconst initialState: State = {\r\n  isInitialized: false,\r\n  currentStep: 0,\r\n  teamId: null,\r\n  selectedNft: {\r\n    collectionAddress: null,\r\n    tokenId: null,\r\n  },\r\n  userName: '',\r\n  minimumCakeRequired: totalCost,\r\n  allowance,\r\n}\r\n\r\nconst reducer = (state: State, action: Actions): State => {\r\n  switch (action.type) {\r\n    case 'initialize':\r\n      return {\r\n        ...state,\r\n        isInitialized: true,\r\n        currentStep: action.step,\r\n      }\r\n    case 'next_step':\r\n      return {\r\n        ...state,\r\n        currentStep: state.currentStep + 1,\r\n      }\r\n    case 'set_team':\r\n      return {\r\n        ...state,\r\n        teamId: action.teamId,\r\n      }\r\n    case 'set_selected_nft':\r\n      return {\r\n        ...state,\r\n        selectedNft: {\r\n          tokenId: action.tokenId,\r\n          collectionAddress: action.collectionAddress,\r\n        },\r\n      }\r\n    case 'set_username':\r\n      return {\r\n        ...state,\r\n        userName: action.userName,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const ProfileCreationContext = createContext<ContextType>(null)\r\n\r\nconst ProfileCreationProvider: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const { account } = useWeb3React()\r\n\r\n  // Initial checks\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n\r\n    const fetchData = async () => {\r\n      const bunnyFactoryContract = getBunnyFactoryContract()\r\n      const canMint = await bunnyFactoryContract.canMint(account)\r\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\r\n\r\n      // When changing wallets quickly unmounting before the hasClaim finished causes a React error\r\n      if (isSubscribed) {\r\n        dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchData()\r\n    }\r\n\r\n    return () => {\r\n      isSubscribed = false\r\n    }\r\n  }, [account, dispatch])\r\n\r\n  const actions: ContextType['actions'] = useMemo(\r\n    () => ({\r\n      nextStep: () => dispatch({ type: 'next_step' }),\r\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\r\n      setSelectedNft: (tokenId: string, collectionAddress: string) =>\r\n        dispatch({ type: 'set_selected_nft', tokenId, collectionAddress }),\r\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\r\n    }),\r\n    [dispatch],\r\n  )\r\n\r\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\r\n}\r\n\r\nexport default ProfileCreationProvider\r\n","import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Breadcrumbs, Heading, Text, Link, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\r\n\r\nconst Wrapper = styled.div`\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-top: 32px;\r\n  margin-bottom: 24px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst steps = ['Get Starter Collectible', 'Set Profile Picture', 'Join Team', 'Set Name']\r\n\r\nconst Header: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const { currentStep } = useContext(ProfileCreationContext)\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"8px\" id=\"profile-setup-title\">\r\n        {t('Profile Setup')}\r\n      </Heading>\r\n      <Heading as=\"h2\" scale=\"lg\" mb=\"8px\">\r\n        {t('Show off your stats and collectibles with your unique profile')}\r\n      </Heading>\r\n      <Text color=\"textSubtle\" mb=\"8px\">\r\n        {t('Total cost: 1.5 CAKE')}\r\n      </Text>\r\n      <Link href={`${nftsBaseUrl}/profile`}>\r\n        <Button mb=\"24px\" scale=\"sm\" variant=\"secondary\">\r\n          {t('Back to profile')}\r\n        </Button>\r\n      </Link>\r\n      <Breadcrumbs>\r\n        {steps.map((translationKey, index) => {\r\n          return (\r\n            <Text key={translationKey} color={index <= currentStep ? 'text' : 'textDisabled'}>\r\n              {t(translationKey)}\r\n            </Text>\r\n          )\r\n        })}\r\n      </Breadcrumbs>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Heading, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\n\r\nconst WalletNotConnected = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <div>\r\n      <Heading scale=\"xl\" mb=\"8px\">\r\n        {t('Oops!')}\r\n      </Heading>\r\n      <Text as=\"p\" mb=\"16px\">\r\n        {t('Please connect your wallet to continue')}\r\n      </Text>\r\n      <ConnectWalletButton />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WalletNotConnected\r\n","import React from 'react'\r\nimport { ArrowForwardIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\n\r\nconst NextStepButton: React.FC<ButtonProps> = (props) => {\r\n  return <Button endIcon={<ArrowForwardIcon color=\"currentColor\" />} {...props} />\r\n}\r\n\r\nexport default NextStepButton\r\n","import { useContext } from 'react'\r\nimport { ProfileCreationContext } from './ProfileCreationProvider'\r\n\r\nconst useProfileCreation = () => {\r\n  return useContext(ProfileCreationContext)\r\n}\r\n\r\nexport default useProfileCreation\r\n","import React, { useState, useEffect } from 'react'\r\nimport { formatUnits } from '@ethersproject/units'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\r\nimport { useGetCakeBalance } from 'hooks/useTokenBalance'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport useToast from 'hooks/useToast'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\r\nimport { useGetCollections } from 'state/nftMarket/hooks'\r\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\r\nimport { ApiSingleTokenData } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport SelectionCard from './SelectionCard'\r\nimport NextStepButton from './NextStepButton'\r\nimport useProfileCreation from './contexts/hook'\r\nimport { MINT_COST, STARTER_NFT_BUNNY_IDS } from './config'\r\n\r\ninterface MintNftData extends ApiSingleTokenData {\r\n  bunnyId?: string\r\n}\r\n\r\nconst Mint: React.FC = () => {\r\n  const [selectedBunnyId, setSelectedBunnyId] = useState<string>('')\r\n  const [starterNfts, setStarterNfts] = useState<MintNftData[]>([])\r\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\r\n  const collections = useGetCollections()\r\n  const { toastSuccess } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const bunnyFactoryContract = useBunnyFactory()\r\n  const { t } = useTranslation()\r\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\r\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.Fetched && cakeBalance.gte(MINT_COST)\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  useEffect(() => {\r\n    const getStarterNfts = async () => {\r\n      const { data: allPbTokens } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      const nfts = STARTER_NFT_BUNNY_IDS.map((bunnyId) => {\r\n        if (allPbTokens && allPbTokens[bunnyId]) {\r\n          return { ...allPbTokens[bunnyId], bunnyId }\r\n        }\r\n        return undefined\r\n      })\r\n      setStarterNfts(nfts)\r\n    }\r\n    if (starterNfts.length === 0) {\r\n      getStarterNfts()\r\n    }\r\n  }, [starterNfts])\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        // TODO: Move this to a helper, this check will be probably be used many times\r\n        try {\r\n          const response = await cakeContract.allowance(account, bunnyFactoryContract.address)\r\n          return response.gte(minimumCakeRequired)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return callWithGasPrice(cakeContract, 'approve', [bunnyFactoryContract.address, allowance.toString()])\r\n      },\r\n      onConfirm: () => {\r\n        return callWithGasPrice(bunnyFactoryContract, 'mintNFT', [selectedBunnyId])\r\n      },\r\n      onApproveSuccess: () => {\r\n        toastSuccess(t('Enabled'), t(\"Press 'confirm' to mint this NFT\"))\r\n      },\r\n      onSuccess: () => {\r\n        toastSuccess(t('Success'), t('You have minted your starter NFT'))\r\n        dispatch(fetchUserNfts({ account, collections }))\r\n        actions.nextStep()\r\n      },\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\r\n        {t('Step %num%', { num: 1 })}\r\n      </Text>\r\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\r\n        {t('Get Starter Collectible')}\r\n      </Heading>\r\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\r\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('You can change your profile pic later if you get another approved Pancake Collectible.')}\r\n      </Text>\r\n      <Card mb=\"24px\">\r\n        <CardBody>\r\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\r\n            {t('Choose your Starter!')}\r\n          </Heading>\r\n          <Text as=\"p\" color=\"textSubtle\">\r\n            {t('Choose wisely: you can only ever make one starter collectible!')}\r\n          </Text>\r\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\r\n            {t('Cost: %num% CAKE', { num: formatUnits(MINT_COST) })}\r\n          </Text>\r\n          {starterNfts.map((nft) => {\r\n            const handleChange = (value: string) => setSelectedBunnyId(value)\r\n\r\n            return (\r\n              <SelectionCard\r\n                key={nft?.name}\r\n                name=\"mintStarter\"\r\n                value={nft?.bunnyId}\r\n                image={nft?.image.thumbnail}\r\n                isChecked={selectedBunnyId === nft?.bunnyId}\r\n                onChange={handleChange}\r\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\r\n              >\r\n                <Text bold>{nft?.name}</Text>\r\n              </SelectionCard>\r\n            )\r\n          })}\r\n          {!hasMinimumCakeRequired && (\r\n            <Text color=\"failure\" mb=\"16px\">\r\n              {t('A minimum of %num% CAKE is required', { num: formatUnits(MINT_COST) })}\r\n            </Text>\r\n          )}\r\n          <ApproveConfirmButtons\r\n            isApproveDisabled={selectedBunnyId === null || isConfirmed || isConfirming || isApproved}\r\n            isApproving={isApproving}\r\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\r\n            isConfirming={isConfirming}\r\n            onApprove={handleApprove}\r\n            onConfirm={handleConfirm}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\r\n        {t('Next Step')}\r\n      </NextStepButton>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Mint\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport useToast from 'hooks/useToast'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport SelectionCard from './SelectionCard'\r\nimport NextStepButton from './NextStepButton'\r\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\r\nimport { useProfileContract } from '../../hooks/useContract'\r\nimport multicall from '../../utils/multicall'\r\nimport profileABI from '../../config/abi/pancakeProfile.json'\r\n\r\nconst Link = styled(RouterLink)`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n`\r\n\r\nconst NftWrapper = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst ProfilePicture: React.FC = () => {\r\n  const { library } = useWeb3React()\r\n  const [isApproved, setIsApproved] = useState(false)\r\n  const [isApproving, setIsApproving] = useState(false)\r\n  const [userProfileCreationNfts, setUserProfileCreationNfts] = useState(null)\r\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\r\n  const profileContract = useProfileContract(false)\r\n\r\n  const { nfts, userNftsInitializationState } = useUserNfts()\r\n\r\n  useEffect(() => {\r\n    const fetchUserPancakeCollectibles = async () => {\r\n      try {\r\n        const nftsByCollection = Array.from(\r\n          nfts.reduce((acc, value) => {\r\n            acc.add(value.collectionAddress)\r\n            return acc\r\n          }, new Set<string>()),\r\n        )\r\n\r\n        if (nftsByCollection.length > 0) {\r\n          const nftRole = await profileContract.NFT_ROLE()\r\n          const collectionsNftRoleCalls = nftsByCollection.map((collectionAddress) => {\r\n            return {\r\n              address: profileContract.address,\r\n              name: 'hasRole',\r\n              params: [nftRole, collectionAddress],\r\n            }\r\n          })\r\n          const collectionRolesRaw = await multicall(profileABI, collectionsNftRoleCalls)\r\n          const collectionRoles = collectionRolesRaw.flat()\r\n          setUserProfileCreationNfts(\r\n            nfts.filter((nft) => collectionRoles[nftsByCollection.indexOf(nft.collectionAddress)]),\r\n          )\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n    if (userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\r\n      fetchUserPancakeCollectibles()\r\n    }\r\n  }, [nfts, profileContract, userNftsInitializationState])\r\n\r\n  const { t } = useTranslation()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const handleApprove = async () => {\r\n    const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\r\n    const tx = await callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\r\n    toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n    setIsApproving(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      toastSuccess(t('Enabled'), t('Please progress to the next step.'))\r\n      setIsApproving(false)\r\n      setIsApproved(true)\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsApproving(false)\r\n    }\r\n  }\r\n\r\n  if (userProfileCreationNfts?.length === 0) {\r\n    return (\r\n      <>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Oops!')}\r\n        </Heading>\r\n        <Text bold fontSize=\"20px\" mb=\"24px\">\r\n          {t('We couldn’t find any Pancake Collectibles in your wallet.')}\r\n        </Text>\r\n        <Text as=\"p\">\r\n          {t(\r\n            'You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\r\n          )}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\r\n        {t('Step %num%', { num: 2 })}\r\n      </Text>\r\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\r\n        {t('Set Profile Picture')}\r\n      </Heading>\r\n      <Card mb=\"24px\">\r\n        <CardBody>\r\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\r\n            {t('Choose collectible')}\r\n          </Heading>\r\n          <Text as=\"p\" color=\"textSubtle\">\r\n            {t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')}\r\n          </Text>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Only approved Pancake Collectibles can be used.')}\r\n            <Link to={`${nftsBaseUrl}/collections`} style={{ marginLeft: '4px' }}>\r\n              {t('See the list >')}\r\n            </Link>\r\n          </Text>\r\n          <NftWrapper>\r\n            {userProfileCreationNfts?.length > 0 ? (\r\n              userProfileCreationNfts\r\n                .filter((walletNft) => walletNft.location === NftLocation.WALLET)\r\n                .map((walletNft) => {\r\n                  return (\r\n                    <SelectionCard\r\n                      name=\"profilePicture\"\r\n                      key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\r\n                      value={walletNft.tokenId}\r\n                      image={walletNft.image.thumbnail}\r\n                      isChecked={walletNft.tokenId === selectedNft.tokenId}\r\n                      onChange={(value: string) => actions.setSelectedNft(value, walletNft.collectionAddress)}\r\n                    >\r\n                      <Text bold>{walletNft.name}</Text>\r\n                    </SelectionCard>\r\n                  )\r\n                })\r\n            ) : (\r\n              <Skeleton width=\"100%\" height=\"64px\" />\r\n            )}\r\n          </NftWrapper>\r\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\r\n            {t('Allow collectible to be locked')}\r\n          </Heading>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\r\n            {t(\r\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\r\n            )}\r\n          </Text>\r\n          <Button\r\n            isLoading={isApproving}\r\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\r\n            onClick={handleApprove}\r\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\r\n            id=\"approveStarterCollectible\"\r\n          >\r\n            {t('Enable')}\r\n          </Button>\r\n        </CardBody>\r\n      </Card>\r\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\r\n        {t('Next Step')}\r\n      </NextStepButton>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfilePicture\r\n","import React, { useMemo } from 'react'\r\nimport { Card, CardBody, CommunityIcon, Flex, Heading, Text } from '@pancakeswap/uikit'\r\nimport shuffle from 'lodash/shuffle'\r\nimport { useTeams } from 'state/teams/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport SelectionCard from './SelectionCard'\r\nimport NextStepButton from './NextStepButton'\r\nimport useProfileCreation from './contexts/hook'\r\n\r\nconst Team: React.FC = () => {\r\n  const { teamId: currentTeamId, actions } = useProfileCreation()\r\n  const { t } = useTranslation()\r\n  const { teams } = useTeams()\r\n  const handleTeamSelection = (value: string) => actions.setTeamId(parseInt(value, 10))\r\n  const teamValues = useMemo(() => shuffle(Object.values(teams)), [teams])\r\n\r\n  return (\r\n    <>\r\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\r\n        {t('Step %num%', { num: 3 })}\r\n      </Text>\r\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\r\n        {t('Join a Team')}\r\n      </Heading>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('It won’t be possible to undo the choice you make for the foreseeable future!')}\r\n      </Text>\r\n      <Card mb=\"24px\">\r\n        <CardBody>\r\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\r\n            {t('Join a Team')}\r\n          </Heading>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t(\r\n              'There’s currently no big difference between teams, and no benefit of joining one team over another for now. So pick whichever one you like!',\r\n            )}\r\n          </Text>\r\n          {teamValues &&\r\n            teamValues.map((team) => {\r\n              return (\r\n                <SelectionCard\r\n                  key={team.name}\r\n                  name=\"teams-selection\"\r\n                  value={team.id}\r\n                  isChecked={currentTeamId === team.id}\r\n                  image={`/images/teams/${team.images.md}`}\r\n                  onChange={handleTeamSelection}\r\n                  disabled={!team.isJoinable}\r\n                >\r\n                  <Text bold>{team.name}</Text>\r\n                  <Flex>\r\n                    <CommunityIcon mr=\"8px\" />\r\n                    <Text>{team.users.toLocaleString()}</Text>\r\n                  </Flex>\r\n                </SelectionCard>\r\n              )\r\n            })}\r\n        </CardBody>\r\n      </Card>\r\n      <NextStepButton onClick={actions.nextStep} disabled={currentTeamId === null}>\r\n        {t('Next Step')}\r\n      </NextStepButton>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Team\r\n","import { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { Team } from 'config/constants/types'\r\nimport { State, TeamsState } from '../types'\r\nimport { fetchTeam, fetchTeams } from '.'\r\n\r\nexport const useTeam = (id: number) => {\r\n  const team: Team = useSelector((state: State) => state.teams.data[id])\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTeam(id))\r\n  }, [id, dispatch])\r\n\r\n  return team\r\n}\r\n\r\nexport const useTeams = () => {\r\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTeams())\r\n  }, [dispatch])\r\n\r\n  return { teams: data, isInitialized, isLoading }\r\n}\r\n","interface FetchTimeoutOptions extends RequestInit {\r\n  timeout?: number\r\n}\r\n\r\nconst fetchWithTimeout = (url, options: FetchTimeoutOptions = {}): Promise<Response> => {\r\n  const { timeout = 10000, ...fetchOptions } = options\r\n\r\n  return Promise.race([\r\n    fetch(url, fetchOptions),\r\n    new Promise((_, reject) => {\r\n      setTimeout(() => {\r\n        reject(new Error(`Request for ${url} timed out after ${timeout} milliseconds`))\r\n      }, timeout)\r\n    }),\r\n  ]) as Promise<Response>\r\n}\r\n\r\nexport default fetchWithTimeout\r\n","import React from 'react'\r\nimport { Modal, Flex, Text } from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport { formatUnits } from '@ethersproject/units'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake, useProfileContract } from 'hooks/useContract'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useToast from 'hooks/useToast'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport { REGISTER_COST } from './config'\r\nimport { State } from './contexts/types'\r\n\r\ninterface Props {\r\n  userName: string\r\n  selectedNft: State['selectedNft']\r\n  account: string\r\n  teamId: number\r\n  minimumCakeRequired: ethers.BigNumber\r\n  allowance: ethers.BigNumber\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ConfirmProfileCreationModal: React.FC<Props> = ({\r\n  account,\r\n  teamId,\r\n  selectedNft,\r\n  minimumCakeRequired,\r\n  allowance,\r\n  onDismiss,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const profileContract = useProfileContract()\r\n  const dispatch = useAppDispatch()\r\n  const { toastSuccess } = useToast()\r\n  const cakeContract = useCake()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onRequiresApproval: async () => {\r\n        try {\r\n          const response = await cakeContract.allowance(account, profileContract.address)\r\n          return response.gte(minimumCakeRequired)\r\n        } catch (error) {\r\n          return false\r\n        }\r\n      },\r\n      onApprove: () => {\r\n        return callWithGasPrice(cakeContract, 'approve', [profileContract.address, allowance.toJSON()])\r\n      },\r\n      onConfirm: () => {\r\n        return callWithGasPrice(profileContract, 'createProfile', [\r\n          teamId,\r\n          selectedNft.collectionAddress,\r\n          selectedNft.tokenId,\r\n        ])\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        await dispatch(fetchProfile(account))\r\n        onDismiss()\r\n        toastSuccess(t('Profile created!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      },\r\n    })\r\n\r\n  return (\r\n    <Modal title={t('Complete Profile')} onDismiss={onDismiss}>\r\n      <Text color=\"textSubtle\" mb=\"8px\">\r\n        {t('Submitting NFT to contract and confirming User Name and Team.')}\r\n      </Text>\r\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n        <Text>{t('Cost')}</Text>\r\n        <Text>{t('%num% CAKE', { num: formatUnits(REGISTER_COST) })}</Text>\r\n      </Flex>\r\n      <ApproveConfirmButtons\r\n        isApproveDisabled={isConfirmed || isConfirming || isApproved}\r\n        isApproving={isApproving}\r\n        isConfirmDisabled={!isApproved || isConfirmed}\r\n        isConfirming={isConfirming}\r\n        onApprove={handleApprove}\r\n        onConfirm={handleConfirm}\r\n      />\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ConfirmProfileCreationModal\r\n","import React, { useContext } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport NoWalletConnected from './WalletNotConnected'\r\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\r\nimport Mint from './Mint'\r\nimport ProfilePicture from './ProfilePicture'\r\nimport TeamSelection from './TeamSelection'\r\nimport UserName from './UserName'\r\n\r\nconst Steps = () => {\r\n  const { t } = useTranslation()\r\n  const { isInitialized, currentStep } = useContext(ProfileCreationContext)\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return <NoWalletConnected />\r\n  }\r\n\r\n  if (!isInitialized) {\r\n    return <div>{t('Loading...')}</div>\r\n  }\r\n\r\n  if (currentStep === 0) {\r\n    return <Mint />\r\n  }\r\n\r\n  if (currentStep === 1) {\r\n    return <ProfilePicture />\r\n  }\r\n\r\n  if (currentStep === 2) {\r\n    return <TeamSelection />\r\n  }\r\n\r\n  if (currentStep === 3) {\r\n    return <UserName />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default Steps\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Redirect } from 'react-router'\r\nimport Page from 'components/Layout/Page'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport useFetchUserNfts from 'views/Nft/market/Profile/hooks/useFetchUserNfts'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport { useFetchCollections } from 'state/nftMarket/hooks'\r\nimport Header from './Header'\r\nimport ProfileCreationProvider from './contexts/ProfileCreationProvider'\r\nimport Steps from './Steps'\r\n\r\nconst ProfileCreation = () => {\r\n  const { account } = useWeb3React()\r\n  const { isInitialized, isLoading, hasProfile } = useProfile()\r\n\r\n  useFetchUserNfts()\r\n  useFetchCollections()\r\n\r\n  if (!isInitialized || isLoading) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  if (account && hasProfile) {\r\n    return <Redirect to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`} />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ProfileCreationProvider>\r\n        <Page>\r\n          <Header />\r\n          <Steps />\r\n        </Page>\r\n      </ProfileCreationProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfileCreation\r\n","import { useEffect, useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { isAddress } from 'utils'\r\nimport { FetchStatus } from 'config/constants/types'\r\nimport { fetchCollection, fetchCollections, fetchNewPBAndUpdateExisting } from './reducer'\r\nimport { State } from '../types'\r\nimport { NftActivityFilter, NftFilter, NftToken, UserNftsState } from './types'\r\n\r\nconst MAX_GEN0_ID = 4\r\n\r\nexport const useFetchCollections = () => {\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    dispatch(fetchCollections())\r\n  }, [dispatch])\r\n}\r\n\r\nexport const useFetchCollection = (collectionAddress: string) => {\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    dispatch(fetchCollection(collectionAddress))\r\n  }, [dispatch, collectionAddress])\r\n}\r\n\r\n// Returns a function that fetches more NFTs for specified bunny id\r\n// as well as updating existing PB NFTs in state\r\n// Note: PancakeBunny specific\r\nexport const useFetchByBunnyIdAndUpdate = (bunnyId: string) => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const { latestPancakeBunniesUpdateAt, isUpdatingPancakeBunnies } = useSelector(\r\n    (state: State) => state.nftMarket.data.loadingState,\r\n  )\r\n\r\n  // Extra guard in case market data shifts\r\n  // we don't wanna fetch same tokens multiple times\r\n  const existingBunniesInState = useGetAllBunniesByBunnyId(bunnyId)\r\n  const existingTokensWithBunnyId = existingBunniesInState ? existingBunniesInState.map((nft) => nft.tokenId) : []\r\n\r\n  const allPancakeBunnies = useNftsFromCollection(pancakeBunniesAddress)\r\n  const allExistingPBTokenIds = allPancakeBunnies ? allPancakeBunnies.map((nft) => nft.tokenId) : []\r\n\r\n  const firstBunny = existingBunniesInState.length > 0 ? existingBunniesInState[0] : null\r\n\r\n  // If we already have NFT with this bunny id in state - we can reuse its metadata without making API request\r\n  const existingMetadata = useMemo(() => {\r\n    return firstBunny\r\n      ? {\r\n          name: firstBunny.name,\r\n          description: firstBunny.description,\r\n          collection: { name: firstBunny.collectionName },\r\n          image: firstBunny.image,\r\n        }\r\n      : null\r\n  }, [firstBunny])\r\n\r\n  // This fetches more bunnies when called\r\n  const fetchMorePancakeBunnies = (orderDirection: 'asc' | 'desc') => {\r\n    dispatch(\r\n      fetchNewPBAndUpdateExisting({\r\n        bunnyId,\r\n        existingTokensWithBunnyId,\r\n        allExistingPBTokenIds,\r\n        existingMetadata,\r\n        orderDirection,\r\n      }),\r\n    )\r\n  }\r\n\r\n  return { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies }\r\n}\r\n\r\nexport const useLoadingState = () => {\r\n  return useSelector((state: State) => state.nftMarket.data.loadingState)\r\n}\r\n\r\nexport const useGetCollections = () => {\r\n  return useSelector((state: State) => state.nftMarket.data.collections)\r\n}\r\n\r\nexport const useGetCollection = (collectionAddress: string) => {\r\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\r\n  const collections = useGetCollections()\r\n  return collections[checksummedCollectionAddress]\r\n}\r\n\r\nexport const useNftsFromCollection = (collectionAddress: string) => {\r\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\r\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[checksummedCollectionAddress])\r\n  return nfts\r\n}\r\n\r\nexport const useGetAllBunniesByBunnyId = (bunnyId: string) => {\r\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[pancakeBunniesAddress])\r\n  return nfts ? nfts.filter((nft) => nft.attributes[0].value === bunnyId && nft.marketData.isTradable) : []\r\n}\r\n\r\nexport const useGetNFTInitializationState = () => {\r\n  return useSelector((state: State) => state.nftMarket.initializationState)\r\n}\r\n\r\nexport const useUserNfts = (): UserNftsState => {\r\n  return useSelector((state: State) => state.nftMarket.data.user)\r\n}\r\n\r\nexport const useHasGen0Nfts = (): boolean => {\r\n  const userNfts = useSelector((state: State) => state.nftMarket.data.user)\r\n  return userNfts.nfts.some((nft) => nft.attributes && Number(nft.attributes[0]?.value) <= MAX_GEN0_ID)\r\n}\r\n\r\nexport const useGetNftFilters = (collectionAddress: string) => {\r\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\r\n  return collectionFilter ? collectionFilter.activeFilters : {}\r\n}\r\n\r\nexport const useGetNftFilterLoadingState = (collectionAddress: string) => {\r\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\r\n  return collectionFilter ? collectionFilter.loadingState : FetchStatus.Idle\r\n}\r\n\r\nexport const useGetNftOrdering = (collectionAddress: string) => {\r\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\r\n  return collectionFilter ? collectionFilter.ordering : { field: 'currentAskPrice', direction: 'asc' as 'asc' | 'desc' }\r\n}\r\n\r\nexport const useGetNftShowOnlyOnSale = (collectionAddress: string) => {\r\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\r\n  return collectionFilter ? collectionFilter.showOnlyOnSale : true\r\n}\r\n\r\nexport const useGetNftActivityFilters = (collectionAddress: string) => {\r\n  const collectionFilter: NftActivityFilter = useSelector(\r\n    (state: State) => state.nftMarket.data.activityFilters[collectionAddress],\r\n  )\r\n  return collectionFilter || { typeFilters: [], collectionFilters: [] }\r\n}\r\n","import React, { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { logError } from 'utils/sentry'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        logError(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        logError(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import { useEffect, useMemo } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\r\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst useFetchUserNfts = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\r\n  const { userNftsInitializationState } = useUserNfts()\r\n  const collections = useGetCollections()\r\n\r\n  const hasProfileNft = profile?.tokenId\r\n  const profileNftTokenId = profile?.tokenId?.toString()\r\n  const profileNftCollectionAddress = profile?.collectionAddress\r\n\r\n  const profileNftWithCollectionAddress = useMemo(() => {\r\n    if (hasProfileNft) {\r\n      return {\r\n        tokenId: profileNftTokenId,\r\n        collectionAddress: profileNftCollectionAddress,\r\n        nftLocation: NftLocation.PROFILE,\r\n      }\r\n    }\r\n    return null\r\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\r\n\r\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\r\n\r\n  // Fetch on first load when profile fetch is resolved\r\n  const shouldFetch =\r\n    account &&\r\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\r\n    isProfileInitialized &&\r\n    !isProfileLoading\r\n\r\n  // Fetch on account / profile change, once profile fetch is resolved\r\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\r\n\r\n  useEffect(() => {\r\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\r\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\r\n    }\r\n  }, [\r\n    dispatch,\r\n    account,\r\n    shouldFetch,\r\n    hasAccountSwitched,\r\n    profileNftTokenId,\r\n    collections,\r\n    profileNftWithCollectionAddress,\r\n  ])\r\n}\r\n\r\nexport default useFetchUserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Radio } from '@pancakeswap/uikit'\r\n\r\ninterface SelectionCardProps {\r\n  name: string\r\n  value: string | number\r\n  isChecked?: boolean\r\n  onChange: (val: any) => void\r\n  image: string\r\n  disabled?: boolean\r\n}\r\n\r\nconst Label = styled.label<{ isDisabled: boolean }>`\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\r\n`\r\n\r\nconst Body = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  height: 80px;\r\n  padding: 8px 16px;\r\n`\r\n\r\nconst Children = styled.div`\r\n  margin-left: 16px;\r\n`\r\n\r\nconst StyledBackgroundImage = styled.div<{ src: string }>`\r\n  align-self: stretch;\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 80px;\r\n`\r\n\r\nconst SelectionCard: React.FC<SelectionCardProps> = ({\r\n  name,\r\n  value,\r\n  isChecked = false,\r\n  image,\r\n  onChange,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\r\n      <Label isDisabled={disabled}>\r\n        <Body>\r\n          <Radio\r\n            name={name}\r\n            checked={isChecked}\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            disabled={disabled}\r\n            style={{ flex: 'none' }}\r\n          />\r\n          <Children>{children}</Children>\r\n        </Body>\r\n        <StyledBackgroundImage src={image} />\r\n      </Label>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SelectionCard\r\n"],"sourceRoot":""}