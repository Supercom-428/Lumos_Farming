{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","contrast","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","useApproveFarm","lpContract","masterChefContract","useMasterchef","callWithGasPrice","useCallWithGasPrice","onApprove","useCallback","onTransactionSubmitted","onSuccess","onError","a","ethers","constants","MaxUint256","tx","wait","receipt","status","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","pid","account","useWeb3React","useToast","toastSuccess","toastError","useState","pendingTx","setPendingTx","cakePrice","usePriceCakeBusd","dispatch","useAppDispatch","rawEarningsBalance","getBalanceAmount","BIG_ZERO","displayBalance","toFixed","BigNumber","ROUND_DOWN","earningsBusd","multipliedBy","toNumber","eq","Balance","fontSize","decimals","value","unit","prefix","disabled","Toast","txHash","hash","transactionHash","logError","fetchFarmUserDataAsync","pids","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","inputTitle","isBalanceZero","style","position","pl","balance","balanceUnits","parseUnits","formatBigNumber","pattern","inputMode","step","min","placeholder","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","val","setVal","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","Number","isFinite","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","useLpTokenPrice","handleStake","handleUnstake","stakedBalanceBigNumber","lt","useModal","onPresentDeposit","onPresentWithdraw","getBalanceNumber","some","item","pathname","includes","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","console","log","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","background","isCommunity","display","CardActionsContainer","getBscScanLink","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","id","ControlContainer","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","data","userDataLoaded","query","setQuery","useUserFarmsViewMode","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","useRef","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","toLowerCase","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","current","useEffect","farmsCurrentlyVisible","originalValue","label","earned","details","Page","Select","options","onOptionChange","option","marginLeft","SearchInput","target","exact","Loading","ref"],"mappings":"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","file":"static/js/32.16230ec0.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.contrast};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"contrast\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport tokens from 'config/constants/tokens'\r\n\r\nconst getLiquidityUrlPathParts = ({\r\n  quoteTokenAddress,\r\n  tokenAddress,\r\n}: {\r\n  quoteTokenAddress: string\r\n  tokenAddress: string\r\n}): string => {\r\n  const wBnbAddress = tokens.wbnb.address\r\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\r\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          {multiplier ? (\r\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n          ) : (\r\n            <Skeleton ml=\"4px\" width={42} height={28} />\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(\r\n    async (\r\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\r\n      onSuccess: (receipt: TransactionReceipt) => void,\r\n      onError: (receipt: TransactionReceipt) => void,\r\n    ) => {\r\n      const tx = await callWithGasPrice(lpContract, 'approve', [\r\n        masterChefContract.address,\r\n        ethers.constants.MaxUint256,\r\n      ])\r\n      onTransactionSubmitted(tx)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        onSuccess(receipt)\r\n      } else {\r\n        onError(receipt)\r\n      }\r\n    },\r\n    [lpContract, masterChefContract, callWithGasPrice],\r\n  )\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { TransactionReceipt } from '@ethersproject/abstract-provider/src.ts/index'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(\r\n    async (\r\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\r\n      onSuccess: (receipt: TransactionReceipt) => void,\r\n      onError: (receipt: TransactionReceipt) => void,\r\n    ) => {\r\n      const tx = await harvestFarm(masterChefContract, farmPid)\r\n      onTransactionSubmitted(tx)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        onSuccess(receipt)\r\n      } else {\r\n        onError(receipt)\r\n      }\r\n    },\r\n    [farmPid, masterChefContract],\r\n  )\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport useToast from 'hooks/useToast'\r\nimport React, { useState } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { logError } from 'utils/sentry'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward(\r\n              (tx) => {\r\n                toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n              },\r\n              (receipt) => {\r\n                toastSuccess(\r\n                  `${t('Harvested')}!`,\r\n                  <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n                    {t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' })}\r\n                  </ToastDescriptionWithTx>,\r\n                )\r\n              },\r\n              (receipt) => {\r\n                toastError(\r\n                  t('Error'),\r\n                  <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n                    {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\r\n                  </ToastDescriptionWithTx>,\r\n                )\r\n              },\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            logError(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {pendingTx ? t('Harvesting') : t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n\r\n    const balanceUnits = parseUnits(balance, decimals)\r\n    return formatBigNumber(balanceUnits, decimals, decimals)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton, Skeleton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\nimport { logError } from 'utils/sentry'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        {Number.isFinite(annualRoi) ? (\r\n          <AnnualRoiContainer\r\n            alignItems=\"center\"\r\n            onClick={() => {\r\n              setShowRoiCalculator(true)\r\n            }}\r\n          >\r\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n            <IconButton variant=\"text\" scale=\"sm\">\r\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n            </IconButton>\r\n          </AnnualRoiContainer>\r\n        ) : (\r\n          <Skeleton width={60} />\r\n        )}\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              onDismiss()\r\n            } catch (e) {\r\n              logError(e)\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { logError } from 'utils/sentry'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              onDismiss()\r\n            } catch (e) {\r\n              logError(e)\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (\r\n      amount: string,\r\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\r\n      onSuccess: (receipt: TransactionReceipt) => void,\r\n      onError: (receipt: TransactionReceipt) => void,\r\n    ) => {\r\n      const tx = await unstakeFarm(masterChefContract, pid, amount)\r\n      onTransactionSubmitted(tx)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        onSuccess(receipt)\r\n      } else {\r\n        onError(receipt)\r\n      }\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { TransactionResponse, TransactionReceipt } from '@ethersproject/providers'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (\r\n      amount: string,\r\n      onTransactionSubmitted: (tx: TransactionResponse) => void,\r\n      onSuccess: (receipt: TransactionReceipt) => void,\r\n      onError: (receipt: TransactionReceipt) => void,\r\n    ) => {\r\n      const tx = await stakeFarm(masterChefContract, pid, amount)\r\n      onTransactionSubmitted(tx)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        onSuccess(receipt)\r\n      } else {\r\n        onError(receipt)\r\n      }\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport useToast from 'hooks/useToast'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(\r\n      amount,\r\n      (tx) => {\r\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n      },\r\n      (receipt) => {\r\n        toastSuccess(\r\n          `${t('Staked')}!`,\r\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n            {t('Your funds have been staked in the farm')}\r\n          </ToastDescriptionWithTx>,\r\n        )\r\n      },\r\n      (receipt) => {\r\n        toastError(\r\n          t('Error'),\r\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n            {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\r\n          </ToastDescriptionWithTx>,\r\n        )\r\n      },\r\n    )\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(\r\n      amount,\r\n      (tx) => {\r\n        toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n      },\r\n      (receipt) => {\r\n        toastSuccess(\r\n          `${t('Unstaked')}!`,\r\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n            {t('Your earnings have also been harvested to your wallet')}\r\n          </ToastDescriptionWithTx>,\r\n        )\r\n      },\r\n      (receipt) => {\r\n        toastError(\r\n          t('Error'),\r\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n            {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\r\n          </ToastDescriptionWithTx>,\r\n        )\r\n      },\r\n    )\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport React, { useCallback, useState } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport styled from 'styled-components'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { logError } from 'utils/sentry'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\nimport HarvestAction from './HarvestAction'\r\nimport StakeAction from './StakeAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove(\r\n        (tx) => {\r\n          toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\r\n        },\r\n        (receipt) => {\r\n          toastSuccess(t('Contract Enabled'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n        },\r\n        (receipt) => {\r\n          toastError(\r\n            t('Error'),\r\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\r\n              {t('Please try again. Confirm the transaction and make sure you are paying enough gas!')}\r\n            </ToastDescriptionWithTx>,\r\n          )\r\n        },\r\n      )\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n    } catch (e) {\r\n      logError(e)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [onApprove, dispatch, account, pid, t, toastError, toastSuccess])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"contrast\" fontSize=\"12px\" pr=\"4px\">\r\n          TORG\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"contrast\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('TORG + Fees')\r\n\r\n  console.log(\"lpLabel : \", lpLabel, earnLabel, farm);\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'TORG'\r\n\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm} style={{ background : '#36b79fad' }}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{t('APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Earn')}:</Text>\r\n          <Text bold>{earnLabel}</Text>\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n            infoAddress={`/info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\r\nimport { ViewMode } from 'state/user/actions'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px !important;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\r\n          return farm\r\n        }\r\n\r\n        console.log('totalLiquidity : ', farm.lpTotalInQuoteToken.toNumber(), farm.quoteTokenPriceBusd)\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n        }\r\n        return farmsCurrentlyVisible\r\n      })\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    // if (viewMode === ViewMode.TABLE && rowData.length) {\r\n    //   const columnSchema = DesktopColumnSchema\r\n\r\n    //   const columns = columnSchema.map((column) => ({\r\n    //     id: column.id,\r\n    //     name: column.name,\r\n    //     label: column.label,\r\n    //     sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n    //       switch (column.name) {\r\n    //         case 'farm':\r\n    //           return b.id - a.id\r\n    //         case 'apr':\r\n    //           if (a.original.apr.value && b.original.apr.value) {\r\n    //             return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n    //           }\r\n\r\n    //           return 0\r\n    //         case 'earned':\r\n    //           return a.original.earned.earnings - b.original.earned.earnings\r\n    //         default:\r\n    //           return 1\r\n    //       }\r\n    //     },\r\n    //     sortable: column.sortable,\r\n    //   }))\r\n\r\n    //   return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    // }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Page style={{ width: '100%' }}>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            {/* <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} /> */}\r\n            {/* <ToggleWrapper>\r\n              <Toggle\r\n                id=\"staked-only-farms\"\r\n                checked={stakedOnly}\r\n                onChange={() => setStakedOnly(!stakedOnly)}\r\n                scale=\"sm\"\r\n              />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper> */}\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={observerRef} />\r\n        {/* <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}