{"version":3,"sources":["utils/getTokenList.ts"],"names":["tokenListValidator","Ajv","allErrors","compile","schema","getTokenList","listUrl","resolveENSContentHash","a","parsedENS","parseENSAddress","ensName","contentHashUri","console","error","Error","translatedUri","contenthashToUri","urls","uriToHttp","ensPath","i","length","url","isLast","response","fetch","ok","json","validationErrors","errors","reduce","memo","add","dataPath","message"],"mappings":"iQASMA,EAAqB,IAAIC,IAAI,CAAEC,WAAW,IAAQC,QAAQC,GAOjD,SAAeC,EAA9B,oC,4CAAe,WACbC,EACAC,GAFa,uCAAAC,EAAA,2DAIPC,EAAYC,YAAgBJ,IAJrB,0CAScC,EAAsBE,EAAUE,SAT9C,OASTC,EATS,6DAWTC,QAAQC,MAAR,sCAA6CL,EAAUE,SAAvD,MACM,IAAII,MAAJ,sCAAyCN,EAAUE,UAZhD,kBAgBTK,EAAgBC,YAAiBL,GAhBxB,yDAkBTC,QAAQC,MAAM,yCAA0CF,GAClD,IAAIG,MAAJ,kDAAqDH,IAnBlD,QAqBXM,EAAOC,YAAU,GAAD,OAAIH,GAAJ,iBAAoBP,EAAUW,eAA9B,QAAyC,KArB9C,wBAuBXF,EAAOC,YAAUb,GAvBN,QAyBJe,EAAI,EAzBA,aAyBGA,EAAIH,EAAKI,QAzBZ,wBA0BLC,EAAML,EAAKG,GACXG,EAASH,IAAMH,EAAKI,OAAS,EAC/BG,OA5BO,sBA8BQC,MAAMH,GA9Bd,QA8BTE,EA9BS,6DAgCTZ,QAAQC,MAAM,uBAAwBR,EAAtC,OACIkB,EAjCK,uBAiCS,IAAIT,MAAJ,kCAAqCT,IAjC9C,kDAqCNmB,EAASE,GArCH,qBAsCLH,EAtCK,uBAsCS,IAAIT,MAAJ,kCAAqCT,IAtC9C,gEA0CQmB,EAASG,OA1CjB,WA0CLA,EA1CK,OA2CN5B,EAAmB4B,GA3Cb,uBA4CHC,EA5CG,oBA6CP7B,EAAmB8B,cA7CZ,aA6CP,EAA2BC,QAAe,SAACC,EAAMlB,GAAW,IAAD,EACnDmB,EAAG,UAAOnB,EAAcoB,SAArB,sBAAiCpB,EAAMqB,eAAvC,QAAkD,IAC3D,OAAOH,EAAKV,OAAS,EAAd,UAAqBU,EAArB,aAA8BC,GAA9B,UAAyCA,KAC/C,WAhDI,QAgDG,gBACN,IAAIlB,MAAJ,wCAA2Cc,IAjDxC,iCAmDJD,GAnDI,QAyBoBP,IAzBpB,8BAqDP,IAAIN,MAAM,mCArDH,0E","file":"static/js/31.2bd17e22.chunk.js","sourcesContent":["/* eslint-disable no-continue */\r\n/* eslint-disable no-await-in-loop */\r\nimport { TokenList } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\nimport contenthashToUri from './contenthashToUri'\r\nimport { parseENSAddress } from './ENS/parseENSAddress'\r\nimport uriToHttp from './uriToHttp'\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\r\nexport default async function getTokenList(\r\n  listUrl: string,\r\n  resolveENSContentHash: (ensName: string) => Promise<string>,\r\n): Promise<TokenList> {\r\n  const parsedENS = parseENSAddress(listUrl)\r\n  let urls: string[]\r\n  if (parsedENS) {\r\n    let contentHashUri\r\n    try {\r\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\r\n    } catch (error) {\r\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error)\r\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`)\r\n    }\r\n    let translatedUri\r\n    try {\r\n      translatedUri = contenthashToUri(contentHashUri)\r\n    } catch (error) {\r\n      console.error('Failed to translate contenthash to URI', contentHashUri)\r\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`)\r\n    }\r\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\r\n  } else {\r\n    urls = uriToHttp(listUrl)\r\n  }\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const isLast = i === urls.length - 1\r\n    let response\r\n    try {\r\n      response = await fetch(url)\r\n    } catch (error) {\r\n      console.error('Failed to fetch list', listUrl, error)\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    const json = await response.json()\r\n    if (!tokenListValidator(json)) {\r\n      const validationErrors: string =\r\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n          const add = `${(error as any).dataPath} ${error.message ?? ''}`\r\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n        }, '') ?? 'unknown error'\r\n      throw new Error(`Token list failed validation: ${validationErrors}`)\r\n    }\r\n    return json as TokenList\r\n  }\r\n  throw new Error('Unrecognized list URL protocol.')\r\n}\r\n"],"sourceRoot":""}